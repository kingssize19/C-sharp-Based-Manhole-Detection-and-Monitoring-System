
proje.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007204  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000021c  080073d4  080073d4  000173d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075f0  080075f0  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  080075f0  080075f0  000175f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080075f8  080075f8  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075f8  080075f8  000175f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080075fc  080075fc  000175fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08007600  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000398  2000005c  0800765c  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003f4  0800765c  000203f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001075d  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002658  00000000  00000000  0003082c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ef0  00000000  00000000  00032e88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bb8  00000000  00000000  00033d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002395a  00000000  00000000  00034930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012d9f  00000000  00000000  0005828a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dde5a  00000000  00000000  0006b029  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000485c  00000000  00000000  00148e84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  0014d6e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080073bc 	.word	0x080073bc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	080073bc 	.word	0x080073bc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2uiz>:
 8000a5c:	004a      	lsls	r2, r1, #1
 8000a5e:	d211      	bcs.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a64:	d211      	bcs.n	8000a8a <__aeabi_d2uiz+0x2e>
 8000a66:	d50d      	bpl.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d40e      	bmi.n	8000a90 <__aeabi_d2uiz+0x34>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8e:	d102      	bne.n	8000a96 <__aeabi_d2uiz+0x3a>
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295
 8000a94:	4770      	bx	lr
 8000a96:	f04f 0000 	mov.w	r0, #0
 8000a9a:	4770      	bx	lr

08000a9c <__aeabi_uldivmod>:
 8000a9c:	b953      	cbnz	r3, 8000ab4 <__aeabi_uldivmod+0x18>
 8000a9e:	b94a      	cbnz	r2, 8000ab4 <__aeabi_uldivmod+0x18>
 8000aa0:	2900      	cmp	r1, #0
 8000aa2:	bf08      	it	eq
 8000aa4:	2800      	cmpeq	r0, #0
 8000aa6:	bf1c      	itt	ne
 8000aa8:	f04f 31ff 	movne.w	r1, #4294967295
 8000aac:	f04f 30ff 	movne.w	r0, #4294967295
 8000ab0:	f000 b970 	b.w	8000d94 <__aeabi_idiv0>
 8000ab4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000abc:	f000 f806 	bl	8000acc <__udivmoddi4>
 8000ac0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ac4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac8:	b004      	add	sp, #16
 8000aca:	4770      	bx	lr

08000acc <__udivmoddi4>:
 8000acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ad0:	9e08      	ldr	r6, [sp, #32]
 8000ad2:	460d      	mov	r5, r1
 8000ad4:	4604      	mov	r4, r0
 8000ad6:	460f      	mov	r7, r1
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d14a      	bne.n	8000b72 <__udivmoddi4+0xa6>
 8000adc:	428a      	cmp	r2, r1
 8000ade:	4694      	mov	ip, r2
 8000ae0:	d965      	bls.n	8000bae <__udivmoddi4+0xe2>
 8000ae2:	fab2 f382 	clz	r3, r2
 8000ae6:	b143      	cbz	r3, 8000afa <__udivmoddi4+0x2e>
 8000ae8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000aec:	f1c3 0220 	rsb	r2, r3, #32
 8000af0:	409f      	lsls	r7, r3
 8000af2:	fa20 f202 	lsr.w	r2, r0, r2
 8000af6:	4317      	orrs	r7, r2
 8000af8:	409c      	lsls	r4, r3
 8000afa:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000afe:	fa1f f58c 	uxth.w	r5, ip
 8000b02:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b06:	0c22      	lsrs	r2, r4, #16
 8000b08:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b0c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b10:	fb01 f005 	mul.w	r0, r1, r5
 8000b14:	4290      	cmp	r0, r2
 8000b16:	d90a      	bls.n	8000b2e <__udivmoddi4+0x62>
 8000b18:	eb1c 0202 	adds.w	r2, ip, r2
 8000b1c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b20:	f080 811c 	bcs.w	8000d5c <__udivmoddi4+0x290>
 8000b24:	4290      	cmp	r0, r2
 8000b26:	f240 8119 	bls.w	8000d5c <__udivmoddi4+0x290>
 8000b2a:	3902      	subs	r1, #2
 8000b2c:	4462      	add	r2, ip
 8000b2e:	1a12      	subs	r2, r2, r0
 8000b30:	b2a4      	uxth	r4, r4
 8000b32:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b36:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b3a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b3e:	fb00 f505 	mul.w	r5, r0, r5
 8000b42:	42a5      	cmp	r5, r4
 8000b44:	d90a      	bls.n	8000b5c <__udivmoddi4+0x90>
 8000b46:	eb1c 0404 	adds.w	r4, ip, r4
 8000b4a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b4e:	f080 8107 	bcs.w	8000d60 <__udivmoddi4+0x294>
 8000b52:	42a5      	cmp	r5, r4
 8000b54:	f240 8104 	bls.w	8000d60 <__udivmoddi4+0x294>
 8000b58:	4464      	add	r4, ip
 8000b5a:	3802      	subs	r0, #2
 8000b5c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b60:	1b64      	subs	r4, r4, r5
 8000b62:	2100      	movs	r1, #0
 8000b64:	b11e      	cbz	r6, 8000b6e <__udivmoddi4+0xa2>
 8000b66:	40dc      	lsrs	r4, r3
 8000b68:	2300      	movs	r3, #0
 8000b6a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b72:	428b      	cmp	r3, r1
 8000b74:	d908      	bls.n	8000b88 <__udivmoddi4+0xbc>
 8000b76:	2e00      	cmp	r6, #0
 8000b78:	f000 80ed 	beq.w	8000d56 <__udivmoddi4+0x28a>
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b82:	4608      	mov	r0, r1
 8000b84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b88:	fab3 f183 	clz	r1, r3
 8000b8c:	2900      	cmp	r1, #0
 8000b8e:	d149      	bne.n	8000c24 <__udivmoddi4+0x158>
 8000b90:	42ab      	cmp	r3, r5
 8000b92:	d302      	bcc.n	8000b9a <__udivmoddi4+0xce>
 8000b94:	4282      	cmp	r2, r0
 8000b96:	f200 80f8 	bhi.w	8000d8a <__udivmoddi4+0x2be>
 8000b9a:	1a84      	subs	r4, r0, r2
 8000b9c:	eb65 0203 	sbc.w	r2, r5, r3
 8000ba0:	2001      	movs	r0, #1
 8000ba2:	4617      	mov	r7, r2
 8000ba4:	2e00      	cmp	r6, #0
 8000ba6:	d0e2      	beq.n	8000b6e <__udivmoddi4+0xa2>
 8000ba8:	e9c6 4700 	strd	r4, r7, [r6]
 8000bac:	e7df      	b.n	8000b6e <__udivmoddi4+0xa2>
 8000bae:	b902      	cbnz	r2, 8000bb2 <__udivmoddi4+0xe6>
 8000bb0:	deff      	udf	#255	; 0xff
 8000bb2:	fab2 f382 	clz	r3, r2
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	f040 8090 	bne.w	8000cdc <__udivmoddi4+0x210>
 8000bbc:	1a8a      	subs	r2, r1, r2
 8000bbe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bc2:	fa1f fe8c 	uxth.w	lr, ip
 8000bc6:	2101      	movs	r1, #1
 8000bc8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000bcc:	fb07 2015 	mls	r0, r7, r5, r2
 8000bd0:	0c22      	lsrs	r2, r4, #16
 8000bd2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000bd6:	fb0e f005 	mul.w	r0, lr, r5
 8000bda:	4290      	cmp	r0, r2
 8000bdc:	d908      	bls.n	8000bf0 <__udivmoddi4+0x124>
 8000bde:	eb1c 0202 	adds.w	r2, ip, r2
 8000be2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000be6:	d202      	bcs.n	8000bee <__udivmoddi4+0x122>
 8000be8:	4290      	cmp	r0, r2
 8000bea:	f200 80cb 	bhi.w	8000d84 <__udivmoddi4+0x2b8>
 8000bee:	4645      	mov	r5, r8
 8000bf0:	1a12      	subs	r2, r2, r0
 8000bf2:	b2a4      	uxth	r4, r4
 8000bf4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000bf8:	fb07 2210 	mls	r2, r7, r0, r2
 8000bfc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c00:	fb0e fe00 	mul.w	lr, lr, r0
 8000c04:	45a6      	cmp	lr, r4
 8000c06:	d908      	bls.n	8000c1a <__udivmoddi4+0x14e>
 8000c08:	eb1c 0404 	adds.w	r4, ip, r4
 8000c0c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c10:	d202      	bcs.n	8000c18 <__udivmoddi4+0x14c>
 8000c12:	45a6      	cmp	lr, r4
 8000c14:	f200 80bb 	bhi.w	8000d8e <__udivmoddi4+0x2c2>
 8000c18:	4610      	mov	r0, r2
 8000c1a:	eba4 040e 	sub.w	r4, r4, lr
 8000c1e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c22:	e79f      	b.n	8000b64 <__udivmoddi4+0x98>
 8000c24:	f1c1 0720 	rsb	r7, r1, #32
 8000c28:	408b      	lsls	r3, r1
 8000c2a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c2e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c32:	fa05 f401 	lsl.w	r4, r5, r1
 8000c36:	fa20 f307 	lsr.w	r3, r0, r7
 8000c3a:	40fd      	lsrs	r5, r7
 8000c3c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c40:	4323      	orrs	r3, r4
 8000c42:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c46:	fa1f fe8c 	uxth.w	lr, ip
 8000c4a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c4e:	0c1c      	lsrs	r4, r3, #16
 8000c50:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c54:	fb08 f50e 	mul.w	r5, r8, lr
 8000c58:	42a5      	cmp	r5, r4
 8000c5a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c5e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c62:	d90b      	bls.n	8000c7c <__udivmoddi4+0x1b0>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c6c:	f080 8088 	bcs.w	8000d80 <__udivmoddi4+0x2b4>
 8000c70:	42a5      	cmp	r5, r4
 8000c72:	f240 8085 	bls.w	8000d80 <__udivmoddi4+0x2b4>
 8000c76:	f1a8 0802 	sub.w	r8, r8, #2
 8000c7a:	4464      	add	r4, ip
 8000c7c:	1b64      	subs	r4, r4, r5
 8000c7e:	b29d      	uxth	r5, r3
 8000c80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c84:	fb09 4413 	mls	r4, r9, r3, r4
 8000c88:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c8c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c90:	45a6      	cmp	lr, r4
 8000c92:	d908      	bls.n	8000ca6 <__udivmoddi4+0x1da>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c9c:	d26c      	bcs.n	8000d78 <__udivmoddi4+0x2ac>
 8000c9e:	45a6      	cmp	lr, r4
 8000ca0:	d96a      	bls.n	8000d78 <__udivmoddi4+0x2ac>
 8000ca2:	3b02      	subs	r3, #2
 8000ca4:	4464      	add	r4, ip
 8000ca6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000caa:	fba3 9502 	umull	r9, r5, r3, r2
 8000cae:	eba4 040e 	sub.w	r4, r4, lr
 8000cb2:	42ac      	cmp	r4, r5
 8000cb4:	46c8      	mov	r8, r9
 8000cb6:	46ae      	mov	lr, r5
 8000cb8:	d356      	bcc.n	8000d68 <__udivmoddi4+0x29c>
 8000cba:	d053      	beq.n	8000d64 <__udivmoddi4+0x298>
 8000cbc:	b156      	cbz	r6, 8000cd4 <__udivmoddi4+0x208>
 8000cbe:	ebb0 0208 	subs.w	r2, r0, r8
 8000cc2:	eb64 040e 	sbc.w	r4, r4, lr
 8000cc6:	fa04 f707 	lsl.w	r7, r4, r7
 8000cca:	40ca      	lsrs	r2, r1
 8000ccc:	40cc      	lsrs	r4, r1
 8000cce:	4317      	orrs	r7, r2
 8000cd0:	e9c6 7400 	strd	r7, r4, [r6]
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cdc:	f1c3 0120 	rsb	r1, r3, #32
 8000ce0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ce4:	fa20 f201 	lsr.w	r2, r0, r1
 8000ce8:	fa25 f101 	lsr.w	r1, r5, r1
 8000cec:	409d      	lsls	r5, r3
 8000cee:	432a      	orrs	r2, r5
 8000cf0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cf4:	fa1f fe8c 	uxth.w	lr, ip
 8000cf8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cfc:	fb07 1510 	mls	r5, r7, r0, r1
 8000d00:	0c11      	lsrs	r1, r2, #16
 8000d02:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d06:	fb00 f50e 	mul.w	r5, r0, lr
 8000d0a:	428d      	cmp	r5, r1
 8000d0c:	fa04 f403 	lsl.w	r4, r4, r3
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x258>
 8000d12:	eb1c 0101 	adds.w	r1, ip, r1
 8000d16:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d1a:	d22f      	bcs.n	8000d7c <__udivmoddi4+0x2b0>
 8000d1c:	428d      	cmp	r5, r1
 8000d1e:	d92d      	bls.n	8000d7c <__udivmoddi4+0x2b0>
 8000d20:	3802      	subs	r0, #2
 8000d22:	4461      	add	r1, ip
 8000d24:	1b49      	subs	r1, r1, r5
 8000d26:	b292      	uxth	r2, r2
 8000d28:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d2c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d30:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d34:	fb05 f10e 	mul.w	r1, r5, lr
 8000d38:	4291      	cmp	r1, r2
 8000d3a:	d908      	bls.n	8000d4e <__udivmoddi4+0x282>
 8000d3c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d40:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d44:	d216      	bcs.n	8000d74 <__udivmoddi4+0x2a8>
 8000d46:	4291      	cmp	r1, r2
 8000d48:	d914      	bls.n	8000d74 <__udivmoddi4+0x2a8>
 8000d4a:	3d02      	subs	r5, #2
 8000d4c:	4462      	add	r2, ip
 8000d4e:	1a52      	subs	r2, r2, r1
 8000d50:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d54:	e738      	b.n	8000bc8 <__udivmoddi4+0xfc>
 8000d56:	4631      	mov	r1, r6
 8000d58:	4630      	mov	r0, r6
 8000d5a:	e708      	b.n	8000b6e <__udivmoddi4+0xa2>
 8000d5c:	4639      	mov	r1, r7
 8000d5e:	e6e6      	b.n	8000b2e <__udivmoddi4+0x62>
 8000d60:	4610      	mov	r0, r2
 8000d62:	e6fb      	b.n	8000b5c <__udivmoddi4+0x90>
 8000d64:	4548      	cmp	r0, r9
 8000d66:	d2a9      	bcs.n	8000cbc <__udivmoddi4+0x1f0>
 8000d68:	ebb9 0802 	subs.w	r8, r9, r2
 8000d6c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d70:	3b01      	subs	r3, #1
 8000d72:	e7a3      	b.n	8000cbc <__udivmoddi4+0x1f0>
 8000d74:	4645      	mov	r5, r8
 8000d76:	e7ea      	b.n	8000d4e <__udivmoddi4+0x282>
 8000d78:	462b      	mov	r3, r5
 8000d7a:	e794      	b.n	8000ca6 <__udivmoddi4+0x1da>
 8000d7c:	4640      	mov	r0, r8
 8000d7e:	e7d1      	b.n	8000d24 <__udivmoddi4+0x258>
 8000d80:	46d0      	mov	r8, sl
 8000d82:	e77b      	b.n	8000c7c <__udivmoddi4+0x1b0>
 8000d84:	3d02      	subs	r5, #2
 8000d86:	4462      	add	r2, ip
 8000d88:	e732      	b.n	8000bf0 <__udivmoddi4+0x124>
 8000d8a:	4608      	mov	r0, r1
 8000d8c:	e70a      	b.n	8000ba4 <__udivmoddi4+0xd8>
 8000d8e:	4464      	add	r4, ip
 8000d90:	3802      	subs	r0, #2
 8000d92:	e742      	b.n	8000c1a <__udivmoddi4+0x14e>

08000d94 <__aeabi_idiv0>:
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop

08000d98 <delay_us>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay_us(uint16_t us)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COUNTER(&htim4, 0);  // Timer'ı sıfırla
 8000da2:	4b09      	ldr	r3, [pc, #36]	; (8000dc8 <delay_us+0x30>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	2200      	movs	r2, #0
 8000da8:	625a      	str	r2, [r3, #36]	; 0x24
    while (__HAL_TIM_GET_COUNTER(&htim4) < us);  // Belirtilen süre kadar bekle
 8000daa:	bf00      	nop
 8000dac:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <delay_us+0x30>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000db2:	88fb      	ldrh	r3, [r7, #6]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	d3f9      	bcc.n	8000dac <delay_us+0x14>
}
 8000db8:	bf00      	nop
 8000dba:	bf00      	nop
 8000dbc:	370c      	adds	r7, #12
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	20000198 	.word	0x20000198

08000dcc <Read_LDR>:

uint16_t Read_LDR(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8000dd0:	480b      	ldr	r0, [pc, #44]	; (8000e00 <Read_LDR+0x34>)
 8000dd2:	f001 f935 	bl	8002040 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 20);
 8000dd6:	2114      	movs	r1, #20
 8000dd8:	4809      	ldr	r0, [pc, #36]	; (8000e00 <Read_LDR+0x34>)
 8000dda:	f001 fa03 	bl	80021e4 <HAL_ADC_PollForConversion>
	light_value = HAL_ADC_GetValue(&hadc1);
 8000dde:	4808      	ldr	r0, [pc, #32]	; (8000e00 <Read_LDR+0x34>)
 8000de0:	f001 fc7a 	bl	80026d8 <HAL_ADC_GetValue>
 8000de4:	4603      	mov	r3, r0
 8000de6:	b29a      	uxth	r2, r3
 8000de8:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <Read_LDR+0x38>)
 8000dea:	801a      	strh	r2, [r3, #0]

	if(light_value < 1000)
 8000dec:	4b05      	ldr	r3, [pc, #20]	; (8000e04 <Read_LDR+0x38>)
 8000dee:	881b      	ldrh	r3, [r3, #0]
 8000df0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000df4:	d201      	bcs.n	8000dfa <Read_LDR+0x2e>
	{
		return 1;
 8000df6:	2301      	movs	r3, #1
 8000df8:	e000      	b.n	8000dfc <Read_LDR+0x30>
	}
	else
	{
		return 0;
 8000dfa:	2300      	movs	r3, #0
	}
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	20000078 	.word	0x20000078
 8000e04:	20000228 	.word	0x20000228

08000e08 <Read_MQ2>:

uint16_t Read_MQ2(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc2);
 8000e0c:	480b      	ldr	r0, [pc, #44]	; (8000e3c <Read_MQ2+0x34>)
 8000e0e:	f001 f917 	bl	8002040 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, 20);
 8000e12:	2114      	movs	r1, #20
 8000e14:	4809      	ldr	r0, [pc, #36]	; (8000e3c <Read_MQ2+0x34>)
 8000e16:	f001 f9e5 	bl	80021e4 <HAL_ADC_PollForConversion>
	gas_value = HAL_ADC_GetValue(&hadc2);
 8000e1a:	4808      	ldr	r0, [pc, #32]	; (8000e3c <Read_MQ2+0x34>)
 8000e1c:	f001 fc5c 	bl	80026d8 <HAL_ADC_GetValue>
 8000e20:	4603      	mov	r3, r0
 8000e22:	b29a      	uxth	r2, r3
 8000e24:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <Read_MQ2+0x38>)
 8000e26:	801a      	strh	r2, [r3, #0]

	if(gas_value > 450)
 8000e28:	4b05      	ldr	r3, [pc, #20]	; (8000e40 <Read_MQ2+0x38>)
 8000e2a:	881b      	ldrh	r3, [r3, #0]
 8000e2c:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 8000e30:	d901      	bls.n	8000e36 <Read_MQ2+0x2e>
	{
		return 1;
 8000e32:	2301      	movs	r3, #1
 8000e34:	e000      	b.n	8000e38 <Read_MQ2+0x30>
	}
	else
	{
		return 0;
 8000e36:	2300      	movs	r3, #0
	}
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	200000c0 	.word	0x200000c0
 8000e40:	2000022c 	.word	0x2000022c
 8000e44:	00000000 	.word	0x00000000

08000e48 <Read_HCSR04>:


uint32_t Read_HCSR04(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b084      	sub	sp, #16
 8000e4c:	af00      	add	r7, sp, #0
    uint32_t duration = 0;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60fb      	str	r3, [r7, #12]

    // TRIG pini için pulse gönderme
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000e52:	2200      	movs	r2, #0
 8000e54:	2110      	movs	r1, #16
 8000e56:	4834      	ldr	r0, [pc, #208]	; (8000f28 <Read_HCSR04+0xe0>)
 8000e58:	f002 f9f2 	bl	8003240 <HAL_GPIO_WritePin>
    delay_us(2);
 8000e5c:	2002      	movs	r0, #2
 8000e5e:	f7ff ff9b 	bl	8000d98 <delay_us>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000e62:	2201      	movs	r2, #1
 8000e64:	2110      	movs	r1, #16
 8000e66:	4830      	ldr	r0, [pc, #192]	; (8000f28 <Read_HCSR04+0xe0>)
 8000e68:	f002 f9ea 	bl	8003240 <HAL_GPIO_WritePin>
    delay_us(10);
 8000e6c:	200a      	movs	r0, #10
 8000e6e:	f7ff ff93 	bl	8000d98 <delay_us>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000e72:	2200      	movs	r2, #0
 8000e74:	2110      	movs	r1, #16
 8000e76:	482c      	ldr	r0, [pc, #176]	; (8000f28 <Read_HCSR04+0xe0>)
 8000e78:	f002 f9e2 	bl	8003240 <HAL_GPIO_WritePin>

    // ECHO pininin yüksek olmasını bekleyerek süreyi ölçme
    uint32_t startTime = 0;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	60bb      	str	r3, [r7, #8]
    uint32_t endTime = 0;
 8000e80:	2300      	movs	r3, #0
 8000e82:	607b      	str	r3, [r7, #4]

    // TIM4 zamanlayıcıyı başlat
    HAL_TIM_Base_Start(&htim4); // Burada htim4 sizin TIM4 yapılandırmanızı ifade etmelidir.
 8000e84:	4829      	ldr	r0, [pc, #164]	; (8000f2c <Read_HCSR04+0xe4>)
 8000e86:	f003 f87d 	bl	8003f84 <HAL_TIM_Base_Start>

    // ECHO pininin yüksek olmasını bekleyerek süreyi ölçme
    while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == GPIO_PIN_RESET);
 8000e8a:	bf00      	nop
 8000e8c:	2120      	movs	r1, #32
 8000e8e:	4826      	ldr	r0, [pc, #152]	; (8000f28 <Read_HCSR04+0xe0>)
 8000e90:	f002 f9be 	bl	8003210 <HAL_GPIO_ReadPin>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d0f8      	beq.n	8000e8c <Read_HCSR04+0x44>
    startTime = __HAL_TIM_GET_COUNTER(&htim4); // Başlangıç zamanını al
 8000e9a:	4b24      	ldr	r3, [pc, #144]	; (8000f2c <Read_HCSR04+0xe4>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ea0:	60bb      	str	r3, [r7, #8]

    while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == GPIO_PIN_SET);
 8000ea2:	bf00      	nop
 8000ea4:	2120      	movs	r1, #32
 8000ea6:	4820      	ldr	r0, [pc, #128]	; (8000f28 <Read_HCSR04+0xe0>)
 8000ea8:	f002 f9b2 	bl	8003210 <HAL_GPIO_ReadPin>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b01      	cmp	r3, #1
 8000eb0:	d0f8      	beq.n	8000ea4 <Read_HCSR04+0x5c>
    endTime = __HAL_TIM_GET_COUNTER(&htim4); // Bitiş zamanını al
 8000eb2:	4b1e      	ldr	r3, [pc, #120]	; (8000f2c <Read_HCSR04+0xe4>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eb8:	607b      	str	r3, [r7, #4]

    // TIM4 zamanlayıcıyı durdur


    // Süreyi mikrosaniyeye dönüştürme ve mesafeyi hesaplama
    duration = endTime - startTime;
 8000eba:	687a      	ldr	r2, [r7, #4]
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	1ad3      	subs	r3, r2, r3
 8000ec0:	60fb      	str	r3, [r7, #12]
    water_value = 35 - ((duration * 0.0343) / 2);
 8000ec2:	68f8      	ldr	r0, [r7, #12]
 8000ec4:	f7ff fb3e 	bl	8000544 <__aeabi_ui2d>
 8000ec8:	a315      	add	r3, pc, #84	; (adr r3, 8000f20 <Read_HCSR04+0xd8>)
 8000eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ece:	f7ff fbb3 	bl	8000638 <__aeabi_dmul>
 8000ed2:	4602      	mov	r2, r0
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	4610      	mov	r0, r2
 8000ed8:	4619      	mov	r1, r3
 8000eda:	f04f 0200 	mov.w	r2, #0
 8000ede:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ee2:	f7ff fcd3 	bl	800088c <__aeabi_ddiv>
 8000ee6:	4602      	mov	r2, r0
 8000ee8:	460b      	mov	r3, r1
 8000eea:	f04f 0000 	mov.w	r0, #0
 8000eee:	4910      	ldr	r1, [pc, #64]	; (8000f30 <Read_HCSR04+0xe8>)
 8000ef0:	f7ff f9ea 	bl	80002c8 <__aeabi_dsub>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	460b      	mov	r3, r1
 8000ef8:	4610      	mov	r0, r2
 8000efa:	4619      	mov	r1, r3
 8000efc:	f7ff fdae 	bl	8000a5c <__aeabi_d2uiz>
 8000f00:	4603      	mov	r3, r0
 8000f02:	b29a      	uxth	r2, r3
 8000f04:	4b0b      	ldr	r3, [pc, #44]	; (8000f34 <Read_HCSR04+0xec>)
 8000f06:	801a      	strh	r2, [r3, #0]

	if(water_value >= 20)
 8000f08:	4b0a      	ldr	r3, [pc, #40]	; (8000f34 <Read_HCSR04+0xec>)
 8000f0a:	881b      	ldrh	r3, [r3, #0]
 8000f0c:	2b13      	cmp	r3, #19
 8000f0e:	d901      	bls.n	8000f14 <Read_HCSR04+0xcc>
	{
		return 1;
 8000f10:	2301      	movs	r3, #1
 8000f12:	e000      	b.n	8000f16 <Read_HCSR04+0xce>
	}
	else
	{
		return 0;
 8000f14:	2300      	movs	r3, #0
	}

}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3710      	adds	r7, #16
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	04816f00 	.word	0x04816f00
 8000f24:	3fa18fc5 	.word	0x3fa18fc5
 8000f28:	40020400 	.word	0x40020400
 8000f2c:	20000198 	.word	0x20000198
 8000f30:	40418000 	.word	0x40418000
 8000f34:	2000022a 	.word	0x2000022a

08000f38 <Read_Live>:

uint16_t Read_Live(uint16_t water_value)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	80fb      	strh	r3, [r7, #6]
    uint32_t duration = 0;
 8000f42:	2300      	movs	r3, #0
 8000f44:	617b      	str	r3, [r7, #20]

    // TRIG pini için pulse gönderme
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8000f46:	2200      	movs	r2, #0
 8000f48:	2140      	movs	r1, #64	; 0x40
 8000f4a:	4835      	ldr	r0, [pc, #212]	; (8001020 <Read_Live+0xe8>)
 8000f4c:	f002 f978 	bl	8003240 <HAL_GPIO_WritePin>
    delay_us(2);
 8000f50:	2002      	movs	r0, #2
 8000f52:	f7ff ff21 	bl	8000d98 <delay_us>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8000f56:	2201      	movs	r2, #1
 8000f58:	2140      	movs	r1, #64	; 0x40
 8000f5a:	4831      	ldr	r0, [pc, #196]	; (8001020 <Read_Live+0xe8>)
 8000f5c:	f002 f970 	bl	8003240 <HAL_GPIO_WritePin>
    delay_us(10);
 8000f60:	200a      	movs	r0, #10
 8000f62:	f7ff ff19 	bl	8000d98 <delay_us>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8000f66:	2200      	movs	r2, #0
 8000f68:	2140      	movs	r1, #64	; 0x40
 8000f6a:	482d      	ldr	r0, [pc, #180]	; (8001020 <Read_Live+0xe8>)
 8000f6c:	f002 f968 	bl	8003240 <HAL_GPIO_WritePin>

    // ECHO pininin yüksek olmasını bekleyerek süreyi ölçme
    uint32_t startTime = 0;
 8000f70:	2300      	movs	r3, #0
 8000f72:	613b      	str	r3, [r7, #16]
    uint32_t endTime = 0;
 8000f74:	2300      	movs	r3, #0
 8000f76:	60fb      	str	r3, [r7, #12]

    // TIM4 zamanlayıcıyı başlat
    HAL_TIM_Base_Start(&htim4); // Burada htim4 sizin TIM4 yapılandırmanızı ifade etmelidir.
 8000f78:	482a      	ldr	r0, [pc, #168]	; (8001024 <Read_Live+0xec>)
 8000f7a:	f003 f803 	bl	8003f84 <HAL_TIM_Base_Start>

    // ECHO pininin yüksek olmasını bekleyerek süreyi ölçme
    while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5) == GPIO_PIN_RESET);
 8000f7e:	bf00      	nop
 8000f80:	2120      	movs	r1, #32
 8000f82:	4827      	ldr	r0, [pc, #156]	; (8001020 <Read_Live+0xe8>)
 8000f84:	f002 f944 	bl	8003210 <HAL_GPIO_ReadPin>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d0f8      	beq.n	8000f80 <Read_Live+0x48>
    startTime = __HAL_TIM_GET_COUNTER(&htim4); // Başlangıç zamanını al
 8000f8e:	4b25      	ldr	r3, [pc, #148]	; (8001024 <Read_Live+0xec>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f94:	613b      	str	r3, [r7, #16]

    while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5) == GPIO_PIN_SET);
 8000f96:	bf00      	nop
 8000f98:	2120      	movs	r1, #32
 8000f9a:	4821      	ldr	r0, [pc, #132]	; (8001020 <Read_Live+0xe8>)
 8000f9c:	f002 f938 	bl	8003210 <HAL_GPIO_ReadPin>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d0f8      	beq.n	8000f98 <Read_Live+0x60>
    endTime = __HAL_TIM_GET_COUNTER(&htim4); // Bitiş zamanını al
 8000fa6:	4b1f      	ldr	r3, [pc, #124]	; (8001024 <Read_Live+0xec>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fac:	60fb      	str	r3, [r7, #12]

    // TIM4 zamanlayıcıyı durdur


    // Süreyi mikrosaniyeye dönüştürme ve mesafeyi hesaplama
    duration = endTime - startTime;
 8000fae:	68fa      	ldr	r2, [r7, #12]
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	1ad3      	subs	r3, r2, r3
 8000fb4:	617b      	str	r3, [r7, #20]
    water_value2 = 35 - ((duration * 0.0343) / 2);
 8000fb6:	6978      	ldr	r0, [r7, #20]
 8000fb8:	f7ff fac4 	bl	8000544 <__aeabi_ui2d>
 8000fbc:	a316      	add	r3, pc, #88	; (adr r3, 8001018 <Read_Live+0xe0>)
 8000fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc2:	f7ff fb39 	bl	8000638 <__aeabi_dmul>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	460b      	mov	r3, r1
 8000fca:	4610      	mov	r0, r2
 8000fcc:	4619      	mov	r1, r3
 8000fce:	f04f 0200 	mov.w	r2, #0
 8000fd2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fd6:	f7ff fc59 	bl	800088c <__aeabi_ddiv>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	460b      	mov	r3, r1
 8000fde:	f04f 0000 	mov.w	r0, #0
 8000fe2:	4911      	ldr	r1, [pc, #68]	; (8001028 <Read_Live+0xf0>)
 8000fe4:	f7ff f970 	bl	80002c8 <__aeabi_dsub>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	460b      	mov	r3, r1
 8000fec:	4610      	mov	r0, r2
 8000fee:	4619      	mov	r1, r3
 8000ff0:	f7ff fd34 	bl	8000a5c <__aeabi_d2uiz>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	b29a      	uxth	r2, r3
 8000ff8:	4b0c      	ldr	r3, [pc, #48]	; (800102c <Read_Live+0xf4>)
 8000ffa:	801a      	strh	r2, [r3, #0]

	if(water_value2 - water_value > 5)
 8000ffc:	4b0b      	ldr	r3, [pc, #44]	; (800102c <Read_Live+0xf4>)
 8000ffe:	881b      	ldrh	r3, [r3, #0]
 8001000:	461a      	mov	r2, r3
 8001002:	88fb      	ldrh	r3, [r7, #6]
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	2b05      	cmp	r3, #5
 8001008:	dd01      	ble.n	800100e <Read_Live+0xd6>
	{
		return 1;
 800100a:	2301      	movs	r3, #1
 800100c:	e000      	b.n	8001010 <Read_Live+0xd8>
	}
	else
	{
		return 0;
 800100e:	2300      	movs	r3, #0
	}
}
 8001010:	4618      	mov	r0, r3
 8001012:	3718      	adds	r7, #24
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	04816f00 	.word	0x04816f00
 800101c:	3fa18fc5 	.word	0x3fa18fc5
 8001020:	40020800 	.word	0x40020800
 8001024:	20000198 	.word	0x20000198
 8001028:	40418000 	.word	0x40418000
 800102c:	2000022e 	.word	0x2000022e

08001030 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001036:	f000 ff29 	bl	8001e8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800103a:	f000 f8ef 	bl	800121c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800103e:	f000 fb39 	bl	80016b4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001042:	f000 fb0d 	bl	8001660 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001046:	f000 fa6f 	bl	8001528 <MX_TIM3_Init>
  MX_ADC1_Init();
 800104a:	f000 f959 	bl	8001300 <MX_ADC1_Init>
  MX_TIM2_Init();
 800104e:	f000 f9fb 	bl	8001448 <MX_TIM2_Init>
  MX_ADC2_Init();
 8001052:	f000 f9a7 	bl	80013a4 <MX_ADC2_Init>
  MX_TIM4_Init();
 8001056:	f000 fab5 	bl	80015c4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim4);
 800105a:	485f      	ldr	r0, [pc, #380]	; (80011d8 <main+0x1a8>)
 800105c:	f002 ff92 	bl	8003f84 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 8001060:	485e      	ldr	r0, [pc, #376]	; (80011dc <main+0x1ac>)
 8001062:	f002 fff7 	bl	8004054 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_IT(&hadc1);
 8001066:	485e      	ldr	r0, [pc, #376]	; (80011e0 <main+0x1b0>)
 8001068:	f001 f948 	bl	80022fc <HAL_ADC_Start_IT>
  HAL_ADC_Start_IT(&hadc2);
 800106c:	485d      	ldr	r0, [pc, #372]	; (80011e4 <main+0x1b4>)
 800106e:	f001 f945 	bl	80022fc <HAL_ADC_Start_IT>

  //HAL_ADC_Start_IT(&hadc3);
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001072:	2100      	movs	r1, #0
 8001074:	485c      	ldr	r0, [pc, #368]	; (80011e8 <main+0x1b8>)
 8001076:	f003 f8ad 	bl	80041d4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800107a:	2104      	movs	r1, #4
 800107c:	485a      	ldr	r0, [pc, #360]	; (80011e8 <main+0x1b8>)
 800107e:	f003 f8a9 	bl	80041d4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001082:	2108      	movs	r1, #8
 8001084:	4858      	ldr	r0, [pc, #352]	; (80011e8 <main+0x1b8>)
 8001086:	f003 f8a5 	bl	80041d4 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart2, rxBuffer, 50);
 800108a:	2232      	movs	r2, #50	; 0x32
 800108c:	4957      	ldr	r1, [pc, #348]	; (80011ec <main+0x1bc>)
 800108e:	4858      	ldr	r0, [pc, #352]	; (80011f0 <main+0x1c0>)
 8001090:	f004 f89b 	bl	80051ca <HAL_UART_Receive_IT>

    /* USER CODE BEGIN 3 */



	  if(light_state == 1)
 8001094:	4b57      	ldr	r3, [pc, #348]	; (80011f4 <main+0x1c4>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	2b01      	cmp	r3, #1
 800109a:	d10a      	bne.n	80010b2 <main+0x82>
	  {

		  	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 800109c:	2201      	movs	r2, #1
 800109e:	2140      	movs	r1, #64	; 0x40
 80010a0:	4855      	ldr	r0, [pc, #340]	; (80011f8 <main+0x1c8>)
 80010a2:	f002 f8cd 	bl	8003240 <HAL_GPIO_WritePin>
			  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, Light_Intensity_Value);
 80010a6:	4b55      	ldr	r3, [pc, #340]	; (80011fc <main+0x1cc>)
 80010a8:	881a      	ldrh	r2, [r3, #0]
 80010aa:	4b4f      	ldr	r3, [pc, #316]	; (80011e8 <main+0x1b8>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	635a      	str	r2, [r3, #52]	; 0x34
 80010b0:	e7f0      	b.n	8001094 <main+0x64>


	  }

	  else if(gas_state == 1)
 80010b2:	4b53      	ldr	r3, [pc, #332]	; (8001200 <main+0x1d0>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d105      	bne.n	80010c6 <main+0x96>
	  {

		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, Fan_Speed_Value);
 80010ba:	4b52      	ldr	r3, [pc, #328]	; (8001204 <main+0x1d4>)
 80010bc:	881a      	ldrh	r2, [r3, #0]
 80010be:	4b4a      	ldr	r3, [pc, #296]	; (80011e8 <main+0x1b8>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	639a      	str	r2, [r3, #56]	; 0x38
 80010c4:	e7e6      	b.n	8001094 <main+0x64>

	  }
	  else if(live_state == 1)
 80010c6:	4b50      	ldr	r3, [pc, #320]	; (8001208 <main+0x1d8>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d131      	bne.n	8001132 <main+0x102>
	  {
		  if(Buzzer_Time_Value == 0)
 80010ce:	4b4f      	ldr	r3, [pc, #316]	; (800120c <main+0x1dc>)
 80010d0:	881b      	ldrh	r3, [r3, #0]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d106      	bne.n	80010e4 <main+0xb4>
		  {
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 80010d6:	2200      	movs	r2, #0
 80010d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010dc:	484c      	ldr	r0, [pc, #304]	; (8001210 <main+0x1e0>)
 80010de:	f002 f8af 	bl	8003240 <HAL_GPIO_WritePin>
 80010e2:	e7d7      	b.n	8001094 <main+0x64>
		  }

		  else
		  {
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 80010e4:	2201      	movs	r2, #1
 80010e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010ea:	4849      	ldr	r0, [pc, #292]	; (8001210 <main+0x1e0>)
 80010ec:	f002 f8a8 	bl	8003240 <HAL_GPIO_WritePin>
			  HAL_Delay(Buzzer_Time_Value);
 80010f0:	4b46      	ldr	r3, [pc, #280]	; (800120c <main+0x1dc>)
 80010f2:	881b      	ldrh	r3, [r3, #0]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f000 ff3b 	bl	8001f70 <HAL_Delay>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 80010fa:	2200      	movs	r2, #0
 80010fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001100:	4843      	ldr	r0, [pc, #268]	; (8001210 <main+0x1e0>)
 8001102:	f002 f89d 	bl	8003240 <HAL_GPIO_WritePin>
			  HAL_Delay(2000);
 8001106:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800110a:	f000 ff31 	bl	8001f70 <HAL_Delay>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800110e:	2201      	movs	r2, #1
 8001110:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001114:	483e      	ldr	r0, [pc, #248]	; (8001210 <main+0x1e0>)
 8001116:	f002 f893 	bl	8003240 <HAL_GPIO_WritePin>
			  HAL_Delay(Buzzer_Time_Value);
 800111a:	4b3c      	ldr	r3, [pc, #240]	; (800120c <main+0x1dc>)
 800111c:	881b      	ldrh	r3, [r3, #0]
 800111e:	4618      	mov	r0, r3
 8001120:	f000 ff26 	bl	8001f70 <HAL_Delay>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8001124:	2200      	movs	r2, #0
 8001126:	f44f 7180 	mov.w	r1, #256	; 0x100
 800112a:	4839      	ldr	r0, [pc, #228]	; (8001210 <main+0x1e0>)
 800112c:	f002 f888 	bl	8003240 <HAL_GPIO_WritePin>
 8001130:	e7b0      	b.n	8001094 <main+0x64>
		  }

	  }

	  else if(water_state == 1)
 8001132:	4b38      	ldr	r3, [pc, #224]	; (8001214 <main+0x1e4>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	2b01      	cmp	r3, #1
 8001138:	d139      	bne.n	80011ae <main+0x17e>
	  {
		  if(Servo_Speed_Value == 30)
 800113a:	4b37      	ldr	r3, [pc, #220]	; (8001218 <main+0x1e8>)
 800113c:	881b      	ldrh	r3, [r3, #0]
 800113e:	2b1e      	cmp	r3, #30
 8001140:	d104      	bne.n	800114c <main+0x11c>
		  {
			  htim2.Instance-> CCR3 = 25;
 8001142:	4b29      	ldr	r3, [pc, #164]	; (80011e8 <main+0x1b8>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	2219      	movs	r2, #25
 8001148:	63da      	str	r2, [r3, #60]	; 0x3c
 800114a:	e7a3      	b.n	8001094 <main+0x64>
		  }

		  else
		  {
			  HAL_Delay(2000);
 800114c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001150:	f000 ff0e 	bl	8001f70 <HAL_Delay>
			  for(int i = 25; i <= 125; i++)
 8001154:	2319      	movs	r3, #25
 8001156:	607b      	str	r3, [r7, #4]
 8001158:	e00b      	b.n	8001172 <main+0x142>
			  {
				  htim2.Instance-> CCR3 = i;
 800115a:	4b23      	ldr	r3, [pc, #140]	; (80011e8 <main+0x1b8>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	63da      	str	r2, [r3, #60]	; 0x3c
				  HAL_Delay(Servo_Speed_Value);
 8001162:	4b2d      	ldr	r3, [pc, #180]	; (8001218 <main+0x1e8>)
 8001164:	881b      	ldrh	r3, [r3, #0]
 8001166:	4618      	mov	r0, r3
 8001168:	f000 ff02 	bl	8001f70 <HAL_Delay>
			  for(int i = 25; i <= 125; i++)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	3301      	adds	r3, #1
 8001170:	607b      	str	r3, [r7, #4]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2b7d      	cmp	r3, #125	; 0x7d
 8001176:	ddf0      	ble.n	800115a <main+0x12a>
			  }

			  HAL_Delay(8000);
 8001178:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 800117c:	f000 fef8 	bl	8001f70 <HAL_Delay>

			  HAL_Delay(2000);
 8001180:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001184:	f000 fef4 	bl	8001f70 <HAL_Delay>
			  for(int i = 125; i >= 25; i--)
 8001188:	237d      	movs	r3, #125	; 0x7d
 800118a:	603b      	str	r3, [r7, #0]
 800118c:	e00b      	b.n	80011a6 <main+0x176>
			  {
				  htim2.Instance-> CCR3 = i;
 800118e:	4b16      	ldr	r3, [pc, #88]	; (80011e8 <main+0x1b8>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	683a      	ldr	r2, [r7, #0]
 8001194:	63da      	str	r2, [r3, #60]	; 0x3c
				  HAL_Delay(Servo_Speed_Value);
 8001196:	4b20      	ldr	r3, [pc, #128]	; (8001218 <main+0x1e8>)
 8001198:	881b      	ldrh	r3, [r3, #0]
 800119a:	4618      	mov	r0, r3
 800119c:	f000 fee8 	bl	8001f70 <HAL_Delay>
			  for(int i = 125; i >= 25; i--)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	3b01      	subs	r3, #1
 80011a4:	603b      	str	r3, [r7, #0]
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	2b18      	cmp	r3, #24
 80011aa:	dcf0      	bgt.n	800118e <main+0x15e>
 80011ac:	e772      	b.n	8001094 <main+0x64>
	  }

	  else
	  {

		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 80011ae:	4b0e      	ldr	r3, [pc, #56]	; (80011e8 <main+0x1b8>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2200      	movs	r2, #0
 80011b4:	635a      	str	r2, [r3, #52]	; 0x34
 		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 2500);
 80011b6:	4b0c      	ldr	r3, [pc, #48]	; (80011e8 <main+0x1b8>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80011be:	639a      	str	r2, [r3, #56]	; 0x38
 		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 80011c0:	2200      	movs	r2, #0
 80011c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011c6:	4812      	ldr	r0, [pc, #72]	; (8001210 <main+0x1e0>)
 80011c8:	f002 f83a 	bl	8003240 <HAL_GPIO_WritePin>
 		 htim2.Instance-> CCR3 = 25;
 80011cc:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <main+0x1b8>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2219      	movs	r2, #25
 80011d2:	63da      	str	r2, [r3, #60]	; 0x3c
	  if(light_state == 1)
 80011d4:	e75e      	b.n	8001094 <main+0x64>
 80011d6:	bf00      	nop
 80011d8:	20000198 	.word	0x20000198
 80011dc:	20000150 	.word	0x20000150
 80011e0:	20000078 	.word	0x20000078
 80011e4:	200000c0 	.word	0x200000c0
 80011e8:	20000108 	.word	0x20000108
 80011ec:	20000264 	.word	0x20000264
 80011f0:	200001e0 	.word	0x200001e0
 80011f4:	200002a0 	.word	0x200002a0
 80011f8:	40020000 	.word	0x40020000
 80011fc:	2000029e 	.word	0x2000029e
 8001200:	200002a2 	.word	0x200002a2
 8001204:	2000029c 	.word	0x2000029c
 8001208:	200002a3 	.word	0x200002a3
 800120c:	20000298 	.word	0x20000298
 8001210:	40020800 	.word	0x40020800
 8001214:	200002a1 	.word	0x200002a1
 8001218:	2000029a 	.word	0x2000029a

0800121c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b094      	sub	sp, #80	; 0x50
 8001220:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001222:	f107 031c 	add.w	r3, r7, #28
 8001226:	2234      	movs	r2, #52	; 0x34
 8001228:	2100      	movs	r1, #0
 800122a:	4618      	mov	r0, r3
 800122c:	f004 ffa0 	bl	8006170 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001230:	f107 0308 	add.w	r3, r7, #8
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]
 800123c:	60da      	str	r2, [r3, #12]
 800123e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001240:	2300      	movs	r3, #0
 8001242:	607b      	str	r3, [r7, #4]
 8001244:	4b2c      	ldr	r3, [pc, #176]	; (80012f8 <SystemClock_Config+0xdc>)
 8001246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001248:	4a2b      	ldr	r2, [pc, #172]	; (80012f8 <SystemClock_Config+0xdc>)
 800124a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800124e:	6413      	str	r3, [r2, #64]	; 0x40
 8001250:	4b29      	ldr	r3, [pc, #164]	; (80012f8 <SystemClock_Config+0xdc>)
 8001252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001254:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001258:	607b      	str	r3, [r7, #4]
 800125a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800125c:	2300      	movs	r3, #0
 800125e:	603b      	str	r3, [r7, #0]
 8001260:	4b26      	ldr	r3, [pc, #152]	; (80012fc <SystemClock_Config+0xe0>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a25      	ldr	r2, [pc, #148]	; (80012fc <SystemClock_Config+0xe0>)
 8001266:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800126a:	6013      	str	r3, [r2, #0]
 800126c:	4b23      	ldr	r3, [pc, #140]	; (80012fc <SystemClock_Config+0xe0>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001274:	603b      	str	r3, [r7, #0]
 8001276:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001278:	2301      	movs	r3, #1
 800127a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800127c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001280:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001282:	2302      	movs	r3, #2
 8001284:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001286:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800128a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800128c:	2304      	movs	r3, #4
 800128e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001290:	23b4      	movs	r3, #180	; 0xb4
 8001292:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001294:	2302      	movs	r3, #2
 8001296:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001298:	2302      	movs	r3, #2
 800129a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800129c:	2302      	movs	r3, #2
 800129e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012a0:	f107 031c 	add.w	r3, r7, #28
 80012a4:	4618      	mov	r0, r3
 80012a6:	f002 fb7f 	bl	80039a8 <HAL_RCC_OscConfig>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80012b0:	f000 faa2 	bl	80017f8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80012b4:	f001 ffde 	bl	8003274 <HAL_PWREx_EnableOverDrive>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80012be:	f000 fa9b 	bl	80017f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012c2:	230f      	movs	r3, #15
 80012c4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012c6:	2302      	movs	r3, #2
 80012c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012ca:	2300      	movs	r3, #0
 80012cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 80012ce:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80012d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012d8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012da:	f107 0308 	add.w	r3, r7, #8
 80012de:	2105      	movs	r1, #5
 80012e0:	4618      	mov	r0, r3
 80012e2:	f002 f817 	bl	8003314 <HAL_RCC_ClockConfig>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80012ec:	f000 fa84 	bl	80017f8 <Error_Handler>
  }
}
 80012f0:	bf00      	nop
 80012f2:	3750      	adds	r7, #80	; 0x50
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40023800 	.word	0x40023800
 80012fc:	40007000 	.word	0x40007000

08001300 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001306:	463b      	mov	r3, r7
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001312:	4b21      	ldr	r3, [pc, #132]	; (8001398 <MX_ADC1_Init+0x98>)
 8001314:	4a21      	ldr	r2, [pc, #132]	; (800139c <MX_ADC1_Init+0x9c>)
 8001316:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001318:	4b1f      	ldr	r3, [pc, #124]	; (8001398 <MX_ADC1_Init+0x98>)
 800131a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800131e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001320:	4b1d      	ldr	r3, [pc, #116]	; (8001398 <MX_ADC1_Init+0x98>)
 8001322:	2200      	movs	r2, #0
 8001324:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001326:	4b1c      	ldr	r3, [pc, #112]	; (8001398 <MX_ADC1_Init+0x98>)
 8001328:	2200      	movs	r2, #0
 800132a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800132c:	4b1a      	ldr	r3, [pc, #104]	; (8001398 <MX_ADC1_Init+0x98>)
 800132e:	2200      	movs	r2, #0
 8001330:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001332:	4b19      	ldr	r3, [pc, #100]	; (8001398 <MX_ADC1_Init+0x98>)
 8001334:	2200      	movs	r2, #0
 8001336:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800133a:	4b17      	ldr	r3, [pc, #92]	; (8001398 <MX_ADC1_Init+0x98>)
 800133c:	2200      	movs	r2, #0
 800133e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001340:	4b15      	ldr	r3, [pc, #84]	; (8001398 <MX_ADC1_Init+0x98>)
 8001342:	4a17      	ldr	r2, [pc, #92]	; (80013a0 <MX_ADC1_Init+0xa0>)
 8001344:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001346:	4b14      	ldr	r3, [pc, #80]	; (8001398 <MX_ADC1_Init+0x98>)
 8001348:	2200      	movs	r2, #0
 800134a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800134c:	4b12      	ldr	r3, [pc, #72]	; (8001398 <MX_ADC1_Init+0x98>)
 800134e:	2201      	movs	r2, #1
 8001350:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001352:	4b11      	ldr	r3, [pc, #68]	; (8001398 <MX_ADC1_Init+0x98>)
 8001354:	2200      	movs	r2, #0
 8001356:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800135a:	4b0f      	ldr	r3, [pc, #60]	; (8001398 <MX_ADC1_Init+0x98>)
 800135c:	2201      	movs	r2, #1
 800135e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001360:	480d      	ldr	r0, [pc, #52]	; (8001398 <MX_ADC1_Init+0x98>)
 8001362:	f000 fe29 	bl	8001fb8 <HAL_ADC_Init>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800136c:	f000 fa44 	bl	80017f8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001370:	2300      	movs	r3, #0
 8001372:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001374:	2301      	movs	r3, #1
 8001376:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001378:	2301      	movs	r3, #1
 800137a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800137c:	463b      	mov	r3, r7
 800137e:	4619      	mov	r1, r3
 8001380:	4805      	ldr	r0, [pc, #20]	; (8001398 <MX_ADC1_Init+0x98>)
 8001382:	f001 f9d5 	bl	8002730 <HAL_ADC_ConfigChannel>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800138c:	f000 fa34 	bl	80017f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001390:	bf00      	nop
 8001392:	3710      	adds	r7, #16
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	20000078 	.word	0x20000078
 800139c:	40012000 	.word	0x40012000
 80013a0:	0f000001 	.word	0x0f000001

080013a4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013aa:	463b      	mov	r3, r7
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	609a      	str	r2, [r3, #8]
 80013b4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80013b6:	4b21      	ldr	r3, [pc, #132]	; (800143c <MX_ADC2_Init+0x98>)
 80013b8:	4a21      	ldr	r2, [pc, #132]	; (8001440 <MX_ADC2_Init+0x9c>)
 80013ba:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013bc:	4b1f      	ldr	r3, [pc, #124]	; (800143c <MX_ADC2_Init+0x98>)
 80013be:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80013c2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80013c4:	4b1d      	ldr	r3, [pc, #116]	; (800143c <MX_ADC2_Init+0x98>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80013ca:	4b1c      	ldr	r3, [pc, #112]	; (800143c <MX_ADC2_Init+0x98>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80013d0:	4b1a      	ldr	r3, [pc, #104]	; (800143c <MX_ADC2_Init+0x98>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80013d6:	4b19      	ldr	r3, [pc, #100]	; (800143c <MX_ADC2_Init+0x98>)
 80013d8:	2200      	movs	r2, #0
 80013da:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013de:	4b17      	ldr	r3, [pc, #92]	; (800143c <MX_ADC2_Init+0x98>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013e4:	4b15      	ldr	r3, [pc, #84]	; (800143c <MX_ADC2_Init+0x98>)
 80013e6:	4a17      	ldr	r2, [pc, #92]	; (8001444 <MX_ADC2_Init+0xa0>)
 80013e8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013ea:	4b14      	ldr	r3, [pc, #80]	; (800143c <MX_ADC2_Init+0x98>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80013f0:	4b12      	ldr	r3, [pc, #72]	; (800143c <MX_ADC2_Init+0x98>)
 80013f2:	2201      	movs	r2, #1
 80013f4:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80013f6:	4b11      	ldr	r3, [pc, #68]	; (800143c <MX_ADC2_Init+0x98>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013fe:	4b0f      	ldr	r3, [pc, #60]	; (800143c <MX_ADC2_Init+0x98>)
 8001400:	2201      	movs	r2, #1
 8001402:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001404:	480d      	ldr	r0, [pc, #52]	; (800143c <MX_ADC2_Init+0x98>)
 8001406:	f000 fdd7 	bl	8001fb8 <HAL_ADC_Init>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001410:	f000 f9f2 	bl	80017f8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001414:	2301      	movs	r3, #1
 8001416:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001418:	2301      	movs	r3, #1
 800141a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800141c:	2300      	movs	r3, #0
 800141e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001420:	463b      	mov	r3, r7
 8001422:	4619      	mov	r1, r3
 8001424:	4805      	ldr	r0, [pc, #20]	; (800143c <MX_ADC2_Init+0x98>)
 8001426:	f001 f983 	bl	8002730 <HAL_ADC_ConfigChannel>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001430:	f000 f9e2 	bl	80017f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001434:	bf00      	nop
 8001436:	3710      	adds	r7, #16
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	200000c0 	.word	0x200000c0
 8001440:	40012100 	.word	0x40012100
 8001444:	0f000001 	.word	0x0f000001

08001448 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b08a      	sub	sp, #40	; 0x28
 800144c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800144e:	f107 0320 	add.w	r3, r7, #32
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001458:	1d3b      	adds	r3, r7, #4
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	605a      	str	r2, [r3, #4]
 8001460:	609a      	str	r2, [r3, #8]
 8001462:	60da      	str	r2, [r3, #12]
 8001464:	611a      	str	r2, [r3, #16]
 8001466:	615a      	str	r2, [r3, #20]
 8001468:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800146a:	4b2e      	ldr	r3, [pc, #184]	; (8001524 <MX_TIM2_Init+0xdc>)
 800146c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001470:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 899;
 8001472:	4b2c      	ldr	r3, [pc, #176]	; (8001524 <MX_TIM2_Init+0xdc>)
 8001474:	f240 3283 	movw	r2, #899	; 0x383
 8001478:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800147a:	4b2a      	ldr	r3, [pc, #168]	; (8001524 <MX_TIM2_Init+0xdc>)
 800147c:	2200      	movs	r2, #0
 800147e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001480:	4b28      	ldr	r3, [pc, #160]	; (8001524 <MX_TIM2_Init+0xdc>)
 8001482:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001486:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001488:	4b26      	ldr	r3, [pc, #152]	; (8001524 <MX_TIM2_Init+0xdc>)
 800148a:	2200      	movs	r2, #0
 800148c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800148e:	4b25      	ldr	r3, [pc, #148]	; (8001524 <MX_TIM2_Init+0xdc>)
 8001490:	2200      	movs	r2, #0
 8001492:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001494:	4823      	ldr	r0, [pc, #140]	; (8001524 <MX_TIM2_Init+0xdc>)
 8001496:	f002 fe4d 	bl	8004134 <HAL_TIM_PWM_Init>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80014a0:	f000 f9aa 	bl	80017f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014a4:	2300      	movs	r3, #0
 80014a6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014a8:	2300      	movs	r3, #0
 80014aa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014ac:	f107 0320 	add.w	r3, r7, #32
 80014b0:	4619      	mov	r1, r3
 80014b2:	481c      	ldr	r0, [pc, #112]	; (8001524 <MX_TIM2_Init+0xdc>)
 80014b4:	f003 fd1e 	bl	8004ef4 <HAL_TIMEx_MasterConfigSynchronization>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80014be:	f000 f99b 	bl	80017f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014c2:	2360      	movs	r3, #96	; 0x60
 80014c4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80014c6:	2300      	movs	r3, #0
 80014c8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014ca:	2300      	movs	r3, #0
 80014cc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014ce:	2300      	movs	r3, #0
 80014d0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014d2:	1d3b      	adds	r3, r7, #4
 80014d4:	2200      	movs	r2, #0
 80014d6:	4619      	mov	r1, r3
 80014d8:	4812      	ldr	r0, [pc, #72]	; (8001524 <MX_TIM2_Init+0xdc>)
 80014da:	f003 f833 	bl	8004544 <HAL_TIM_PWM_ConfigChannel>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80014e4:	f000 f988 	bl	80017f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014e8:	1d3b      	adds	r3, r7, #4
 80014ea:	2204      	movs	r2, #4
 80014ec:	4619      	mov	r1, r3
 80014ee:	480d      	ldr	r0, [pc, #52]	; (8001524 <MX_TIM2_Init+0xdc>)
 80014f0:	f003 f828 	bl	8004544 <HAL_TIM_PWM_ConfigChannel>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80014fa:	f000 f97d 	bl	80017f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014fe:	1d3b      	adds	r3, r7, #4
 8001500:	2208      	movs	r2, #8
 8001502:	4619      	mov	r1, r3
 8001504:	4807      	ldr	r0, [pc, #28]	; (8001524 <MX_TIM2_Init+0xdc>)
 8001506:	f003 f81d 	bl	8004544 <HAL_TIM_PWM_ConfigChannel>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 8001510:	f000 f972 	bl	80017f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001514:	4803      	ldr	r0, [pc, #12]	; (8001524 <MX_TIM2_Init+0xdc>)
 8001516:	f000 fa7f 	bl	8001a18 <HAL_TIM_MspPostInit>

}
 800151a:	bf00      	nop
 800151c:	3728      	adds	r7, #40	; 0x28
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	20000108 	.word	0x20000108

08001528 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800152e:	f107 0308 	add.w	r3, r7, #8
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	605a      	str	r2, [r3, #4]
 8001538:	609a      	str	r2, [r3, #8]
 800153a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800153c:	463b      	mov	r3, r7
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001544:	4b1d      	ldr	r3, [pc, #116]	; (80015bc <MX_TIM3_Init+0x94>)
 8001546:	4a1e      	ldr	r2, [pc, #120]	; (80015c0 <MX_TIM3_Init+0x98>)
 8001548:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8999;
 800154a:	4b1c      	ldr	r3, [pc, #112]	; (80015bc <MX_TIM3_Init+0x94>)
 800154c:	f242 3227 	movw	r2, #8999	; 0x2327
 8001550:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001552:	4b1a      	ldr	r3, [pc, #104]	; (80015bc <MX_TIM3_Init+0x94>)
 8001554:	2200      	movs	r2, #0
 8001556:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4999;
 8001558:	4b18      	ldr	r3, [pc, #96]	; (80015bc <MX_TIM3_Init+0x94>)
 800155a:	f241 3287 	movw	r2, #4999	; 0x1387
 800155e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001560:	4b16      	ldr	r3, [pc, #88]	; (80015bc <MX_TIM3_Init+0x94>)
 8001562:	2200      	movs	r2, #0
 8001564:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001566:	4b15      	ldr	r3, [pc, #84]	; (80015bc <MX_TIM3_Init+0x94>)
 8001568:	2280      	movs	r2, #128	; 0x80
 800156a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800156c:	4813      	ldr	r0, [pc, #76]	; (80015bc <MX_TIM3_Init+0x94>)
 800156e:	f002 fcb9 	bl	8003ee4 <HAL_TIM_Base_Init>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001578:	f000 f93e 	bl	80017f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800157c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001580:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001582:	f107 0308 	add.w	r3, r7, #8
 8001586:	4619      	mov	r1, r3
 8001588:	480c      	ldr	r0, [pc, #48]	; (80015bc <MX_TIM3_Init+0x94>)
 800158a:	f003 f89d 	bl	80046c8 <HAL_TIM_ConfigClockSource>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001594:	f000 f930 	bl	80017f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001598:	2300      	movs	r3, #0
 800159a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800159c:	2300      	movs	r3, #0
 800159e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015a0:	463b      	mov	r3, r7
 80015a2:	4619      	mov	r1, r3
 80015a4:	4805      	ldr	r0, [pc, #20]	; (80015bc <MX_TIM3_Init+0x94>)
 80015a6:	f003 fca5 	bl	8004ef4 <HAL_TIMEx_MasterConfigSynchronization>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80015b0:	f000 f922 	bl	80017f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80015b4:	bf00      	nop
 80015b6:	3718      	adds	r7, #24
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	20000150 	.word	0x20000150
 80015c0:	40000400 	.word	0x40000400

080015c4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b086      	sub	sp, #24
 80015c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015ca:	f107 0308 	add.w	r3, r7, #8
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	605a      	str	r2, [r3, #4]
 80015d4:	609a      	str	r2, [r3, #8]
 80015d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015d8:	463b      	mov	r3, r7
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80015e0:	4b1d      	ldr	r3, [pc, #116]	; (8001658 <MX_TIM4_Init+0x94>)
 80015e2:	4a1e      	ldr	r2, [pc, #120]	; (800165c <MX_TIM4_Init+0x98>)
 80015e4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 45-1;
 80015e6:	4b1c      	ldr	r3, [pc, #112]	; (8001658 <MX_TIM4_Init+0x94>)
 80015e8:	222c      	movs	r2, #44	; 0x2c
 80015ea:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ec:	4b1a      	ldr	r3, [pc, #104]	; (8001658 <MX_TIM4_Init+0x94>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff-1;
 80015f2:	4b19      	ldr	r3, [pc, #100]	; (8001658 <MX_TIM4_Init+0x94>)
 80015f4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80015f8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015fa:	4b17      	ldr	r3, [pc, #92]	; (8001658 <MX_TIM4_Init+0x94>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001600:	4b15      	ldr	r3, [pc, #84]	; (8001658 <MX_TIM4_Init+0x94>)
 8001602:	2280      	movs	r2, #128	; 0x80
 8001604:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001606:	4814      	ldr	r0, [pc, #80]	; (8001658 <MX_TIM4_Init+0x94>)
 8001608:	f002 fc6c 	bl	8003ee4 <HAL_TIM_Base_Init>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001612:	f000 f8f1 	bl	80017f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001616:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800161a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800161c:	f107 0308 	add.w	r3, r7, #8
 8001620:	4619      	mov	r1, r3
 8001622:	480d      	ldr	r0, [pc, #52]	; (8001658 <MX_TIM4_Init+0x94>)
 8001624:	f003 f850 	bl	80046c8 <HAL_TIM_ConfigClockSource>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800162e:	f000 f8e3 	bl	80017f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001632:	2300      	movs	r3, #0
 8001634:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001636:	2300      	movs	r3, #0
 8001638:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800163a:	463b      	mov	r3, r7
 800163c:	4619      	mov	r1, r3
 800163e:	4806      	ldr	r0, [pc, #24]	; (8001658 <MX_TIM4_Init+0x94>)
 8001640:	f003 fc58 	bl	8004ef4 <HAL_TIMEx_MasterConfigSynchronization>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800164a:	f000 f8d5 	bl	80017f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800164e:	bf00      	nop
 8001650:	3718      	adds	r7, #24
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20000198 	.word	0x20000198
 800165c:	40000800 	.word	0x40000800

08001660 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001664:	4b11      	ldr	r3, [pc, #68]	; (80016ac <MX_USART2_UART_Init+0x4c>)
 8001666:	4a12      	ldr	r2, [pc, #72]	; (80016b0 <MX_USART2_UART_Init+0x50>)
 8001668:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800166a:	4b10      	ldr	r3, [pc, #64]	; (80016ac <MX_USART2_UART_Init+0x4c>)
 800166c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001670:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001672:	4b0e      	ldr	r3, [pc, #56]	; (80016ac <MX_USART2_UART_Init+0x4c>)
 8001674:	2200      	movs	r2, #0
 8001676:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001678:	4b0c      	ldr	r3, [pc, #48]	; (80016ac <MX_USART2_UART_Init+0x4c>)
 800167a:	2200      	movs	r2, #0
 800167c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800167e:	4b0b      	ldr	r3, [pc, #44]	; (80016ac <MX_USART2_UART_Init+0x4c>)
 8001680:	2200      	movs	r2, #0
 8001682:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001684:	4b09      	ldr	r3, [pc, #36]	; (80016ac <MX_USART2_UART_Init+0x4c>)
 8001686:	220c      	movs	r2, #12
 8001688:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800168a:	4b08      	ldr	r3, [pc, #32]	; (80016ac <MX_USART2_UART_Init+0x4c>)
 800168c:	2200      	movs	r2, #0
 800168e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001690:	4b06      	ldr	r3, [pc, #24]	; (80016ac <MX_USART2_UART_Init+0x4c>)
 8001692:	2200      	movs	r2, #0
 8001694:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001696:	4805      	ldr	r0, [pc, #20]	; (80016ac <MX_USART2_UART_Init+0x4c>)
 8001698:	f003 fcbc 	bl	8005014 <HAL_UART_Init>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80016a2:	f000 f8a9 	bl	80017f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016a6:	bf00      	nop
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	200001e0 	.word	0x200001e0
 80016b0:	40004400 	.word	0x40004400

080016b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b08a      	sub	sp, #40	; 0x28
 80016b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ba:	f107 0314 	add.w	r3, r7, #20
 80016be:	2200      	movs	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	605a      	str	r2, [r3, #4]
 80016c4:	609a      	str	r2, [r3, #8]
 80016c6:	60da      	str	r2, [r3, #12]
 80016c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	613b      	str	r3, [r7, #16]
 80016ce:	4b46      	ldr	r3, [pc, #280]	; (80017e8 <MX_GPIO_Init+0x134>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	4a45      	ldr	r2, [pc, #276]	; (80017e8 <MX_GPIO_Init+0x134>)
 80016d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016d8:	6313      	str	r3, [r2, #48]	; 0x30
 80016da:	4b43      	ldr	r3, [pc, #268]	; (80017e8 <MX_GPIO_Init+0x134>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016e2:	613b      	str	r3, [r7, #16]
 80016e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	60fb      	str	r3, [r7, #12]
 80016ea:	4b3f      	ldr	r3, [pc, #252]	; (80017e8 <MX_GPIO_Init+0x134>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	4a3e      	ldr	r2, [pc, #248]	; (80017e8 <MX_GPIO_Init+0x134>)
 80016f0:	f043 0301 	orr.w	r3, r3, #1
 80016f4:	6313      	str	r3, [r2, #48]	; 0x30
 80016f6:	4b3c      	ldr	r3, [pc, #240]	; (80017e8 <MX_GPIO_Init+0x134>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	60fb      	str	r3, [r7, #12]
 8001700:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	60bb      	str	r3, [r7, #8]
 8001706:	4b38      	ldr	r3, [pc, #224]	; (80017e8 <MX_GPIO_Init+0x134>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	4a37      	ldr	r2, [pc, #220]	; (80017e8 <MX_GPIO_Init+0x134>)
 800170c:	f043 0304 	orr.w	r3, r3, #4
 8001710:	6313      	str	r3, [r2, #48]	; 0x30
 8001712:	4b35      	ldr	r3, [pc, #212]	; (80017e8 <MX_GPIO_Init+0x134>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	f003 0304 	and.w	r3, r3, #4
 800171a:	60bb      	str	r3, [r7, #8]
 800171c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800171e:	2300      	movs	r3, #0
 8001720:	607b      	str	r3, [r7, #4]
 8001722:	4b31      	ldr	r3, [pc, #196]	; (80017e8 <MX_GPIO_Init+0x134>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	4a30      	ldr	r2, [pc, #192]	; (80017e8 <MX_GPIO_Init+0x134>)
 8001728:	f043 0302 	orr.w	r3, r3, #2
 800172c:	6313      	str	r3, [r2, #48]	; 0x30
 800172e:	4b2e      	ldr	r3, [pc, #184]	; (80017e8 <MX_GPIO_Init+0x134>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	f003 0302 	and.w	r3, r3, #2
 8001736:	607b      	str	r3, [r7, #4]
 8001738:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800173a:	2200      	movs	r2, #0
 800173c:	2140      	movs	r1, #64	; 0x40
 800173e:	482b      	ldr	r0, [pc, #172]	; (80017ec <MX_GPIO_Init+0x138>)
 8001740:	f001 fd7e 	bl	8003240 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TRIG2_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 8001744:	2200      	movs	r2, #0
 8001746:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800174a:	4829      	ldr	r0, [pc, #164]	; (80017f0 <MX_GPIO_Init+0x13c>)
 800174c:	f001 fd78 	bl	8003240 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 8001750:	2200      	movs	r2, #0
 8001752:	2110      	movs	r1, #16
 8001754:	4827      	ldr	r0, [pc, #156]	; (80017f4 <MX_GPIO_Init+0x140>)
 8001756:	f001 fd73 	bl	8003240 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800175a:	2340      	movs	r3, #64	; 0x40
 800175c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800175e:	2301      	movs	r3, #1
 8001760:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001762:	2300      	movs	r3, #0
 8001764:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001766:	2300      	movs	r3, #0
 8001768:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800176a:	f107 0314 	add.w	r3, r7, #20
 800176e:	4619      	mov	r1, r3
 8001770:	481e      	ldr	r0, [pc, #120]	; (80017ec <MX_GPIO_Init+0x138>)
 8001772:	f001 fbb9 	bl	8002ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ECHO2_Pin */
  GPIO_InitStruct.Pin = ECHO2_Pin;
 8001776:	2320      	movs	r3, #32
 8001778:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800177a:	2300      	movs	r3, #0
 800177c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177e:	2300      	movs	r3, #0
 8001780:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ECHO2_GPIO_Port, &GPIO_InitStruct);
 8001782:	f107 0314 	add.w	r3, r7, #20
 8001786:	4619      	mov	r1, r3
 8001788:	4819      	ldr	r0, [pc, #100]	; (80017f0 <MX_GPIO_Init+0x13c>)
 800178a:	f001 fbad 	bl	8002ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TRIG2_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = TRIG2_Pin|BUZZER_Pin;
 800178e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001792:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001794:	2301      	movs	r3, #1
 8001796:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001798:	2300      	movs	r3, #0
 800179a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179c:	2300      	movs	r3, #0
 800179e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017a0:	f107 0314 	add.w	r3, r7, #20
 80017a4:	4619      	mov	r1, r3
 80017a6:	4812      	ldr	r0, [pc, #72]	; (80017f0 <MX_GPIO_Init+0x13c>)
 80017a8:	f001 fb9e 	bl	8002ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIG_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin;
 80017ac:	2310      	movs	r3, #16
 80017ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017b0:	2301      	movs	r3, #1
 80017b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b4:	2300      	movs	r3, #0
 80017b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b8:	2300      	movs	r3, #0
 80017ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 80017bc:	f107 0314 	add.w	r3, r7, #20
 80017c0:	4619      	mov	r1, r3
 80017c2:	480c      	ldr	r0, [pc, #48]	; (80017f4 <MX_GPIO_Init+0x140>)
 80017c4:	f001 fb90 	bl	8002ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ECHO_Pin */
  GPIO_InitStruct.Pin = ECHO_Pin;
 80017c8:	2320      	movs	r3, #32
 80017ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017cc:	2300      	movs	r3, #0
 80017ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d0:	2300      	movs	r3, #0
 80017d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 80017d4:	f107 0314 	add.w	r3, r7, #20
 80017d8:	4619      	mov	r1, r3
 80017da:	4806      	ldr	r0, [pc, #24]	; (80017f4 <MX_GPIO_Init+0x140>)
 80017dc:	f001 fb84 	bl	8002ee8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017e0:	bf00      	nop
 80017e2:	3728      	adds	r7, #40	; 0x28
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	40023800 	.word	0x40023800
 80017ec:	40020000 	.word	0x40020000
 80017f0:	40020800 	.word	0x40020800
 80017f4:	40020400 	.word	0x40020400

080017f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017fc:	b672      	cpsid	i
}
 80017fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001800:	e7fe      	b.n	8001800 <Error_Handler+0x8>
	...

08001804 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	607b      	str	r3, [r7, #4]
 800180e:	4b10      	ldr	r3, [pc, #64]	; (8001850 <HAL_MspInit+0x4c>)
 8001810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001812:	4a0f      	ldr	r2, [pc, #60]	; (8001850 <HAL_MspInit+0x4c>)
 8001814:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001818:	6453      	str	r3, [r2, #68]	; 0x44
 800181a:	4b0d      	ldr	r3, [pc, #52]	; (8001850 <HAL_MspInit+0x4c>)
 800181c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001822:	607b      	str	r3, [r7, #4]
 8001824:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	603b      	str	r3, [r7, #0]
 800182a:	4b09      	ldr	r3, [pc, #36]	; (8001850 <HAL_MspInit+0x4c>)
 800182c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182e:	4a08      	ldr	r2, [pc, #32]	; (8001850 <HAL_MspInit+0x4c>)
 8001830:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001834:	6413      	str	r3, [r2, #64]	; 0x40
 8001836:	4b06      	ldr	r3, [pc, #24]	; (8001850 <HAL_MspInit+0x4c>)
 8001838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800183e:	603b      	str	r3, [r7, #0]
 8001840:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001842:	2007      	movs	r0, #7
 8001844:	f001 fa7c 	bl	8002d40 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001848:	bf00      	nop
 800184a:	3708      	adds	r7, #8
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	40023800 	.word	0x40023800

08001854 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b08c      	sub	sp, #48	; 0x30
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800185c:	f107 031c 	add.w	r3, r7, #28
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	605a      	str	r2, [r3, #4]
 8001866:	609a      	str	r2, [r3, #8]
 8001868:	60da      	str	r2, [r3, #12]
 800186a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a36      	ldr	r2, [pc, #216]	; (800194c <HAL_ADC_MspInit+0xf8>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d130      	bne.n	80018d8 <HAL_ADC_MspInit+0x84>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	61bb      	str	r3, [r7, #24]
 800187a:	4b35      	ldr	r3, [pc, #212]	; (8001950 <HAL_ADC_MspInit+0xfc>)
 800187c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187e:	4a34      	ldr	r2, [pc, #208]	; (8001950 <HAL_ADC_MspInit+0xfc>)
 8001880:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001884:	6453      	str	r3, [r2, #68]	; 0x44
 8001886:	4b32      	ldr	r3, [pc, #200]	; (8001950 <HAL_ADC_MspInit+0xfc>)
 8001888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800188a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800188e:	61bb      	str	r3, [r7, #24]
 8001890:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	617b      	str	r3, [r7, #20]
 8001896:	4b2e      	ldr	r3, [pc, #184]	; (8001950 <HAL_ADC_MspInit+0xfc>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	4a2d      	ldr	r2, [pc, #180]	; (8001950 <HAL_ADC_MspInit+0xfc>)
 800189c:	f043 0301 	orr.w	r3, r3, #1
 80018a0:	6313      	str	r3, [r2, #48]	; 0x30
 80018a2:	4b2b      	ldr	r3, [pc, #172]	; (8001950 <HAL_ADC_MspInit+0xfc>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	617b      	str	r3, [r7, #20]
 80018ac:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = LDR_IN_Pin;
 80018ae:	2301      	movs	r3, #1
 80018b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018b2:	2303      	movs	r3, #3
 80018b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b6:	2300      	movs	r3, #0
 80018b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LDR_IN_GPIO_Port, &GPIO_InitStruct);
 80018ba:	f107 031c 	add.w	r3, r7, #28
 80018be:	4619      	mov	r1, r3
 80018c0:	4824      	ldr	r0, [pc, #144]	; (8001954 <HAL_ADC_MspInit+0x100>)
 80018c2:	f001 fb11 	bl	8002ee8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80018c6:	2200      	movs	r2, #0
 80018c8:	2100      	movs	r1, #0
 80018ca:	2012      	movs	r0, #18
 80018cc:	f001 fa43 	bl	8002d56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80018d0:	2012      	movs	r0, #18
 80018d2:	f001 fa5c 	bl	8002d8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80018d6:	e034      	b.n	8001942 <HAL_ADC_MspInit+0xee>
  else if(hadc->Instance==ADC2)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a1e      	ldr	r2, [pc, #120]	; (8001958 <HAL_ADC_MspInit+0x104>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d12f      	bne.n	8001942 <HAL_ADC_MspInit+0xee>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	613b      	str	r3, [r7, #16]
 80018e6:	4b1a      	ldr	r3, [pc, #104]	; (8001950 <HAL_ADC_MspInit+0xfc>)
 80018e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ea:	4a19      	ldr	r2, [pc, #100]	; (8001950 <HAL_ADC_MspInit+0xfc>)
 80018ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018f0:	6453      	str	r3, [r2, #68]	; 0x44
 80018f2:	4b17      	ldr	r3, [pc, #92]	; (8001950 <HAL_ADC_MspInit+0xfc>)
 80018f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018fa:	613b      	str	r3, [r7, #16]
 80018fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018fe:	2300      	movs	r3, #0
 8001900:	60fb      	str	r3, [r7, #12]
 8001902:	4b13      	ldr	r3, [pc, #76]	; (8001950 <HAL_ADC_MspInit+0xfc>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001906:	4a12      	ldr	r2, [pc, #72]	; (8001950 <HAL_ADC_MspInit+0xfc>)
 8001908:	f043 0301 	orr.w	r3, r3, #1
 800190c:	6313      	str	r3, [r2, #48]	; 0x30
 800190e:	4b10      	ldr	r3, [pc, #64]	; (8001950 <HAL_ADC_MspInit+0xfc>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001912:	f003 0301 	and.w	r3, r3, #1
 8001916:	60fb      	str	r3, [r7, #12]
 8001918:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MQ2_IN_Pin;
 800191a:	2302      	movs	r3, #2
 800191c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800191e:	2303      	movs	r3, #3
 8001920:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001922:	2300      	movs	r3, #0
 8001924:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MQ2_IN_GPIO_Port, &GPIO_InitStruct);
 8001926:	f107 031c 	add.w	r3, r7, #28
 800192a:	4619      	mov	r1, r3
 800192c:	4809      	ldr	r0, [pc, #36]	; (8001954 <HAL_ADC_MspInit+0x100>)
 800192e:	f001 fadb 	bl	8002ee8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001932:	2200      	movs	r2, #0
 8001934:	2100      	movs	r1, #0
 8001936:	2012      	movs	r0, #18
 8001938:	f001 fa0d 	bl	8002d56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800193c:	2012      	movs	r0, #18
 800193e:	f001 fa26 	bl	8002d8e <HAL_NVIC_EnableIRQ>
}
 8001942:	bf00      	nop
 8001944:	3730      	adds	r7, #48	; 0x30
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	40012000 	.word	0x40012000
 8001950:	40023800 	.word	0x40023800
 8001954:	40020000 	.word	0x40020000
 8001958:	40012100 	.word	0x40012100

0800195c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800195c:	b480      	push	{r7}
 800195e:	b085      	sub	sp, #20
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800196c:	d10d      	bne.n	800198a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800196e:	2300      	movs	r3, #0
 8001970:	60fb      	str	r3, [r7, #12]
 8001972:	4b09      	ldr	r3, [pc, #36]	; (8001998 <HAL_TIM_PWM_MspInit+0x3c>)
 8001974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001976:	4a08      	ldr	r2, [pc, #32]	; (8001998 <HAL_TIM_PWM_MspInit+0x3c>)
 8001978:	f043 0301 	orr.w	r3, r3, #1
 800197c:	6413      	str	r3, [r2, #64]	; 0x40
 800197e:	4b06      	ldr	r3, [pc, #24]	; (8001998 <HAL_TIM_PWM_MspInit+0x3c>)
 8001980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001982:	f003 0301 	and.w	r3, r3, #1
 8001986:	60fb      	str	r3, [r7, #12]
 8001988:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800198a:	bf00      	nop
 800198c:	3714      	adds	r7, #20
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	40023800 	.word	0x40023800

0800199c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a18      	ldr	r2, [pc, #96]	; (8001a0c <HAL_TIM_Base_MspInit+0x70>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d116      	bne.n	80019dc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019ae:	2300      	movs	r3, #0
 80019b0:	60fb      	str	r3, [r7, #12]
 80019b2:	4b17      	ldr	r3, [pc, #92]	; (8001a10 <HAL_TIM_Base_MspInit+0x74>)
 80019b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b6:	4a16      	ldr	r2, [pc, #88]	; (8001a10 <HAL_TIM_Base_MspInit+0x74>)
 80019b8:	f043 0302 	orr.w	r3, r3, #2
 80019bc:	6413      	str	r3, [r2, #64]	; 0x40
 80019be:	4b14      	ldr	r3, [pc, #80]	; (8001a10 <HAL_TIM_Base_MspInit+0x74>)
 80019c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c2:	f003 0302 	and.w	r3, r3, #2
 80019c6:	60fb      	str	r3, [r7, #12]
 80019c8:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80019ca:	2200      	movs	r2, #0
 80019cc:	2100      	movs	r1, #0
 80019ce:	201d      	movs	r0, #29
 80019d0:	f001 f9c1 	bl	8002d56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80019d4:	201d      	movs	r0, #29
 80019d6:	f001 f9da 	bl	8002d8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80019da:	e012      	b.n	8001a02 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM4)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a0c      	ldr	r2, [pc, #48]	; (8001a14 <HAL_TIM_Base_MspInit+0x78>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d10d      	bne.n	8001a02 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80019e6:	2300      	movs	r3, #0
 80019e8:	60bb      	str	r3, [r7, #8]
 80019ea:	4b09      	ldr	r3, [pc, #36]	; (8001a10 <HAL_TIM_Base_MspInit+0x74>)
 80019ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ee:	4a08      	ldr	r2, [pc, #32]	; (8001a10 <HAL_TIM_Base_MspInit+0x74>)
 80019f0:	f043 0304 	orr.w	r3, r3, #4
 80019f4:	6413      	str	r3, [r2, #64]	; 0x40
 80019f6:	4b06      	ldr	r3, [pc, #24]	; (8001a10 <HAL_TIM_Base_MspInit+0x74>)
 80019f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fa:	f003 0304 	and.w	r3, r3, #4
 80019fe:	60bb      	str	r3, [r7, #8]
 8001a00:	68bb      	ldr	r3, [r7, #8]
}
 8001a02:	bf00      	nop
 8001a04:	3710      	adds	r7, #16
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	40000400 	.word	0x40000400
 8001a10:	40023800 	.word	0x40023800
 8001a14:	40000800 	.word	0x40000800

08001a18 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b08a      	sub	sp, #40	; 0x28
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a20:	f107 0314 	add.w	r3, r7, #20
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	605a      	str	r2, [r3, #4]
 8001a2a:	609a      	str	r2, [r3, #8]
 8001a2c:	60da      	str	r2, [r3, #12]
 8001a2e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a38:	d13c      	bne.n	8001ab4 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	613b      	str	r3, [r7, #16]
 8001a3e:	4b1f      	ldr	r3, [pc, #124]	; (8001abc <HAL_TIM_MspPostInit+0xa4>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	4a1e      	ldr	r2, [pc, #120]	; (8001abc <HAL_TIM_MspPostInit+0xa4>)
 8001a44:	f043 0301 	orr.w	r3, r3, #1
 8001a48:	6313      	str	r3, [r2, #48]	; 0x30
 8001a4a:	4b1c      	ldr	r3, [pc, #112]	; (8001abc <HAL_TIM_MspPostInit+0xa4>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	613b      	str	r3, [r7, #16]
 8001a54:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	60fb      	str	r3, [r7, #12]
 8001a5a:	4b18      	ldr	r3, [pc, #96]	; (8001abc <HAL_TIM_MspPostInit+0xa4>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	4a17      	ldr	r2, [pc, #92]	; (8001abc <HAL_TIM_MspPostInit+0xa4>)
 8001a60:	f043 0302 	orr.w	r3, r3, #2
 8001a64:	6313      	str	r3, [r2, #48]	; 0x30
 8001a66:	4b15      	ldr	r3, [pc, #84]	; (8001abc <HAL_TIM_MspPostInit+0xa4>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = LED_PWM_Pin;
 8001a72:	2320      	movs	r3, #32
 8001a74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a76:	2302      	movs	r3, #2
 8001a78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a82:	2301      	movs	r3, #1
 8001a84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LED_PWM_GPIO_Port, &GPIO_InitStruct);
 8001a86:	f107 0314 	add.w	r3, r7, #20
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	480c      	ldr	r0, [pc, #48]	; (8001ac0 <HAL_TIM_MspPostInit+0xa8>)
 8001a8e:	f001 fa2b 	bl	8002ee8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|FAN_PWM_Pin;
 8001a92:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8001a96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a98:	2302      	movs	r3, #2
 8001a9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aa8:	f107 0314 	add.w	r3, r7, #20
 8001aac:	4619      	mov	r1, r3
 8001aae:	4805      	ldr	r0, [pc, #20]	; (8001ac4 <HAL_TIM_MspPostInit+0xac>)
 8001ab0:	f001 fa1a 	bl	8002ee8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001ab4:	bf00      	nop
 8001ab6:	3728      	adds	r7, #40	; 0x28
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	40023800 	.word	0x40023800
 8001ac0:	40020000 	.word	0x40020000
 8001ac4:	40020400 	.word	0x40020400

08001ac8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b08a      	sub	sp, #40	; 0x28
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad0:	f107 0314 	add.w	r3, r7, #20
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	605a      	str	r2, [r3, #4]
 8001ada:	609a      	str	r2, [r3, #8]
 8001adc:	60da      	str	r2, [r3, #12]
 8001ade:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a1d      	ldr	r2, [pc, #116]	; (8001b5c <HAL_UART_MspInit+0x94>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d133      	bne.n	8001b52 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001aea:	2300      	movs	r3, #0
 8001aec:	613b      	str	r3, [r7, #16]
 8001aee:	4b1c      	ldr	r3, [pc, #112]	; (8001b60 <HAL_UART_MspInit+0x98>)
 8001af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af2:	4a1b      	ldr	r2, [pc, #108]	; (8001b60 <HAL_UART_MspInit+0x98>)
 8001af4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001af8:	6413      	str	r3, [r2, #64]	; 0x40
 8001afa:	4b19      	ldr	r3, [pc, #100]	; (8001b60 <HAL_UART_MspInit+0x98>)
 8001afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b02:	613b      	str	r3, [r7, #16]
 8001b04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b06:	2300      	movs	r3, #0
 8001b08:	60fb      	str	r3, [r7, #12]
 8001b0a:	4b15      	ldr	r3, [pc, #84]	; (8001b60 <HAL_UART_MspInit+0x98>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	4a14      	ldr	r2, [pc, #80]	; (8001b60 <HAL_UART_MspInit+0x98>)
 8001b10:	f043 0301 	orr.w	r3, r3, #1
 8001b14:	6313      	str	r3, [r2, #48]	; 0x30
 8001b16:	4b12      	ldr	r3, [pc, #72]	; (8001b60 <HAL_UART_MspInit+0x98>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	60fb      	str	r3, [r7, #12]
 8001b20:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b22:	230c      	movs	r3, #12
 8001b24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b26:	2302      	movs	r3, #2
 8001b28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b32:	2307      	movs	r3, #7
 8001b34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b36:	f107 0314 	add.w	r3, r7, #20
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4809      	ldr	r0, [pc, #36]	; (8001b64 <HAL_UART_MspInit+0x9c>)
 8001b3e:	f001 f9d3 	bl	8002ee8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001b42:	2200      	movs	r2, #0
 8001b44:	2100      	movs	r1, #0
 8001b46:	2026      	movs	r0, #38	; 0x26
 8001b48:	f001 f905 	bl	8002d56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001b4c:	2026      	movs	r0, #38	; 0x26
 8001b4e:	f001 f91e 	bl	8002d8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b52:	bf00      	nop
 8001b54:	3728      	adds	r7, #40	; 0x28
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	40004400 	.word	0x40004400
 8001b60:	40023800 	.word	0x40023800
 8001b64:	40020000 	.word	0x40020000

08001b68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b6c:	e7fe      	b.n	8001b6c <NMI_Handler+0x4>

08001b6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b72:	e7fe      	b.n	8001b72 <HardFault_Handler+0x4>

08001b74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b78:	e7fe      	b.n	8001b78 <MemManage_Handler+0x4>

08001b7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b7e:	e7fe      	b.n	8001b7e <BusFault_Handler+0x4>

08001b80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b84:	e7fe      	b.n	8001b84 <UsageFault_Handler+0x4>

08001b86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b86:	b480      	push	{r7}
 8001b88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b8a:	bf00      	nop
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b98:	bf00      	nop
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr

08001ba2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ba6:	bf00      	nop
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bb4:	f000 f9bc 	bl	8001f30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bb8:	bf00      	nop
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001bc0:	4803      	ldr	r0, [pc, #12]	; (8001bd0 <ADC_IRQHandler+0x14>)
 8001bc2:	f000 fc79 	bl	80024b8 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001bc6:	4803      	ldr	r0, [pc, #12]	; (8001bd4 <ADC_IRQHandler+0x18>)
 8001bc8:	f000 fc76 	bl	80024b8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001bcc:	bf00      	nop
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	20000078 	.word	0x20000078
 8001bd4:	200000c0 	.word	0x200000c0

08001bd8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN TIM3_IRQn 0 */
	light_state = Read_LDR();
 8001bde:	f7ff f8f5 	bl	8000dcc <Read_LDR>
 8001be2:	4603      	mov	r3, r0
 8001be4:	b2da      	uxtb	r2, r3
 8001be6:	4b1d      	ldr	r3, [pc, #116]	; (8001c5c <TIM3_IRQHandler+0x84>)
 8001be8:	701a      	strb	r2, [r3, #0]
	gas_state = Read_MQ2();
 8001bea:	f7ff f90d 	bl	8000e08 <Read_MQ2>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	b2da      	uxtb	r2, r3
 8001bf2:	4b1b      	ldr	r3, [pc, #108]	; (8001c60 <TIM3_IRQHandler+0x88>)
 8001bf4:	701a      	strb	r2, [r3, #0]
	water_state = Read_HCSR04();
 8001bf6:	f7ff f927 	bl	8000e48 <Read_HCSR04>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	b2da      	uxtb	r2, r3
 8001bfe:	4b19      	ldr	r3, [pc, #100]	; (8001c64 <TIM3_IRQHandler+0x8c>)
 8001c00:	701a      	strb	r2, [r3, #0]
	live_state = Read_Live(water_value);
 8001c02:	4b19      	ldr	r3, [pc, #100]	; (8001c68 <TIM3_IRQHandler+0x90>)
 8001c04:	881b      	ldrh	r3, [r3, #0]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff f996 	bl	8000f38 <Read_Live>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	b2da      	uxtb	r2, r3
 8001c10:	4b16      	ldr	r3, [pc, #88]	; (8001c6c <TIM3_IRQHandler+0x94>)
 8001c12:	701a      	strb	r2, [r3, #0]
	sprintf(str,"%hu, %hu, %hu, %hu\r\n",water_state, gas_state, light_state, live_state);
 8001c14:	4b13      	ldr	r3, [pc, #76]	; (8001c64 <TIM3_IRQHandler+0x8c>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	4619      	mov	r1, r3
 8001c1a:	4b11      	ldr	r3, [pc, #68]	; (8001c60 <TIM3_IRQHandler+0x88>)
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	4b0e      	ldr	r3, [pc, #56]	; (8001c5c <TIM3_IRQHandler+0x84>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	461a      	mov	r2, r3
 8001c26:	4b11      	ldr	r3, [pc, #68]	; (8001c6c <TIM3_IRQHandler+0x94>)
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	9301      	str	r3, [sp, #4]
 8001c2c:	9200      	str	r2, [sp, #0]
 8001c2e:	4603      	mov	r3, r0
 8001c30:	460a      	mov	r2, r1
 8001c32:	490f      	ldr	r1, [pc, #60]	; (8001c70 <TIM3_IRQHandler+0x98>)
 8001c34:	480f      	ldr	r0, [pc, #60]	; (8001c74 <TIM3_IRQHandler+0x9c>)
 8001c36:	f004 fa4d 	bl	80060d4 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8001c3a:	480e      	ldr	r0, [pc, #56]	; (8001c74 <TIM3_IRQHandler+0x9c>)
 8001c3c:	f7fe fae8 	bl	8000210 <strlen>
 8001c40:	4603      	mov	r3, r0
 8001c42:	b29a      	uxth	r2, r3
 8001c44:	f04f 33ff 	mov.w	r3, #4294967295
 8001c48:	490a      	ldr	r1, [pc, #40]	; (8001c74 <TIM3_IRQHandler+0x9c>)
 8001c4a:	480b      	ldr	r0, [pc, #44]	; (8001c78 <TIM3_IRQHandler+0xa0>)
 8001c4c:	f003 fa32 	bl	80050b4 <HAL_UART_Transmit>
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001c50:	480a      	ldr	r0, [pc, #40]	; (8001c7c <TIM3_IRQHandler+0xa4>)
 8001c52:	f002 fb87 	bl	8004364 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001c56:	bf00      	nop
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	200002a0 	.word	0x200002a0
 8001c60:	200002a2 	.word	0x200002a2
 8001c64:	200002a1 	.word	0x200002a1
 8001c68:	2000022a 	.word	0x2000022a
 8001c6c:	200002a3 	.word	0x200002a3
 8001c70:	080073d4 	.word	0x080073d4
 8001c74:	20000230 	.word	0x20000230
 8001c78:	200001e0 	.word	0x200001e0
 8001c7c:	20000150 	.word	0x20000150

08001c80 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
    if (huart2.Instance == USART2) {
 8001c86:	4b38      	ldr	r3, [pc, #224]	; (8001d68 <USART2_IRQHandler+0xe8>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a38      	ldr	r2, [pc, #224]	; (8001d6c <USART2_IRQHandler+0xec>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d159      	bne.n	8001d44 <USART2_IRQHandler+0xc4>
        if(rxIndex < 50) {
 8001c90:	4b37      	ldr	r3, [pc, #220]	; (8001d70 <USART2_IRQHandler+0xf0>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	2b31      	cmp	r3, #49	; 0x31
 8001c96:	d855      	bhi.n	8001d44 <USART2_IRQHandler+0xc4>
            rxBuffer[rxIndex++] = huart2.Instance->DR & 0xFF;
 8001c98:	4b33      	ldr	r3, [pc, #204]	; (8001d68 <USART2_IRQHandler+0xe8>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	6859      	ldr	r1, [r3, #4]
 8001c9e:	4b34      	ldr	r3, [pc, #208]	; (8001d70 <USART2_IRQHandler+0xf0>)
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	1c5a      	adds	r2, r3, #1
 8001ca4:	b2d0      	uxtb	r0, r2
 8001ca6:	4a32      	ldr	r2, [pc, #200]	; (8001d70 <USART2_IRQHandler+0xf0>)
 8001ca8:	7010      	strb	r0, [r2, #0]
 8001caa:	461a      	mov	r2, r3
 8001cac:	b2c9      	uxtb	r1, r1
 8001cae:	4b31      	ldr	r3, [pc, #196]	; (8001d74 <USART2_IRQHandler+0xf4>)
 8001cb0:	5499      	strb	r1, [r3, r2]

            if(rxBuffer[rxIndex - 1] == '\n') {
 8001cb2:	4b2f      	ldr	r3, [pc, #188]	; (8001d70 <USART2_IRQHandler+0xf0>)
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	4a2e      	ldr	r2, [pc, #184]	; (8001d74 <USART2_IRQHandler+0xf4>)
 8001cba:	5cd3      	ldrb	r3, [r2, r3]
 8001cbc:	2b0a      	cmp	r3, #10
 8001cbe:	d141      	bne.n	8001d44 <USART2_IRQHandler+0xc4>
                rxBuffer[rxIndex - 1] = '\0';
 8001cc0:	4b2b      	ldr	r3, [pc, #172]	; (8001d70 <USART2_IRQHandler+0xf0>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	3b01      	subs	r3, #1
 8001cc6:	4a2b      	ldr	r2, [pc, #172]	; (8001d74 <USART2_IRQHandler+0xf4>)
 8001cc8:	2100      	movs	r1, #0
 8001cca:	54d1      	strb	r1, [r2, r3]

                // Gelen verileri işleyin
                char *timePtr = strstr((char *)rxBuffer, "Buzzer Time =");
 8001ccc:	492a      	ldr	r1, [pc, #168]	; (8001d78 <USART2_IRQHandler+0xf8>)
 8001cce:	4829      	ldr	r0, [pc, #164]	; (8001d74 <USART2_IRQHandler+0xf4>)
 8001cd0:	f004 fa56 	bl	8006180 <strstr>
 8001cd4:	60f8      	str	r0, [r7, #12]
                if(timePtr != NULL) {
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d004      	beq.n	8001ce6 <USART2_IRQHandler+0x66>
                    sscanf(timePtr, "Buzzer Time = %hu", &Buzzer_Time_Value);
 8001cdc:	4a27      	ldr	r2, [pc, #156]	; (8001d7c <USART2_IRQHandler+0xfc>)
 8001cde:	4928      	ldr	r1, [pc, #160]	; (8001d80 <USART2_IRQHandler+0x100>)
 8001ce0:	68f8      	ldr	r0, [r7, #12]
 8001ce2:	f004 fa17 	bl	8006114 <siscanf>
                }

                char *servoSpeedPtr = strstr((char *)rxBuffer, "Servo Speed =");
 8001ce6:	4927      	ldr	r1, [pc, #156]	; (8001d84 <USART2_IRQHandler+0x104>)
 8001ce8:	4822      	ldr	r0, [pc, #136]	; (8001d74 <USART2_IRQHandler+0xf4>)
 8001cea:	f004 fa49 	bl	8006180 <strstr>
 8001cee:	60b8      	str	r0, [r7, #8]
                if(servoSpeedPtr != NULL) {
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d004      	beq.n	8001d00 <USART2_IRQHandler+0x80>
                    sscanf(servoSpeedPtr, "Servo Speed = %hu", &Servo_Speed_Value);
 8001cf6:	4a24      	ldr	r2, [pc, #144]	; (8001d88 <USART2_IRQHandler+0x108>)
 8001cf8:	4924      	ldr	r1, [pc, #144]	; (8001d8c <USART2_IRQHandler+0x10c>)
 8001cfa:	68b8      	ldr	r0, [r7, #8]
 8001cfc:	f004 fa0a 	bl	8006114 <siscanf>
                }

                char *fanSpeedPtr = strstr((char *)rxBuffer, "Fan Speed =");
 8001d00:	4923      	ldr	r1, [pc, #140]	; (8001d90 <USART2_IRQHandler+0x110>)
 8001d02:	481c      	ldr	r0, [pc, #112]	; (8001d74 <USART2_IRQHandler+0xf4>)
 8001d04:	f004 fa3c 	bl	8006180 <strstr>
 8001d08:	6078      	str	r0, [r7, #4]
                if(fanSpeedPtr != NULL) {
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d004      	beq.n	8001d1a <USART2_IRQHandler+0x9a>
                    sscanf(fanSpeedPtr, "Fan Speed = %hu", &Fan_Speed_Value);
 8001d10:	4a20      	ldr	r2, [pc, #128]	; (8001d94 <USART2_IRQHandler+0x114>)
 8001d12:	4921      	ldr	r1, [pc, #132]	; (8001d98 <USART2_IRQHandler+0x118>)
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f004 f9fd 	bl	8006114 <siscanf>
                }

                char *lightIntensityPtr = strstr((char *)rxBuffer, "Light Intensity = ");
 8001d1a:	4920      	ldr	r1, [pc, #128]	; (8001d9c <USART2_IRQHandler+0x11c>)
 8001d1c:	4815      	ldr	r0, [pc, #84]	; (8001d74 <USART2_IRQHandler+0xf4>)
 8001d1e:	f004 fa2f 	bl	8006180 <strstr>
 8001d22:	6038      	str	r0, [r7, #0]
                if(lightIntensityPtr != NULL) {
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d004      	beq.n	8001d34 <USART2_IRQHandler+0xb4>
                    sscanf(lightIntensityPtr, "Light Intensity = %hu", &Light_Intensity_Value);
 8001d2a:	4a1d      	ldr	r2, [pc, #116]	; (8001da0 <USART2_IRQHandler+0x120>)
 8001d2c:	491d      	ldr	r1, [pc, #116]	; (8001da4 <USART2_IRQHandler+0x124>)
 8001d2e:	6838      	ldr	r0, [r7, #0]
 8001d30:	f004 f9f0 	bl	8006114 <siscanf>
                }

                rxIndex = 0;
 8001d34:	4b0e      	ldr	r3, [pc, #56]	; (8001d70 <USART2_IRQHandler+0xf0>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	701a      	strb	r2, [r3, #0]
                memset(rxBuffer, 0, sizeof(rxBuffer));
 8001d3a:	2232      	movs	r2, #50	; 0x32
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	480d      	ldr	r0, [pc, #52]	; (8001d74 <USART2_IRQHandler+0xf4>)
 8001d40:	f004 fa16 	bl	8006170 <memset>
            }
        }
    }

    HAL_UART_Receive_IT(&huart2, (uint8_t *)rxBuffer + rxIndex, 1); // Tekrar veri alma işlemi başlat
 8001d44:	4b0a      	ldr	r3, [pc, #40]	; (8001d70 <USART2_IRQHandler+0xf0>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	461a      	mov	r2, r3
 8001d4a:	4b0a      	ldr	r3, [pc, #40]	; (8001d74 <USART2_IRQHandler+0xf4>)
 8001d4c:	4413      	add	r3, r2
 8001d4e:	2201      	movs	r2, #1
 8001d50:	4619      	mov	r1, r3
 8001d52:	4805      	ldr	r0, [pc, #20]	; (8001d68 <USART2_IRQHandler+0xe8>)
 8001d54:	f003 fa39 	bl	80051ca <HAL_UART_Receive_IT>

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d58:	4803      	ldr	r0, [pc, #12]	; (8001d68 <USART2_IRQHandler+0xe8>)
 8001d5a:	f003 fa5b 	bl	8005214 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d5e:	bf00      	nop
 8001d60:	3710      	adds	r7, #16
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	200001e0 	.word	0x200001e0
 8001d6c:	40004400 	.word	0x40004400
 8001d70:	20000296 	.word	0x20000296
 8001d74:	20000264 	.word	0x20000264
 8001d78:	080073ec 	.word	0x080073ec
 8001d7c:	20000298 	.word	0x20000298
 8001d80:	080073fc 	.word	0x080073fc
 8001d84:	08007410 	.word	0x08007410
 8001d88:	2000029a 	.word	0x2000029a
 8001d8c:	08007420 	.word	0x08007420
 8001d90:	08007434 	.word	0x08007434
 8001d94:	2000029c 	.word	0x2000029c
 8001d98:	08007440 	.word	0x08007440
 8001d9c:	08007450 	.word	0x08007450
 8001da0:	2000029e 	.word	0x2000029e
 8001da4:	08007464 	.word	0x08007464

08001da8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001db0:	4a14      	ldr	r2, [pc, #80]	; (8001e04 <_sbrk+0x5c>)
 8001db2:	4b15      	ldr	r3, [pc, #84]	; (8001e08 <_sbrk+0x60>)
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dbc:	4b13      	ldr	r3, [pc, #76]	; (8001e0c <_sbrk+0x64>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d102      	bne.n	8001dca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dc4:	4b11      	ldr	r3, [pc, #68]	; (8001e0c <_sbrk+0x64>)
 8001dc6:	4a12      	ldr	r2, [pc, #72]	; (8001e10 <_sbrk+0x68>)
 8001dc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dca:	4b10      	ldr	r3, [pc, #64]	; (8001e0c <_sbrk+0x64>)
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	693a      	ldr	r2, [r7, #16]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d207      	bcs.n	8001de8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dd8:	f004 f9e8 	bl	80061ac <__errno>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	220c      	movs	r2, #12
 8001de0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001de2:	f04f 33ff 	mov.w	r3, #4294967295
 8001de6:	e009      	b.n	8001dfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001de8:	4b08      	ldr	r3, [pc, #32]	; (8001e0c <_sbrk+0x64>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dee:	4b07      	ldr	r3, [pc, #28]	; (8001e0c <_sbrk+0x64>)
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4413      	add	r3, r2
 8001df6:	4a05      	ldr	r2, [pc, #20]	; (8001e0c <_sbrk+0x64>)
 8001df8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3718      	adds	r7, #24
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	20020000 	.word	0x20020000
 8001e08:	00000400 	.word	0x00000400
 8001e0c:	200002a4 	.word	0x200002a4
 8001e10:	200003f8 	.word	0x200003f8

08001e14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e18:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <SystemInit+0x20>)
 8001e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e1e:	4a05      	ldr	r2, [pc, #20]	; (8001e34 <SystemInit+0x20>)
 8001e20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e28:	bf00      	nop
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	e000ed00 	.word	0xe000ed00

08001e38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e70 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001e3c:	f7ff ffea 	bl	8001e14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e40:	480c      	ldr	r0, [pc, #48]	; (8001e74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e42:	490d      	ldr	r1, [pc, #52]	; (8001e78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e44:	4a0d      	ldr	r2, [pc, #52]	; (8001e7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e48:	e002      	b.n	8001e50 <LoopCopyDataInit>

08001e4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e4e:	3304      	adds	r3, #4

08001e50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e54:	d3f9      	bcc.n	8001e4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e56:	4a0a      	ldr	r2, [pc, #40]	; (8001e80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e58:	4c0a      	ldr	r4, [pc, #40]	; (8001e84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e5c:	e001      	b.n	8001e62 <LoopFillZerobss>

08001e5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e60:	3204      	adds	r2, #4

08001e62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e64:	d3fb      	bcc.n	8001e5e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001e66:	f004 f9a7 	bl	80061b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e6a:	f7ff f8e1 	bl	8001030 <main>
  bx  lr    
 8001e6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e78:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001e7c:	08007600 	.word	0x08007600
  ldr r2, =_sbss
 8001e80:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001e84:	200003f4 	.word	0x200003f4

08001e88 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e88:	e7fe      	b.n	8001e88 <CAN1_RX0_IRQHandler>
	...

08001e8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e90:	4b0e      	ldr	r3, [pc, #56]	; (8001ecc <HAL_Init+0x40>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a0d      	ldr	r2, [pc, #52]	; (8001ecc <HAL_Init+0x40>)
 8001e96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e9c:	4b0b      	ldr	r3, [pc, #44]	; (8001ecc <HAL_Init+0x40>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a0a      	ldr	r2, [pc, #40]	; (8001ecc <HAL_Init+0x40>)
 8001ea2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ea6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ea8:	4b08      	ldr	r3, [pc, #32]	; (8001ecc <HAL_Init+0x40>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a07      	ldr	r2, [pc, #28]	; (8001ecc <HAL_Init+0x40>)
 8001eae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001eb4:	2003      	movs	r0, #3
 8001eb6:	f000 ff43 	bl	8002d40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001eba:	2000      	movs	r0, #0
 8001ebc:	f000 f808 	bl	8001ed0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ec0:	f7ff fca0 	bl	8001804 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	40023c00 	.word	0x40023c00

08001ed0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ed8:	4b12      	ldr	r3, [pc, #72]	; (8001f24 <HAL_InitTick+0x54>)
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	4b12      	ldr	r3, [pc, #72]	; (8001f28 <HAL_InitTick+0x58>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ee6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f000 ff5b 	bl	8002daa <HAL_SYSTICK_Config>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e00e      	b.n	8001f1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2b0f      	cmp	r3, #15
 8001f02:	d80a      	bhi.n	8001f1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f04:	2200      	movs	r2, #0
 8001f06:	6879      	ldr	r1, [r7, #4]
 8001f08:	f04f 30ff 	mov.w	r0, #4294967295
 8001f0c:	f000 ff23 	bl	8002d56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f10:	4a06      	ldr	r2, [pc, #24]	; (8001f2c <HAL_InitTick+0x5c>)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f16:	2300      	movs	r3, #0
 8001f18:	e000      	b.n	8001f1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3708      	adds	r7, #8
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	20000000 	.word	0x20000000
 8001f28:	20000008 	.word	0x20000008
 8001f2c:	20000004 	.word	0x20000004

08001f30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f34:	4b06      	ldr	r3, [pc, #24]	; (8001f50 <HAL_IncTick+0x20>)
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	461a      	mov	r2, r3
 8001f3a:	4b06      	ldr	r3, [pc, #24]	; (8001f54 <HAL_IncTick+0x24>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4413      	add	r3, r2
 8001f40:	4a04      	ldr	r2, [pc, #16]	; (8001f54 <HAL_IncTick+0x24>)
 8001f42:	6013      	str	r3, [r2, #0]
}
 8001f44:	bf00      	nop
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	20000008 	.word	0x20000008
 8001f54:	200002a8 	.word	0x200002a8

08001f58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f5c:	4b03      	ldr	r3, [pc, #12]	; (8001f6c <HAL_GetTick+0x14>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	200002a8 	.word	0x200002a8

08001f70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f78:	f7ff ffee 	bl	8001f58 <HAL_GetTick>
 8001f7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f88:	d005      	beq.n	8001f96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f8a:	4b0a      	ldr	r3, [pc, #40]	; (8001fb4 <HAL_Delay+0x44>)
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	461a      	mov	r2, r3
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	4413      	add	r3, r2
 8001f94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f96:	bf00      	nop
 8001f98:	f7ff ffde 	bl	8001f58 <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	68fa      	ldr	r2, [r7, #12]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d8f7      	bhi.n	8001f98 <HAL_Delay+0x28>
  {
  }
}
 8001fa8:	bf00      	nop
 8001faa:	bf00      	nop
 8001fac:	3710      	adds	r7, #16
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	20000008 	.word	0x20000008

08001fb8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d101      	bne.n	8001fce <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e033      	b.n	8002036 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d109      	bne.n	8001fea <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f7ff fc3c 	bl	8001854 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fee:	f003 0310 	and.w	r3, r3, #16
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d118      	bne.n	8002028 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ffe:	f023 0302 	bic.w	r3, r3, #2
 8002002:	f043 0202 	orr.w	r2, r3, #2
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f000 fcc2 	bl	8002994 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201a:	f023 0303 	bic.w	r3, r3, #3
 800201e:	f043 0201 	orr.w	r2, r3, #1
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	641a      	str	r2, [r3, #64]	; 0x40
 8002026:	e001      	b.n	800202c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002034:	7bfb      	ldrb	r3, [r7, #15]
}
 8002036:	4618      	mov	r0, r3
 8002038:	3710      	adds	r7, #16
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
	...

08002040 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002040:	b480      	push	{r7}
 8002042:	b085      	sub	sp, #20
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002048:	2300      	movs	r3, #0
 800204a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002052:	2b01      	cmp	r3, #1
 8002054:	d101      	bne.n	800205a <HAL_ADC_Start+0x1a>
 8002056:	2302      	movs	r3, #2
 8002058:	e0b2      	b.n	80021c0 <HAL_ADC_Start+0x180>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2201      	movs	r2, #1
 800205e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	f003 0301 	and.w	r3, r3, #1
 800206c:	2b01      	cmp	r3, #1
 800206e:	d018      	beq.n	80020a2 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	689a      	ldr	r2, [r3, #8]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f042 0201 	orr.w	r2, r2, #1
 800207e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002080:	4b52      	ldr	r3, [pc, #328]	; (80021cc <HAL_ADC_Start+0x18c>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a52      	ldr	r2, [pc, #328]	; (80021d0 <HAL_ADC_Start+0x190>)
 8002086:	fba2 2303 	umull	r2, r3, r2, r3
 800208a:	0c9a      	lsrs	r2, r3, #18
 800208c:	4613      	mov	r3, r2
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	4413      	add	r3, r2
 8002092:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002094:	e002      	b.n	800209c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	3b01      	subs	r3, #1
 800209a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d1f9      	bne.n	8002096 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	f003 0301 	and.w	r3, r3, #1
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d17a      	bne.n	80021a6 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80020b8:	f023 0301 	bic.w	r3, r3, #1
 80020bc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d007      	beq.n	80020e2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80020da:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020ee:	d106      	bne.n	80020fe <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f4:	f023 0206 	bic.w	r2, r3, #6
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	645a      	str	r2, [r3, #68]	; 0x44
 80020fc:	e002      	b.n	8002104 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800210c:	4b31      	ldr	r3, [pc, #196]	; (80021d4 <HAL_ADC_Start+0x194>)
 800210e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002118:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f003 031f 	and.w	r3, r3, #31
 8002122:	2b00      	cmp	r3, #0
 8002124:	d12a      	bne.n	800217c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a2b      	ldr	r2, [pc, #172]	; (80021d8 <HAL_ADC_Start+0x198>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d015      	beq.n	800215c <HAL_ADC_Start+0x11c>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a29      	ldr	r2, [pc, #164]	; (80021dc <HAL_ADC_Start+0x19c>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d105      	bne.n	8002146 <HAL_ADC_Start+0x106>
 800213a:	4b26      	ldr	r3, [pc, #152]	; (80021d4 <HAL_ADC_Start+0x194>)
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f003 031f 	and.w	r3, r3, #31
 8002142:	2b00      	cmp	r3, #0
 8002144:	d00a      	beq.n	800215c <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a25      	ldr	r2, [pc, #148]	; (80021e0 <HAL_ADC_Start+0x1a0>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d136      	bne.n	80021be <HAL_ADC_Start+0x17e>
 8002150:	4b20      	ldr	r3, [pc, #128]	; (80021d4 <HAL_ADC_Start+0x194>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f003 0310 	and.w	r3, r3, #16
 8002158:	2b00      	cmp	r3, #0
 800215a:	d130      	bne.n	80021be <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d129      	bne.n	80021be <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	689a      	ldr	r2, [r3, #8]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002178:	609a      	str	r2, [r3, #8]
 800217a:	e020      	b.n	80021be <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a15      	ldr	r2, [pc, #84]	; (80021d8 <HAL_ADC_Start+0x198>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d11b      	bne.n	80021be <HAL_ADC_Start+0x17e>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d114      	bne.n	80021be <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	689a      	ldr	r2, [r3, #8]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80021a2:	609a      	str	r2, [r3, #8]
 80021a4:	e00b      	b.n	80021be <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021aa:	f043 0210 	orr.w	r2, r3, #16
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b6:	f043 0201 	orr.w	r2, r3, #1
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 80021be:	2300      	movs	r3, #0
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3714      	adds	r7, #20
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr
 80021cc:	20000000 	.word	0x20000000
 80021d0:	431bde83 	.word	0x431bde83
 80021d4:	40012300 	.word	0x40012300
 80021d8:	40012000 	.word	0x40012000
 80021dc:	40012100 	.word	0x40012100
 80021e0:	40012200 	.word	0x40012200

080021e4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80021ee:	2300      	movs	r3, #0
 80021f0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002200:	d113      	bne.n	800222a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800220c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002210:	d10b      	bne.n	800222a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002216:	f043 0220 	orr.w	r2, r3, #32
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e063      	b.n	80022f2 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 800222a:	f7ff fe95 	bl	8001f58 <HAL_GetTick>
 800222e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002230:	e021      	b.n	8002276 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002238:	d01d      	beq.n	8002276 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d007      	beq.n	8002250 <HAL_ADC_PollForConversion+0x6c>
 8002240:	f7ff fe8a 	bl	8001f58 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	683a      	ldr	r2, [r7, #0]
 800224c:	429a      	cmp	r2, r3
 800224e:	d212      	bcs.n	8002276 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0302 	and.w	r3, r3, #2
 800225a:	2b02      	cmp	r3, #2
 800225c:	d00b      	beq.n	8002276 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002262:	f043 0204 	orr.w	r2, r3, #4
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e03d      	b.n	80022f2 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0302 	and.w	r3, r3, #2
 8002280:	2b02      	cmp	r3, #2
 8002282:	d1d6      	bne.n	8002232 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f06f 0212 	mvn.w	r2, #18
 800228c:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002292:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d123      	bne.n	80022f0 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d11f      	bne.n	80022f0 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d006      	beq.n	80022cc <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d111      	bne.n	80022f0 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d105      	bne.n	80022f0 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e8:	f043 0201 	orr.w	r2, r3, #1
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3710      	adds	r7, #16
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
	...

080022fc <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b085      	sub	sp, #20
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002304:	2300      	movs	r3, #0
 8002306:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800230e:	2b01      	cmp	r3, #1
 8002310:	d101      	bne.n	8002316 <HAL_ADC_Start_IT+0x1a>
 8002312:	2302      	movs	r3, #2
 8002314:	e0bd      	b.n	8002492 <HAL_ADC_Start_IT+0x196>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2201      	movs	r2, #1
 800231a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	f003 0301 	and.w	r3, r3, #1
 8002328:	2b01      	cmp	r3, #1
 800232a:	d018      	beq.n	800235e <HAL_ADC_Start_IT+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	689a      	ldr	r2, [r3, #8]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f042 0201 	orr.w	r2, r2, #1
 800233a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800233c:	4b58      	ldr	r3, [pc, #352]	; (80024a0 <HAL_ADC_Start_IT+0x1a4>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a58      	ldr	r2, [pc, #352]	; (80024a4 <HAL_ADC_Start_IT+0x1a8>)
 8002342:	fba2 2303 	umull	r2, r3, r2, r3
 8002346:	0c9a      	lsrs	r2, r3, #18
 8002348:	4613      	mov	r3, r2
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	4413      	add	r3, r2
 800234e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002350:	e002      	b.n	8002358 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	3b01      	subs	r3, #1
 8002356:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d1f9      	bne.n	8002352 <HAL_ADC_Start_IT+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f003 0301 	and.w	r3, r3, #1
 8002368:	2b01      	cmp	r3, #1
 800236a:	f040 8085 	bne.w	8002478 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002372:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002376:	f023 0301 	bic.w	r3, r3, #1
 800237a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800238c:	2b00      	cmp	r3, #0
 800238e:	d007      	beq.n	80023a0 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002394:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002398:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023ac:	d106      	bne.n	80023bc <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b2:	f023 0206 	bic.w	r2, r3, #6
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	645a      	str	r2, [r3, #68]	; 0x44
 80023ba:	e002      	b.n	80023c2 <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023ca:	4b37      	ldr	r3, [pc, #220]	; (80024a8 <HAL_ADC_Start_IT+0x1ac>)
 80023cc:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80023d6:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	6812      	ldr	r2, [r2, #0]
 80023e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80023e6:	f043 0320 	orr.w	r3, r3, #32
 80023ea:	6053      	str	r3, [r2, #4]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f003 031f 	and.w	r3, r3, #31
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d12a      	bne.n	800244e <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a2b      	ldr	r2, [pc, #172]	; (80024ac <HAL_ADC_Start_IT+0x1b0>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d015      	beq.n	800242e <HAL_ADC_Start_IT+0x132>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a2a      	ldr	r2, [pc, #168]	; (80024b0 <HAL_ADC_Start_IT+0x1b4>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d105      	bne.n	8002418 <HAL_ADC_Start_IT+0x11c>
 800240c:	4b26      	ldr	r3, [pc, #152]	; (80024a8 <HAL_ADC_Start_IT+0x1ac>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f003 031f 	and.w	r3, r3, #31
 8002414:	2b00      	cmp	r3, #0
 8002416:	d00a      	beq.n	800242e <HAL_ADC_Start_IT+0x132>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a25      	ldr	r2, [pc, #148]	; (80024b4 <HAL_ADC_Start_IT+0x1b8>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d136      	bne.n	8002490 <HAL_ADC_Start_IT+0x194>
 8002422:	4b21      	ldr	r3, [pc, #132]	; (80024a8 <HAL_ADC_Start_IT+0x1ac>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f003 0310 	and.w	r3, r3, #16
 800242a:	2b00      	cmp	r3, #0
 800242c:	d130      	bne.n	8002490 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d129      	bne.n	8002490 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	689a      	ldr	r2, [r3, #8]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800244a:	609a      	str	r2, [r3, #8]
 800244c:	e020      	b.n	8002490 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a16      	ldr	r2, [pc, #88]	; (80024ac <HAL_ADC_Start_IT+0x1b0>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d11b      	bne.n	8002490 <HAL_ADC_Start_IT+0x194>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d114      	bne.n	8002490 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	689a      	ldr	r2, [r3, #8]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002474:	609a      	str	r2, [r3, #8]
 8002476:	e00b      	b.n	8002490 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247c:	f043 0210 	orr.w	r2, r3, #16
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002488:	f043 0201 	orr.w	r2, r3, #1
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002490:	2300      	movs	r3, #0
}
 8002492:	4618      	mov	r0, r3
 8002494:	3714      	adds	r7, #20
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	20000000 	.word	0x20000000
 80024a4:	431bde83 	.word	0x431bde83
 80024a8:	40012300 	.word	0x40012300
 80024ac:	40012000 	.word	0x40012000
 80024b0:	40012100 	.word	0x40012100
 80024b4:	40012200 	.word	0x40012200

080024b8 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b086      	sub	sp, #24
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80024c0:	2300      	movs	r3, #0
 80024c2:	617b      	str	r3, [r7, #20]
 80024c4:	2300      	movs	r3, #0
 80024c6:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f003 0302 	and.w	r3, r3, #2
 80024de:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	f003 0320 	and.w	r3, r3, #32
 80024e6:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d049      	beq.n	8002582 <HAL_ADC_IRQHandler+0xca>
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d046      	beq.n	8002582 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f8:	f003 0310 	and.w	r3, r3, #16
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d105      	bne.n	800250c <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002504:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d12b      	bne.n	8002572 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800251e:	2b00      	cmp	r3, #0
 8002520:	d127      	bne.n	8002572 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002528:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800252c:	2b00      	cmp	r3, #0
 800252e:	d006      	beq.n	800253e <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800253a:	2b00      	cmp	r3, #0
 800253c:	d119      	bne.n	8002572 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	685a      	ldr	r2, [r3, #4]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f022 0220 	bic.w	r2, r2, #32
 800254c:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002552:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d105      	bne.n	8002572 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256a:	f043 0201 	orr.w	r2, r3, #1
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f000 f8bd 	bl	80026f2 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f06f 0212 	mvn.w	r2, #18
 8002580:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	f003 0304 	and.w	r3, r3, #4
 8002588:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002590:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d057      	beq.n	8002648 <HAL_ADC_IRQHandler+0x190>
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d054      	beq.n	8002648 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a2:	f003 0310 	and.w	r3, r3, #16
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d105      	bne.n	80025b6 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ae:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d139      	bne.n	8002638 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ca:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d006      	beq.n	80025e0 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d12b      	bne.n	8002638 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d124      	bne.n	8002638 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d11d      	bne.n	8002638 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002600:	2b00      	cmp	r3, #0
 8002602:	d119      	bne.n	8002638 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	685a      	ldr	r2, [r3, #4]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002612:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002618:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002628:	2b00      	cmp	r3, #0
 800262a:	d105      	bne.n	8002638 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002630:	f043 0201 	orr.w	r2, r3, #1
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f000 faa7 	bl	8002b8c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f06f 020c 	mvn.w	r2, #12
 8002646:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002656:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d017      	beq.n	800268e <HAL_ADC_IRQHandler+0x1d6>
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d014      	beq.n	800268e <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	2b01      	cmp	r3, #1
 8002670:	d10d      	bne.n	800268e <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f000 f841 	bl	8002706 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f06f 0201 	mvn.w	r2, #1
 800268c:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	f003 0320 	and.w	r3, r3, #32
 8002694:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800269c:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d015      	beq.n	80026d0 <HAL_ADC_IRQHandler+0x218>
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d012      	beq.n	80026d0 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ae:	f043 0202 	orr.w	r2, r3, #2
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f06f 0220 	mvn.w	r2, #32
 80026be:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f000 f82a 	bl	800271a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f06f 0220 	mvn.w	r2, #32
 80026ce:	601a      	str	r2, [r3, #0]
  }
}
 80026d0:	bf00      	nop
 80026d2:	3718      	adds	r7, #24
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	370c      	adds	r7, #12
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr

080026f2 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80026f2:	b480      	push	{r7}
 80026f4:	b083      	sub	sp, #12
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80026fa:	bf00      	nop
 80026fc:	370c      	adds	r7, #12
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr

08002706 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002706:	b480      	push	{r7}
 8002708:	b083      	sub	sp, #12
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800270e:	bf00      	nop
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr

0800271a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800271a:	b480      	push	{r7}
 800271c:	b083      	sub	sp, #12
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002722:	bf00      	nop
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
	...

08002730 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002730:	b480      	push	{r7}
 8002732:	b085      	sub	sp, #20
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800273a:	2300      	movs	r3, #0
 800273c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002744:	2b01      	cmp	r3, #1
 8002746:	d101      	bne.n	800274c <HAL_ADC_ConfigChannel+0x1c>
 8002748:	2302      	movs	r3, #2
 800274a:	e113      	b.n	8002974 <HAL_ADC_ConfigChannel+0x244>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2201      	movs	r2, #1
 8002750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	2b09      	cmp	r3, #9
 800275a:	d925      	bls.n	80027a8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	68d9      	ldr	r1, [r3, #12]
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	b29b      	uxth	r3, r3
 8002768:	461a      	mov	r2, r3
 800276a:	4613      	mov	r3, r2
 800276c:	005b      	lsls	r3, r3, #1
 800276e:	4413      	add	r3, r2
 8002770:	3b1e      	subs	r3, #30
 8002772:	2207      	movs	r2, #7
 8002774:	fa02 f303 	lsl.w	r3, r2, r3
 8002778:	43da      	mvns	r2, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	400a      	ands	r2, r1
 8002780:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	68d9      	ldr	r1, [r3, #12]
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	689a      	ldr	r2, [r3, #8]
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	b29b      	uxth	r3, r3
 8002792:	4618      	mov	r0, r3
 8002794:	4603      	mov	r3, r0
 8002796:	005b      	lsls	r3, r3, #1
 8002798:	4403      	add	r3, r0
 800279a:	3b1e      	subs	r3, #30
 800279c:	409a      	lsls	r2, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	430a      	orrs	r2, r1
 80027a4:	60da      	str	r2, [r3, #12]
 80027a6:	e022      	b.n	80027ee <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	6919      	ldr	r1, [r3, #16]
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	461a      	mov	r2, r3
 80027b6:	4613      	mov	r3, r2
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	4413      	add	r3, r2
 80027bc:	2207      	movs	r2, #7
 80027be:	fa02 f303 	lsl.w	r3, r2, r3
 80027c2:	43da      	mvns	r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	400a      	ands	r2, r1
 80027ca:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	6919      	ldr	r1, [r3, #16]
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	689a      	ldr	r2, [r3, #8]
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	b29b      	uxth	r3, r3
 80027dc:	4618      	mov	r0, r3
 80027de:	4603      	mov	r3, r0
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	4403      	add	r3, r0
 80027e4:	409a      	lsls	r2, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	430a      	orrs	r2, r1
 80027ec:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	2b06      	cmp	r3, #6
 80027f4:	d824      	bhi.n	8002840 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	685a      	ldr	r2, [r3, #4]
 8002800:	4613      	mov	r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	4413      	add	r3, r2
 8002806:	3b05      	subs	r3, #5
 8002808:	221f      	movs	r2, #31
 800280a:	fa02 f303 	lsl.w	r3, r2, r3
 800280e:	43da      	mvns	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	400a      	ands	r2, r1
 8002816:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	b29b      	uxth	r3, r3
 8002824:	4618      	mov	r0, r3
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	685a      	ldr	r2, [r3, #4]
 800282a:	4613      	mov	r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	4413      	add	r3, r2
 8002830:	3b05      	subs	r3, #5
 8002832:	fa00 f203 	lsl.w	r2, r0, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	430a      	orrs	r2, r1
 800283c:	635a      	str	r2, [r3, #52]	; 0x34
 800283e:	e04c      	b.n	80028da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	2b0c      	cmp	r3, #12
 8002846:	d824      	bhi.n	8002892 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	685a      	ldr	r2, [r3, #4]
 8002852:	4613      	mov	r3, r2
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	4413      	add	r3, r2
 8002858:	3b23      	subs	r3, #35	; 0x23
 800285a:	221f      	movs	r2, #31
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	43da      	mvns	r2, r3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	400a      	ands	r2, r1
 8002868:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	b29b      	uxth	r3, r3
 8002876:	4618      	mov	r0, r3
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685a      	ldr	r2, [r3, #4]
 800287c:	4613      	mov	r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	4413      	add	r3, r2
 8002882:	3b23      	subs	r3, #35	; 0x23
 8002884:	fa00 f203 	lsl.w	r2, r0, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	430a      	orrs	r2, r1
 800288e:	631a      	str	r2, [r3, #48]	; 0x30
 8002890:	e023      	b.n	80028da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685a      	ldr	r2, [r3, #4]
 800289c:	4613      	mov	r3, r2
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	4413      	add	r3, r2
 80028a2:	3b41      	subs	r3, #65	; 0x41
 80028a4:	221f      	movs	r2, #31
 80028a6:	fa02 f303 	lsl.w	r3, r2, r3
 80028aa:	43da      	mvns	r2, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	400a      	ands	r2, r1
 80028b2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	b29b      	uxth	r3, r3
 80028c0:	4618      	mov	r0, r3
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	685a      	ldr	r2, [r3, #4]
 80028c6:	4613      	mov	r3, r2
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	4413      	add	r3, r2
 80028cc:	3b41      	subs	r3, #65	; 0x41
 80028ce:	fa00 f203 	lsl.w	r2, r0, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	430a      	orrs	r2, r1
 80028d8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028da:	4b29      	ldr	r3, [pc, #164]	; (8002980 <HAL_ADC_ConfigChannel+0x250>)
 80028dc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a28      	ldr	r2, [pc, #160]	; (8002984 <HAL_ADC_ConfigChannel+0x254>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d10f      	bne.n	8002908 <HAL_ADC_ConfigChannel+0x1d8>
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2b12      	cmp	r3, #18
 80028ee:	d10b      	bne.n	8002908 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a1d      	ldr	r2, [pc, #116]	; (8002984 <HAL_ADC_ConfigChannel+0x254>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d12b      	bne.n	800296a <HAL_ADC_ConfigChannel+0x23a>
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a1c      	ldr	r2, [pc, #112]	; (8002988 <HAL_ADC_ConfigChannel+0x258>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d003      	beq.n	8002924 <HAL_ADC_ConfigChannel+0x1f4>
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2b11      	cmp	r3, #17
 8002922:	d122      	bne.n	800296a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a11      	ldr	r2, [pc, #68]	; (8002988 <HAL_ADC_ConfigChannel+0x258>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d111      	bne.n	800296a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002946:	4b11      	ldr	r3, [pc, #68]	; (800298c <HAL_ADC_ConfigChannel+0x25c>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a11      	ldr	r2, [pc, #68]	; (8002990 <HAL_ADC_ConfigChannel+0x260>)
 800294c:	fba2 2303 	umull	r2, r3, r2, r3
 8002950:	0c9a      	lsrs	r2, r3, #18
 8002952:	4613      	mov	r3, r2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	4413      	add	r3, r2
 8002958:	005b      	lsls	r3, r3, #1
 800295a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800295c:	e002      	b.n	8002964 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	3b01      	subs	r3, #1
 8002962:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d1f9      	bne.n	800295e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8002972:	2300      	movs	r3, #0
}
 8002974:	4618      	mov	r0, r3
 8002976:	3714      	adds	r7, #20
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr
 8002980:	40012300 	.word	0x40012300
 8002984:	40012000 	.word	0x40012000
 8002988:	10000012 	.word	0x10000012
 800298c:	20000000 	.word	0x20000000
 8002990:	431bde83 	.word	0x431bde83

08002994 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002994:	b480      	push	{r7}
 8002996:	b085      	sub	sp, #20
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800299c:	4b79      	ldr	r3, [pc, #484]	; (8002b84 <ADC_Init+0x1f0>)
 800299e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	685a      	ldr	r2, [r3, #4]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	431a      	orrs	r2, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	685a      	ldr	r2, [r3, #4]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	6859      	ldr	r1, [r3, #4]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	691b      	ldr	r3, [r3, #16]
 80029d4:	021a      	lsls	r2, r3, #8
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	430a      	orrs	r2, r1
 80029dc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	685a      	ldr	r2, [r3, #4]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80029ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	6859      	ldr	r1, [r3, #4]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	689a      	ldr	r2, [r3, #8]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	430a      	orrs	r2, r1
 80029fe:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	689a      	ldr	r2, [r3, #8]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a0e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	6899      	ldr	r1, [r3, #8]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	68da      	ldr	r2, [r3, #12]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a26:	4a58      	ldr	r2, [pc, #352]	; (8002b88 <ADC_Init+0x1f4>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d022      	beq.n	8002a72 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	689a      	ldr	r2, [r3, #8]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a3a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	6899      	ldr	r1, [r3, #8]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	689a      	ldr	r2, [r3, #8]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a5c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	6899      	ldr	r1, [r3, #8]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	430a      	orrs	r2, r1
 8002a6e:	609a      	str	r2, [r3, #8]
 8002a70:	e00f      	b.n	8002a92 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	689a      	ldr	r2, [r3, #8]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a80:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	689a      	ldr	r2, [r3, #8]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a90:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	689a      	ldr	r2, [r3, #8]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f022 0202 	bic.w	r2, r2, #2
 8002aa0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	6899      	ldr	r1, [r3, #8]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	7e1b      	ldrb	r3, [r3, #24]
 8002aac:	005a      	lsls	r2, r3, #1
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	430a      	orrs	r2, r1
 8002ab4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d01b      	beq.n	8002af8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	685a      	ldr	r2, [r3, #4]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ace:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	685a      	ldr	r2, [r3, #4]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002ade:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	6859      	ldr	r1, [r3, #4]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aea:	3b01      	subs	r3, #1
 8002aec:	035a      	lsls	r2, r3, #13
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	430a      	orrs	r2, r1
 8002af4:	605a      	str	r2, [r3, #4]
 8002af6:	e007      	b.n	8002b08 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	685a      	ldr	r2, [r3, #4]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b06:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002b16:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	69db      	ldr	r3, [r3, #28]
 8002b22:	3b01      	subs	r3, #1
 8002b24:	051a      	lsls	r2, r3, #20
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	689a      	ldr	r2, [r3, #8]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002b3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	6899      	ldr	r1, [r3, #8]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b4a:	025a      	lsls	r2, r3, #9
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	430a      	orrs	r2, r1
 8002b52:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	689a      	ldr	r2, [r3, #8]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b62:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	6899      	ldr	r1, [r3, #8]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	695b      	ldr	r3, [r3, #20]
 8002b6e:	029a      	lsls	r2, r3, #10
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	430a      	orrs	r2, r1
 8002b76:	609a      	str	r2, [r3, #8]
}
 8002b78:	bf00      	nop
 8002b7a:	3714      	adds	r7, #20
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr
 8002b84:	40012300 	.word	0x40012300
 8002b88:	0f000001 	.word	0x0f000001

08002b8c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002b94:	bf00      	nop
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b085      	sub	sp, #20
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f003 0307 	and.w	r3, r3, #7
 8002bae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bb0:	4b0c      	ldr	r3, [pc, #48]	; (8002be4 <__NVIC_SetPriorityGrouping+0x44>)
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bb6:	68ba      	ldr	r2, [r7, #8]
 8002bb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002bcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bd2:	4a04      	ldr	r2, [pc, #16]	; (8002be4 <__NVIC_SetPriorityGrouping+0x44>)
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	60d3      	str	r3, [r2, #12]
}
 8002bd8:	bf00      	nop
 8002bda:	3714      	adds	r7, #20
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr
 8002be4:	e000ed00 	.word	0xe000ed00

08002be8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bec:	4b04      	ldr	r3, [pc, #16]	; (8002c00 <__NVIC_GetPriorityGrouping+0x18>)
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	0a1b      	lsrs	r3, r3, #8
 8002bf2:	f003 0307 	and.w	r3, r3, #7
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr
 8002c00:	e000ed00 	.word	0xe000ed00

08002c04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	db0b      	blt.n	8002c2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c16:	79fb      	ldrb	r3, [r7, #7]
 8002c18:	f003 021f 	and.w	r2, r3, #31
 8002c1c:	4907      	ldr	r1, [pc, #28]	; (8002c3c <__NVIC_EnableIRQ+0x38>)
 8002c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c22:	095b      	lsrs	r3, r3, #5
 8002c24:	2001      	movs	r0, #1
 8002c26:	fa00 f202 	lsl.w	r2, r0, r2
 8002c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c2e:	bf00      	nop
 8002c30:	370c      	adds	r7, #12
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
 8002c3a:	bf00      	nop
 8002c3c:	e000e100 	.word	0xe000e100

08002c40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	4603      	mov	r3, r0
 8002c48:	6039      	str	r1, [r7, #0]
 8002c4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	db0a      	blt.n	8002c6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	b2da      	uxtb	r2, r3
 8002c58:	490c      	ldr	r1, [pc, #48]	; (8002c8c <__NVIC_SetPriority+0x4c>)
 8002c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c5e:	0112      	lsls	r2, r2, #4
 8002c60:	b2d2      	uxtb	r2, r2
 8002c62:	440b      	add	r3, r1
 8002c64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c68:	e00a      	b.n	8002c80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	b2da      	uxtb	r2, r3
 8002c6e:	4908      	ldr	r1, [pc, #32]	; (8002c90 <__NVIC_SetPriority+0x50>)
 8002c70:	79fb      	ldrb	r3, [r7, #7]
 8002c72:	f003 030f 	and.w	r3, r3, #15
 8002c76:	3b04      	subs	r3, #4
 8002c78:	0112      	lsls	r2, r2, #4
 8002c7a:	b2d2      	uxtb	r2, r2
 8002c7c:	440b      	add	r3, r1
 8002c7e:	761a      	strb	r2, [r3, #24]
}
 8002c80:	bf00      	nop
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr
 8002c8c:	e000e100 	.word	0xe000e100
 8002c90:	e000ed00 	.word	0xe000ed00

08002c94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b089      	sub	sp, #36	; 0x24
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	60b9      	str	r1, [r7, #8]
 8002c9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f003 0307 	and.w	r3, r3, #7
 8002ca6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	f1c3 0307 	rsb	r3, r3, #7
 8002cae:	2b04      	cmp	r3, #4
 8002cb0:	bf28      	it	cs
 8002cb2:	2304      	movcs	r3, #4
 8002cb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	3304      	adds	r3, #4
 8002cba:	2b06      	cmp	r3, #6
 8002cbc:	d902      	bls.n	8002cc4 <NVIC_EncodePriority+0x30>
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	3b03      	subs	r3, #3
 8002cc2:	e000      	b.n	8002cc6 <NVIC_EncodePriority+0x32>
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd2:	43da      	mvns	r2, r3
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	401a      	ands	r2, r3
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cdc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ce6:	43d9      	mvns	r1, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cec:	4313      	orrs	r3, r2
         );
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3724      	adds	r7, #36	; 0x24
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
	...

08002cfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	3b01      	subs	r3, #1
 8002d08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d0c:	d301      	bcc.n	8002d12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e00f      	b.n	8002d32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d12:	4a0a      	ldr	r2, [pc, #40]	; (8002d3c <SysTick_Config+0x40>)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	3b01      	subs	r3, #1
 8002d18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d1a:	210f      	movs	r1, #15
 8002d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d20:	f7ff ff8e 	bl	8002c40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d24:	4b05      	ldr	r3, [pc, #20]	; (8002d3c <SysTick_Config+0x40>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d2a:	4b04      	ldr	r3, [pc, #16]	; (8002d3c <SysTick_Config+0x40>)
 8002d2c:	2207      	movs	r2, #7
 8002d2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3708      	adds	r7, #8
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	e000e010 	.word	0xe000e010

08002d40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f7ff ff29 	bl	8002ba0 <__NVIC_SetPriorityGrouping>
}
 8002d4e:	bf00      	nop
 8002d50:	3708      	adds	r7, #8
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}

08002d56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d56:	b580      	push	{r7, lr}
 8002d58:	b086      	sub	sp, #24
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	60b9      	str	r1, [r7, #8]
 8002d60:	607a      	str	r2, [r7, #4]
 8002d62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d64:	2300      	movs	r3, #0
 8002d66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d68:	f7ff ff3e 	bl	8002be8 <__NVIC_GetPriorityGrouping>
 8002d6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	68b9      	ldr	r1, [r7, #8]
 8002d72:	6978      	ldr	r0, [r7, #20]
 8002d74:	f7ff ff8e 	bl	8002c94 <NVIC_EncodePriority>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d7e:	4611      	mov	r1, r2
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7ff ff5d 	bl	8002c40 <__NVIC_SetPriority>
}
 8002d86:	bf00      	nop
 8002d88:	3718      	adds	r7, #24
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}

08002d8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d8e:	b580      	push	{r7, lr}
 8002d90:	b082      	sub	sp, #8
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	4603      	mov	r3, r0
 8002d96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7ff ff31 	bl	8002c04 <__NVIC_EnableIRQ>
}
 8002da2:	bf00      	nop
 8002da4:	3708      	adds	r7, #8
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}

08002daa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002daa:	b580      	push	{r7, lr}
 8002dac:	b082      	sub	sp, #8
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f7ff ffa2 	bl	8002cfc <SysTick_Config>
 8002db8:	4603      	mov	r3, r0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3708      	adds	r7, #8
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}

08002dc2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b084      	sub	sp, #16
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dce:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002dd0:	f7ff f8c2 	bl	8001f58 <HAL_GetTick>
 8002dd4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d008      	beq.n	8002df4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2280      	movs	r2, #128	; 0x80
 8002de6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e052      	b.n	8002e9a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f022 0216 	bic.w	r2, r2, #22
 8002e02:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	695a      	ldr	r2, [r3, #20]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e12:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d103      	bne.n	8002e24 <HAL_DMA_Abort+0x62>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d007      	beq.n	8002e34 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f022 0208 	bic.w	r2, r2, #8
 8002e32:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f022 0201 	bic.w	r2, r2, #1
 8002e42:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e44:	e013      	b.n	8002e6e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e46:	f7ff f887 	bl	8001f58 <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	2b05      	cmp	r3, #5
 8002e52:	d90c      	bls.n	8002e6e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2220      	movs	r2, #32
 8002e58:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2203      	movs	r2, #3
 8002e5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e015      	b.n	8002e9a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0301 	and.w	r3, r3, #1
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d1e4      	bne.n	8002e46 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e80:	223f      	movs	r2, #63	; 0x3f
 8002e82:	409a      	lsls	r2, r3
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3710      	adds	r7, #16
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}

08002ea2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ea2:	b480      	push	{r7}
 8002ea4:	b083      	sub	sp, #12
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d004      	beq.n	8002ec0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2280      	movs	r2, #128	; 0x80
 8002eba:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e00c      	b.n	8002eda <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2205      	movs	r2, #5
 8002ec4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f022 0201 	bic.w	r2, r2, #1
 8002ed6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	370c      	adds	r7, #12
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
	...

08002ee8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b089      	sub	sp, #36	; 0x24
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002efa:	2300      	movs	r3, #0
 8002efc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002efe:	2300      	movs	r3, #0
 8002f00:	61fb      	str	r3, [r7, #28]
 8002f02:	e165      	b.n	80031d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f04:	2201      	movs	r2, #1
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	697a      	ldr	r2, [r7, #20]
 8002f14:	4013      	ands	r3, r2
 8002f16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f18:	693a      	ldr	r2, [r7, #16]
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	f040 8154 	bne.w	80031ca <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f003 0303 	and.w	r3, r3, #3
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d005      	beq.n	8002f3a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d130      	bne.n	8002f9c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	2203      	movs	r2, #3
 8002f46:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4a:	43db      	mvns	r3, r3
 8002f4c:	69ba      	ldr	r2, [r7, #24]
 8002f4e:	4013      	ands	r3, r2
 8002f50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	68da      	ldr	r2, [r3, #12]
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	005b      	lsls	r3, r3, #1
 8002f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5e:	69ba      	ldr	r2, [r7, #24]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	69ba      	ldr	r2, [r7, #24]
 8002f68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f70:	2201      	movs	r2, #1
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	fa02 f303 	lsl.w	r3, r2, r3
 8002f78:	43db      	mvns	r3, r3
 8002f7a:	69ba      	ldr	r2, [r7, #24]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	091b      	lsrs	r3, r3, #4
 8002f86:	f003 0201 	and.w	r2, r3, #1
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f90:	69ba      	ldr	r2, [r7, #24]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	69ba      	ldr	r2, [r7, #24]
 8002f9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f003 0303 	and.w	r3, r3, #3
 8002fa4:	2b03      	cmp	r3, #3
 8002fa6:	d017      	beq.n	8002fd8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	005b      	lsls	r3, r3, #1
 8002fb2:	2203      	movs	r2, #3
 8002fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb8:	43db      	mvns	r3, r3
 8002fba:	69ba      	ldr	r2, [r7, #24]
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	689a      	ldr	r2, [r3, #8]
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	005b      	lsls	r3, r3, #1
 8002fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f003 0303 	and.w	r3, r3, #3
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d123      	bne.n	800302c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	08da      	lsrs	r2, r3, #3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	3208      	adds	r2, #8
 8002fec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	f003 0307 	and.w	r3, r3, #7
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	220f      	movs	r2, #15
 8002ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8003000:	43db      	mvns	r3, r3
 8003002:	69ba      	ldr	r2, [r7, #24]
 8003004:	4013      	ands	r3, r2
 8003006:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	691a      	ldr	r2, [r3, #16]
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	f003 0307 	and.w	r3, r3, #7
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	fa02 f303 	lsl.w	r3, r2, r3
 8003018:	69ba      	ldr	r2, [r7, #24]
 800301a:	4313      	orrs	r3, r2
 800301c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	08da      	lsrs	r2, r3, #3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	3208      	adds	r2, #8
 8003026:	69b9      	ldr	r1, [r7, #24]
 8003028:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	005b      	lsls	r3, r3, #1
 8003036:	2203      	movs	r2, #3
 8003038:	fa02 f303 	lsl.w	r3, r2, r3
 800303c:	43db      	mvns	r3, r3
 800303e:	69ba      	ldr	r2, [r7, #24]
 8003040:	4013      	ands	r3, r2
 8003042:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f003 0203 	and.w	r2, r3, #3
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	005b      	lsls	r3, r3, #1
 8003050:	fa02 f303 	lsl.w	r3, r2, r3
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	4313      	orrs	r3, r2
 8003058:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003068:	2b00      	cmp	r3, #0
 800306a:	f000 80ae 	beq.w	80031ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800306e:	2300      	movs	r3, #0
 8003070:	60fb      	str	r3, [r7, #12]
 8003072:	4b5d      	ldr	r3, [pc, #372]	; (80031e8 <HAL_GPIO_Init+0x300>)
 8003074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003076:	4a5c      	ldr	r2, [pc, #368]	; (80031e8 <HAL_GPIO_Init+0x300>)
 8003078:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800307c:	6453      	str	r3, [r2, #68]	; 0x44
 800307e:	4b5a      	ldr	r3, [pc, #360]	; (80031e8 <HAL_GPIO_Init+0x300>)
 8003080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003082:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003086:	60fb      	str	r3, [r7, #12]
 8003088:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800308a:	4a58      	ldr	r2, [pc, #352]	; (80031ec <HAL_GPIO_Init+0x304>)
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	089b      	lsrs	r3, r3, #2
 8003090:	3302      	adds	r3, #2
 8003092:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003096:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	f003 0303 	and.w	r3, r3, #3
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	220f      	movs	r2, #15
 80030a2:	fa02 f303 	lsl.w	r3, r2, r3
 80030a6:	43db      	mvns	r3, r3
 80030a8:	69ba      	ldr	r2, [r7, #24]
 80030aa:	4013      	ands	r3, r2
 80030ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a4f      	ldr	r2, [pc, #316]	; (80031f0 <HAL_GPIO_Init+0x308>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d025      	beq.n	8003102 <HAL_GPIO_Init+0x21a>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a4e      	ldr	r2, [pc, #312]	; (80031f4 <HAL_GPIO_Init+0x30c>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d01f      	beq.n	80030fe <HAL_GPIO_Init+0x216>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a4d      	ldr	r2, [pc, #308]	; (80031f8 <HAL_GPIO_Init+0x310>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d019      	beq.n	80030fa <HAL_GPIO_Init+0x212>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a4c      	ldr	r2, [pc, #304]	; (80031fc <HAL_GPIO_Init+0x314>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d013      	beq.n	80030f6 <HAL_GPIO_Init+0x20e>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a4b      	ldr	r2, [pc, #300]	; (8003200 <HAL_GPIO_Init+0x318>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d00d      	beq.n	80030f2 <HAL_GPIO_Init+0x20a>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a4a      	ldr	r2, [pc, #296]	; (8003204 <HAL_GPIO_Init+0x31c>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d007      	beq.n	80030ee <HAL_GPIO_Init+0x206>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a49      	ldr	r2, [pc, #292]	; (8003208 <HAL_GPIO_Init+0x320>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d101      	bne.n	80030ea <HAL_GPIO_Init+0x202>
 80030e6:	2306      	movs	r3, #6
 80030e8:	e00c      	b.n	8003104 <HAL_GPIO_Init+0x21c>
 80030ea:	2307      	movs	r3, #7
 80030ec:	e00a      	b.n	8003104 <HAL_GPIO_Init+0x21c>
 80030ee:	2305      	movs	r3, #5
 80030f0:	e008      	b.n	8003104 <HAL_GPIO_Init+0x21c>
 80030f2:	2304      	movs	r3, #4
 80030f4:	e006      	b.n	8003104 <HAL_GPIO_Init+0x21c>
 80030f6:	2303      	movs	r3, #3
 80030f8:	e004      	b.n	8003104 <HAL_GPIO_Init+0x21c>
 80030fa:	2302      	movs	r3, #2
 80030fc:	e002      	b.n	8003104 <HAL_GPIO_Init+0x21c>
 80030fe:	2301      	movs	r3, #1
 8003100:	e000      	b.n	8003104 <HAL_GPIO_Init+0x21c>
 8003102:	2300      	movs	r3, #0
 8003104:	69fa      	ldr	r2, [r7, #28]
 8003106:	f002 0203 	and.w	r2, r2, #3
 800310a:	0092      	lsls	r2, r2, #2
 800310c:	4093      	lsls	r3, r2
 800310e:	69ba      	ldr	r2, [r7, #24]
 8003110:	4313      	orrs	r3, r2
 8003112:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003114:	4935      	ldr	r1, [pc, #212]	; (80031ec <HAL_GPIO_Init+0x304>)
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	089b      	lsrs	r3, r3, #2
 800311a:	3302      	adds	r3, #2
 800311c:	69ba      	ldr	r2, [r7, #24]
 800311e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003122:	4b3a      	ldr	r3, [pc, #232]	; (800320c <HAL_GPIO_Init+0x324>)
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	43db      	mvns	r3, r3
 800312c:	69ba      	ldr	r2, [r7, #24]
 800312e:	4013      	ands	r3, r2
 8003130:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d003      	beq.n	8003146 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800313e:	69ba      	ldr	r2, [r7, #24]
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	4313      	orrs	r3, r2
 8003144:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003146:	4a31      	ldr	r2, [pc, #196]	; (800320c <HAL_GPIO_Init+0x324>)
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800314c:	4b2f      	ldr	r3, [pc, #188]	; (800320c <HAL_GPIO_Init+0x324>)
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	43db      	mvns	r3, r3
 8003156:	69ba      	ldr	r2, [r7, #24]
 8003158:	4013      	ands	r3, r2
 800315a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d003      	beq.n	8003170 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	4313      	orrs	r3, r2
 800316e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003170:	4a26      	ldr	r2, [pc, #152]	; (800320c <HAL_GPIO_Init+0x324>)
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003176:	4b25      	ldr	r3, [pc, #148]	; (800320c <HAL_GPIO_Init+0x324>)
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	43db      	mvns	r3, r3
 8003180:	69ba      	ldr	r2, [r7, #24]
 8003182:	4013      	ands	r3, r2
 8003184:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d003      	beq.n	800319a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003192:	69ba      	ldr	r2, [r7, #24]
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	4313      	orrs	r3, r2
 8003198:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800319a:	4a1c      	ldr	r2, [pc, #112]	; (800320c <HAL_GPIO_Init+0x324>)
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031a0:	4b1a      	ldr	r3, [pc, #104]	; (800320c <HAL_GPIO_Init+0x324>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	43db      	mvns	r3, r3
 80031aa:	69ba      	ldr	r2, [r7, #24]
 80031ac:	4013      	ands	r3, r2
 80031ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d003      	beq.n	80031c4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80031bc:	69ba      	ldr	r2, [r7, #24]
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031c4:	4a11      	ldr	r2, [pc, #68]	; (800320c <HAL_GPIO_Init+0x324>)
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	3301      	adds	r3, #1
 80031ce:	61fb      	str	r3, [r7, #28]
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	2b0f      	cmp	r3, #15
 80031d4:	f67f ae96 	bls.w	8002f04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031d8:	bf00      	nop
 80031da:	bf00      	nop
 80031dc:	3724      	adds	r7, #36	; 0x24
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr
 80031e6:	bf00      	nop
 80031e8:	40023800 	.word	0x40023800
 80031ec:	40013800 	.word	0x40013800
 80031f0:	40020000 	.word	0x40020000
 80031f4:	40020400 	.word	0x40020400
 80031f8:	40020800 	.word	0x40020800
 80031fc:	40020c00 	.word	0x40020c00
 8003200:	40021000 	.word	0x40021000
 8003204:	40021400 	.word	0x40021400
 8003208:	40021800 	.word	0x40021800
 800320c:	40013c00 	.word	0x40013c00

08003210 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003210:	b480      	push	{r7}
 8003212:	b085      	sub	sp, #20
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	460b      	mov	r3, r1
 800321a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	691a      	ldr	r2, [r3, #16]
 8003220:	887b      	ldrh	r3, [r7, #2]
 8003222:	4013      	ands	r3, r2
 8003224:	2b00      	cmp	r3, #0
 8003226:	d002      	beq.n	800322e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003228:	2301      	movs	r3, #1
 800322a:	73fb      	strb	r3, [r7, #15]
 800322c:	e001      	b.n	8003232 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800322e:	2300      	movs	r3, #0
 8003230:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003232:	7bfb      	ldrb	r3, [r7, #15]
}
 8003234:	4618      	mov	r0, r3
 8003236:	3714      	adds	r7, #20
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr

08003240 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	460b      	mov	r3, r1
 800324a:	807b      	strh	r3, [r7, #2]
 800324c:	4613      	mov	r3, r2
 800324e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003250:	787b      	ldrb	r3, [r7, #1]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d003      	beq.n	800325e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003256:	887a      	ldrh	r2, [r7, #2]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800325c:	e003      	b.n	8003266 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800325e:	887b      	ldrh	r3, [r7, #2]
 8003260:	041a      	lsls	r2, r3, #16
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	619a      	str	r2, [r3, #24]
}
 8003266:	bf00      	nop
 8003268:	370c      	adds	r7, #12
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
	...

08003274 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800327a:	2300      	movs	r3, #0
 800327c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800327e:	2300      	movs	r3, #0
 8003280:	603b      	str	r3, [r7, #0]
 8003282:	4b20      	ldr	r3, [pc, #128]	; (8003304 <HAL_PWREx_EnableOverDrive+0x90>)
 8003284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003286:	4a1f      	ldr	r2, [pc, #124]	; (8003304 <HAL_PWREx_EnableOverDrive+0x90>)
 8003288:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800328c:	6413      	str	r3, [r2, #64]	; 0x40
 800328e:	4b1d      	ldr	r3, [pc, #116]	; (8003304 <HAL_PWREx_EnableOverDrive+0x90>)
 8003290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003296:	603b      	str	r3, [r7, #0]
 8003298:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800329a:	4b1b      	ldr	r3, [pc, #108]	; (8003308 <HAL_PWREx_EnableOverDrive+0x94>)
 800329c:	2201      	movs	r2, #1
 800329e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032a0:	f7fe fe5a 	bl	8001f58 <HAL_GetTick>
 80032a4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80032a6:	e009      	b.n	80032bc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80032a8:	f7fe fe56 	bl	8001f58 <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032b6:	d901      	bls.n	80032bc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e01f      	b.n	80032fc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80032bc:	4b13      	ldr	r3, [pc, #76]	; (800330c <HAL_PWREx_EnableOverDrive+0x98>)
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032c8:	d1ee      	bne.n	80032a8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80032ca:	4b11      	ldr	r3, [pc, #68]	; (8003310 <HAL_PWREx_EnableOverDrive+0x9c>)
 80032cc:	2201      	movs	r2, #1
 80032ce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032d0:	f7fe fe42 	bl	8001f58 <HAL_GetTick>
 80032d4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80032d6:	e009      	b.n	80032ec <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80032d8:	f7fe fe3e 	bl	8001f58 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032e6:	d901      	bls.n	80032ec <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	e007      	b.n	80032fc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80032ec:	4b07      	ldr	r3, [pc, #28]	; (800330c <HAL_PWREx_EnableOverDrive+0x98>)
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032f8:	d1ee      	bne.n	80032d8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80032fa:	2300      	movs	r3, #0
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3708      	adds	r7, #8
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}
 8003304:	40023800 	.word	0x40023800
 8003308:	420e0040 	.word	0x420e0040
 800330c:	40007000 	.word	0x40007000
 8003310:	420e0044 	.word	0x420e0044

08003314 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d101      	bne.n	8003328 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e0cc      	b.n	80034c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003328:	4b68      	ldr	r3, [pc, #416]	; (80034cc <HAL_RCC_ClockConfig+0x1b8>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 030f 	and.w	r3, r3, #15
 8003330:	683a      	ldr	r2, [r7, #0]
 8003332:	429a      	cmp	r2, r3
 8003334:	d90c      	bls.n	8003350 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003336:	4b65      	ldr	r3, [pc, #404]	; (80034cc <HAL_RCC_ClockConfig+0x1b8>)
 8003338:	683a      	ldr	r2, [r7, #0]
 800333a:	b2d2      	uxtb	r2, r2
 800333c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800333e:	4b63      	ldr	r3, [pc, #396]	; (80034cc <HAL_RCC_ClockConfig+0x1b8>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 030f 	and.w	r3, r3, #15
 8003346:	683a      	ldr	r2, [r7, #0]
 8003348:	429a      	cmp	r2, r3
 800334a:	d001      	beq.n	8003350 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e0b8      	b.n	80034c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0302 	and.w	r3, r3, #2
 8003358:	2b00      	cmp	r3, #0
 800335a:	d020      	beq.n	800339e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0304 	and.w	r3, r3, #4
 8003364:	2b00      	cmp	r3, #0
 8003366:	d005      	beq.n	8003374 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003368:	4b59      	ldr	r3, [pc, #356]	; (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	4a58      	ldr	r2, [pc, #352]	; (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 800336e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003372:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0308 	and.w	r3, r3, #8
 800337c:	2b00      	cmp	r3, #0
 800337e:	d005      	beq.n	800338c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003380:	4b53      	ldr	r3, [pc, #332]	; (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	4a52      	ldr	r2, [pc, #328]	; (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003386:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800338a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800338c:	4b50      	ldr	r3, [pc, #320]	; (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	494d      	ldr	r1, [pc, #308]	; (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 800339a:	4313      	orrs	r3, r2
 800339c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0301 	and.w	r3, r3, #1
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d044      	beq.n	8003434 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d107      	bne.n	80033c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033b2:	4b47      	ldr	r3, [pc, #284]	; (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d119      	bne.n	80033f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e07f      	b.n	80034c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d003      	beq.n	80033d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033ce:	2b03      	cmp	r3, #3
 80033d0:	d107      	bne.n	80033e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033d2:	4b3f      	ldr	r3, [pc, #252]	; (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d109      	bne.n	80033f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e06f      	b.n	80034c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033e2:	4b3b      	ldr	r3, [pc, #236]	; (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0302 	and.w	r3, r3, #2
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d101      	bne.n	80033f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e067      	b.n	80034c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033f2:	4b37      	ldr	r3, [pc, #220]	; (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f023 0203 	bic.w	r2, r3, #3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	4934      	ldr	r1, [pc, #208]	; (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003400:	4313      	orrs	r3, r2
 8003402:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003404:	f7fe fda8 	bl	8001f58 <HAL_GetTick>
 8003408:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800340a:	e00a      	b.n	8003422 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800340c:	f7fe fda4 	bl	8001f58 <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	f241 3288 	movw	r2, #5000	; 0x1388
 800341a:	4293      	cmp	r3, r2
 800341c:	d901      	bls.n	8003422 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e04f      	b.n	80034c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003422:	4b2b      	ldr	r3, [pc, #172]	; (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f003 020c 	and.w	r2, r3, #12
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	429a      	cmp	r2, r3
 8003432:	d1eb      	bne.n	800340c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003434:	4b25      	ldr	r3, [pc, #148]	; (80034cc <HAL_RCC_ClockConfig+0x1b8>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 030f 	and.w	r3, r3, #15
 800343c:	683a      	ldr	r2, [r7, #0]
 800343e:	429a      	cmp	r2, r3
 8003440:	d20c      	bcs.n	800345c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003442:	4b22      	ldr	r3, [pc, #136]	; (80034cc <HAL_RCC_ClockConfig+0x1b8>)
 8003444:	683a      	ldr	r2, [r7, #0]
 8003446:	b2d2      	uxtb	r2, r2
 8003448:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800344a:	4b20      	ldr	r3, [pc, #128]	; (80034cc <HAL_RCC_ClockConfig+0x1b8>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 030f 	and.w	r3, r3, #15
 8003452:	683a      	ldr	r2, [r7, #0]
 8003454:	429a      	cmp	r2, r3
 8003456:	d001      	beq.n	800345c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e032      	b.n	80034c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0304 	and.w	r3, r3, #4
 8003464:	2b00      	cmp	r3, #0
 8003466:	d008      	beq.n	800347a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003468:	4b19      	ldr	r3, [pc, #100]	; (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	4916      	ldr	r1, [pc, #88]	; (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003476:	4313      	orrs	r3, r2
 8003478:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0308 	and.w	r3, r3, #8
 8003482:	2b00      	cmp	r3, #0
 8003484:	d009      	beq.n	800349a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003486:	4b12      	ldr	r3, [pc, #72]	; (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	00db      	lsls	r3, r3, #3
 8003494:	490e      	ldr	r1, [pc, #56]	; (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003496:	4313      	orrs	r3, r2
 8003498:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800349a:	f000 f855 	bl	8003548 <HAL_RCC_GetSysClockFreq>
 800349e:	4602      	mov	r2, r0
 80034a0:	4b0b      	ldr	r3, [pc, #44]	; (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	091b      	lsrs	r3, r3, #4
 80034a6:	f003 030f 	and.w	r3, r3, #15
 80034aa:	490a      	ldr	r1, [pc, #40]	; (80034d4 <HAL_RCC_ClockConfig+0x1c0>)
 80034ac:	5ccb      	ldrb	r3, [r1, r3]
 80034ae:	fa22 f303 	lsr.w	r3, r2, r3
 80034b2:	4a09      	ldr	r2, [pc, #36]	; (80034d8 <HAL_RCC_ClockConfig+0x1c4>)
 80034b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80034b6:	4b09      	ldr	r3, [pc, #36]	; (80034dc <HAL_RCC_ClockConfig+0x1c8>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7fe fd08 	bl	8001ed0 <HAL_InitTick>

  return HAL_OK;
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3710      	adds	r7, #16
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	40023c00 	.word	0x40023c00
 80034d0:	40023800 	.word	0x40023800
 80034d4:	08007488 	.word	0x08007488
 80034d8:	20000000 	.word	0x20000000
 80034dc:	20000004 	.word	0x20000004

080034e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034e0:	b480      	push	{r7}
 80034e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034e4:	4b03      	ldr	r3, [pc, #12]	; (80034f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80034e6:	681b      	ldr	r3, [r3, #0]
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop
 80034f4:	20000000 	.word	0x20000000

080034f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80034fc:	f7ff fff0 	bl	80034e0 <HAL_RCC_GetHCLKFreq>
 8003500:	4602      	mov	r2, r0
 8003502:	4b05      	ldr	r3, [pc, #20]	; (8003518 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	0a9b      	lsrs	r3, r3, #10
 8003508:	f003 0307 	and.w	r3, r3, #7
 800350c:	4903      	ldr	r1, [pc, #12]	; (800351c <HAL_RCC_GetPCLK1Freq+0x24>)
 800350e:	5ccb      	ldrb	r3, [r1, r3]
 8003510:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003514:	4618      	mov	r0, r3
 8003516:	bd80      	pop	{r7, pc}
 8003518:	40023800 	.word	0x40023800
 800351c:	08007498 	.word	0x08007498

08003520 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003524:	f7ff ffdc 	bl	80034e0 <HAL_RCC_GetHCLKFreq>
 8003528:	4602      	mov	r2, r0
 800352a:	4b05      	ldr	r3, [pc, #20]	; (8003540 <HAL_RCC_GetPCLK2Freq+0x20>)
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	0b5b      	lsrs	r3, r3, #13
 8003530:	f003 0307 	and.w	r3, r3, #7
 8003534:	4903      	ldr	r1, [pc, #12]	; (8003544 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003536:	5ccb      	ldrb	r3, [r1, r3]
 8003538:	fa22 f303 	lsr.w	r3, r2, r3
}
 800353c:	4618      	mov	r0, r3
 800353e:	bd80      	pop	{r7, pc}
 8003540:	40023800 	.word	0x40023800
 8003544:	08007498 	.word	0x08007498

08003548 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003548:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800354c:	b0ae      	sub	sp, #184	; 0xb8
 800354e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003550:	2300      	movs	r3, #0
 8003552:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003556:	2300      	movs	r3, #0
 8003558:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800355c:	2300      	movs	r3, #0
 800355e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003562:	2300      	movs	r3, #0
 8003564:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003568:	2300      	movs	r3, #0
 800356a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800356e:	4bcb      	ldr	r3, [pc, #812]	; (800389c <HAL_RCC_GetSysClockFreq+0x354>)
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	f003 030c 	and.w	r3, r3, #12
 8003576:	2b0c      	cmp	r3, #12
 8003578:	f200 8206 	bhi.w	8003988 <HAL_RCC_GetSysClockFreq+0x440>
 800357c:	a201      	add	r2, pc, #4	; (adr r2, 8003584 <HAL_RCC_GetSysClockFreq+0x3c>)
 800357e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003582:	bf00      	nop
 8003584:	080035b9 	.word	0x080035b9
 8003588:	08003989 	.word	0x08003989
 800358c:	08003989 	.word	0x08003989
 8003590:	08003989 	.word	0x08003989
 8003594:	080035c1 	.word	0x080035c1
 8003598:	08003989 	.word	0x08003989
 800359c:	08003989 	.word	0x08003989
 80035a0:	08003989 	.word	0x08003989
 80035a4:	080035c9 	.word	0x080035c9
 80035a8:	08003989 	.word	0x08003989
 80035ac:	08003989 	.word	0x08003989
 80035b0:	08003989 	.word	0x08003989
 80035b4:	080037b9 	.word	0x080037b9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035b8:	4bb9      	ldr	r3, [pc, #740]	; (80038a0 <HAL_RCC_GetSysClockFreq+0x358>)
 80035ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80035be:	e1e7      	b.n	8003990 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035c0:	4bb8      	ldr	r3, [pc, #736]	; (80038a4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80035c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80035c6:	e1e3      	b.n	8003990 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035c8:	4bb4      	ldr	r3, [pc, #720]	; (800389c <HAL_RCC_GetSysClockFreq+0x354>)
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035d4:	4bb1      	ldr	r3, [pc, #708]	; (800389c <HAL_RCC_GetSysClockFreq+0x354>)
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d071      	beq.n	80036c4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035e0:	4bae      	ldr	r3, [pc, #696]	; (800389c <HAL_RCC_GetSysClockFreq+0x354>)
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	099b      	lsrs	r3, r3, #6
 80035e6:	2200      	movs	r2, #0
 80035e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80035ec:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80035f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80035f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80035fc:	2300      	movs	r3, #0
 80035fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003602:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003606:	4622      	mov	r2, r4
 8003608:	462b      	mov	r3, r5
 800360a:	f04f 0000 	mov.w	r0, #0
 800360e:	f04f 0100 	mov.w	r1, #0
 8003612:	0159      	lsls	r1, r3, #5
 8003614:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003618:	0150      	lsls	r0, r2, #5
 800361a:	4602      	mov	r2, r0
 800361c:	460b      	mov	r3, r1
 800361e:	4621      	mov	r1, r4
 8003620:	1a51      	subs	r1, r2, r1
 8003622:	6439      	str	r1, [r7, #64]	; 0x40
 8003624:	4629      	mov	r1, r5
 8003626:	eb63 0301 	sbc.w	r3, r3, r1
 800362a:	647b      	str	r3, [r7, #68]	; 0x44
 800362c:	f04f 0200 	mov.w	r2, #0
 8003630:	f04f 0300 	mov.w	r3, #0
 8003634:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003638:	4649      	mov	r1, r9
 800363a:	018b      	lsls	r3, r1, #6
 800363c:	4641      	mov	r1, r8
 800363e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003642:	4641      	mov	r1, r8
 8003644:	018a      	lsls	r2, r1, #6
 8003646:	4641      	mov	r1, r8
 8003648:	1a51      	subs	r1, r2, r1
 800364a:	63b9      	str	r1, [r7, #56]	; 0x38
 800364c:	4649      	mov	r1, r9
 800364e:	eb63 0301 	sbc.w	r3, r3, r1
 8003652:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003654:	f04f 0200 	mov.w	r2, #0
 8003658:	f04f 0300 	mov.w	r3, #0
 800365c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003660:	4649      	mov	r1, r9
 8003662:	00cb      	lsls	r3, r1, #3
 8003664:	4641      	mov	r1, r8
 8003666:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800366a:	4641      	mov	r1, r8
 800366c:	00ca      	lsls	r2, r1, #3
 800366e:	4610      	mov	r0, r2
 8003670:	4619      	mov	r1, r3
 8003672:	4603      	mov	r3, r0
 8003674:	4622      	mov	r2, r4
 8003676:	189b      	adds	r3, r3, r2
 8003678:	633b      	str	r3, [r7, #48]	; 0x30
 800367a:	462b      	mov	r3, r5
 800367c:	460a      	mov	r2, r1
 800367e:	eb42 0303 	adc.w	r3, r2, r3
 8003682:	637b      	str	r3, [r7, #52]	; 0x34
 8003684:	f04f 0200 	mov.w	r2, #0
 8003688:	f04f 0300 	mov.w	r3, #0
 800368c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003690:	4629      	mov	r1, r5
 8003692:	024b      	lsls	r3, r1, #9
 8003694:	4621      	mov	r1, r4
 8003696:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800369a:	4621      	mov	r1, r4
 800369c:	024a      	lsls	r2, r1, #9
 800369e:	4610      	mov	r0, r2
 80036a0:	4619      	mov	r1, r3
 80036a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80036a6:	2200      	movs	r2, #0
 80036a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80036ac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80036b0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80036b4:	f7fd f9f2 	bl	8000a9c <__aeabi_uldivmod>
 80036b8:	4602      	mov	r2, r0
 80036ba:	460b      	mov	r3, r1
 80036bc:	4613      	mov	r3, r2
 80036be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80036c2:	e067      	b.n	8003794 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036c4:	4b75      	ldr	r3, [pc, #468]	; (800389c <HAL_RCC_GetSysClockFreq+0x354>)
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	099b      	lsrs	r3, r3, #6
 80036ca:	2200      	movs	r2, #0
 80036cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80036d0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80036d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80036d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036dc:	67bb      	str	r3, [r7, #120]	; 0x78
 80036de:	2300      	movs	r3, #0
 80036e0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80036e2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80036e6:	4622      	mov	r2, r4
 80036e8:	462b      	mov	r3, r5
 80036ea:	f04f 0000 	mov.w	r0, #0
 80036ee:	f04f 0100 	mov.w	r1, #0
 80036f2:	0159      	lsls	r1, r3, #5
 80036f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036f8:	0150      	lsls	r0, r2, #5
 80036fa:	4602      	mov	r2, r0
 80036fc:	460b      	mov	r3, r1
 80036fe:	4621      	mov	r1, r4
 8003700:	1a51      	subs	r1, r2, r1
 8003702:	62b9      	str	r1, [r7, #40]	; 0x28
 8003704:	4629      	mov	r1, r5
 8003706:	eb63 0301 	sbc.w	r3, r3, r1
 800370a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800370c:	f04f 0200 	mov.w	r2, #0
 8003710:	f04f 0300 	mov.w	r3, #0
 8003714:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003718:	4649      	mov	r1, r9
 800371a:	018b      	lsls	r3, r1, #6
 800371c:	4641      	mov	r1, r8
 800371e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003722:	4641      	mov	r1, r8
 8003724:	018a      	lsls	r2, r1, #6
 8003726:	4641      	mov	r1, r8
 8003728:	ebb2 0a01 	subs.w	sl, r2, r1
 800372c:	4649      	mov	r1, r9
 800372e:	eb63 0b01 	sbc.w	fp, r3, r1
 8003732:	f04f 0200 	mov.w	r2, #0
 8003736:	f04f 0300 	mov.w	r3, #0
 800373a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800373e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003742:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003746:	4692      	mov	sl, r2
 8003748:	469b      	mov	fp, r3
 800374a:	4623      	mov	r3, r4
 800374c:	eb1a 0303 	adds.w	r3, sl, r3
 8003750:	623b      	str	r3, [r7, #32]
 8003752:	462b      	mov	r3, r5
 8003754:	eb4b 0303 	adc.w	r3, fp, r3
 8003758:	627b      	str	r3, [r7, #36]	; 0x24
 800375a:	f04f 0200 	mov.w	r2, #0
 800375e:	f04f 0300 	mov.w	r3, #0
 8003762:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003766:	4629      	mov	r1, r5
 8003768:	028b      	lsls	r3, r1, #10
 800376a:	4621      	mov	r1, r4
 800376c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003770:	4621      	mov	r1, r4
 8003772:	028a      	lsls	r2, r1, #10
 8003774:	4610      	mov	r0, r2
 8003776:	4619      	mov	r1, r3
 8003778:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800377c:	2200      	movs	r2, #0
 800377e:	673b      	str	r3, [r7, #112]	; 0x70
 8003780:	677a      	str	r2, [r7, #116]	; 0x74
 8003782:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003786:	f7fd f989 	bl	8000a9c <__aeabi_uldivmod>
 800378a:	4602      	mov	r2, r0
 800378c:	460b      	mov	r3, r1
 800378e:	4613      	mov	r3, r2
 8003790:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003794:	4b41      	ldr	r3, [pc, #260]	; (800389c <HAL_RCC_GetSysClockFreq+0x354>)
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	0c1b      	lsrs	r3, r3, #16
 800379a:	f003 0303 	and.w	r3, r3, #3
 800379e:	3301      	adds	r3, #1
 80037a0:	005b      	lsls	r3, r3, #1
 80037a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80037a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80037aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80037ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80037b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80037b6:	e0eb      	b.n	8003990 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037b8:	4b38      	ldr	r3, [pc, #224]	; (800389c <HAL_RCC_GetSysClockFreq+0x354>)
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037c4:	4b35      	ldr	r3, [pc, #212]	; (800389c <HAL_RCC_GetSysClockFreq+0x354>)
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d06b      	beq.n	80038a8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037d0:	4b32      	ldr	r3, [pc, #200]	; (800389c <HAL_RCC_GetSysClockFreq+0x354>)
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	099b      	lsrs	r3, r3, #6
 80037d6:	2200      	movs	r2, #0
 80037d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80037da:	66fa      	str	r2, [r7, #108]	; 0x6c
 80037dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80037de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037e2:	663b      	str	r3, [r7, #96]	; 0x60
 80037e4:	2300      	movs	r3, #0
 80037e6:	667b      	str	r3, [r7, #100]	; 0x64
 80037e8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80037ec:	4622      	mov	r2, r4
 80037ee:	462b      	mov	r3, r5
 80037f0:	f04f 0000 	mov.w	r0, #0
 80037f4:	f04f 0100 	mov.w	r1, #0
 80037f8:	0159      	lsls	r1, r3, #5
 80037fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037fe:	0150      	lsls	r0, r2, #5
 8003800:	4602      	mov	r2, r0
 8003802:	460b      	mov	r3, r1
 8003804:	4621      	mov	r1, r4
 8003806:	1a51      	subs	r1, r2, r1
 8003808:	61b9      	str	r1, [r7, #24]
 800380a:	4629      	mov	r1, r5
 800380c:	eb63 0301 	sbc.w	r3, r3, r1
 8003810:	61fb      	str	r3, [r7, #28]
 8003812:	f04f 0200 	mov.w	r2, #0
 8003816:	f04f 0300 	mov.w	r3, #0
 800381a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800381e:	4659      	mov	r1, fp
 8003820:	018b      	lsls	r3, r1, #6
 8003822:	4651      	mov	r1, sl
 8003824:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003828:	4651      	mov	r1, sl
 800382a:	018a      	lsls	r2, r1, #6
 800382c:	4651      	mov	r1, sl
 800382e:	ebb2 0801 	subs.w	r8, r2, r1
 8003832:	4659      	mov	r1, fp
 8003834:	eb63 0901 	sbc.w	r9, r3, r1
 8003838:	f04f 0200 	mov.w	r2, #0
 800383c:	f04f 0300 	mov.w	r3, #0
 8003840:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003844:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003848:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800384c:	4690      	mov	r8, r2
 800384e:	4699      	mov	r9, r3
 8003850:	4623      	mov	r3, r4
 8003852:	eb18 0303 	adds.w	r3, r8, r3
 8003856:	613b      	str	r3, [r7, #16]
 8003858:	462b      	mov	r3, r5
 800385a:	eb49 0303 	adc.w	r3, r9, r3
 800385e:	617b      	str	r3, [r7, #20]
 8003860:	f04f 0200 	mov.w	r2, #0
 8003864:	f04f 0300 	mov.w	r3, #0
 8003868:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800386c:	4629      	mov	r1, r5
 800386e:	024b      	lsls	r3, r1, #9
 8003870:	4621      	mov	r1, r4
 8003872:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003876:	4621      	mov	r1, r4
 8003878:	024a      	lsls	r2, r1, #9
 800387a:	4610      	mov	r0, r2
 800387c:	4619      	mov	r1, r3
 800387e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003882:	2200      	movs	r2, #0
 8003884:	65bb      	str	r3, [r7, #88]	; 0x58
 8003886:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003888:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800388c:	f7fd f906 	bl	8000a9c <__aeabi_uldivmod>
 8003890:	4602      	mov	r2, r0
 8003892:	460b      	mov	r3, r1
 8003894:	4613      	mov	r3, r2
 8003896:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800389a:	e065      	b.n	8003968 <HAL_RCC_GetSysClockFreq+0x420>
 800389c:	40023800 	.word	0x40023800
 80038a0:	00f42400 	.word	0x00f42400
 80038a4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038a8:	4b3d      	ldr	r3, [pc, #244]	; (80039a0 <HAL_RCC_GetSysClockFreq+0x458>)
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	099b      	lsrs	r3, r3, #6
 80038ae:	2200      	movs	r2, #0
 80038b0:	4618      	mov	r0, r3
 80038b2:	4611      	mov	r1, r2
 80038b4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80038b8:	653b      	str	r3, [r7, #80]	; 0x50
 80038ba:	2300      	movs	r3, #0
 80038bc:	657b      	str	r3, [r7, #84]	; 0x54
 80038be:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80038c2:	4642      	mov	r2, r8
 80038c4:	464b      	mov	r3, r9
 80038c6:	f04f 0000 	mov.w	r0, #0
 80038ca:	f04f 0100 	mov.w	r1, #0
 80038ce:	0159      	lsls	r1, r3, #5
 80038d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038d4:	0150      	lsls	r0, r2, #5
 80038d6:	4602      	mov	r2, r0
 80038d8:	460b      	mov	r3, r1
 80038da:	4641      	mov	r1, r8
 80038dc:	1a51      	subs	r1, r2, r1
 80038de:	60b9      	str	r1, [r7, #8]
 80038e0:	4649      	mov	r1, r9
 80038e2:	eb63 0301 	sbc.w	r3, r3, r1
 80038e6:	60fb      	str	r3, [r7, #12]
 80038e8:	f04f 0200 	mov.w	r2, #0
 80038ec:	f04f 0300 	mov.w	r3, #0
 80038f0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80038f4:	4659      	mov	r1, fp
 80038f6:	018b      	lsls	r3, r1, #6
 80038f8:	4651      	mov	r1, sl
 80038fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80038fe:	4651      	mov	r1, sl
 8003900:	018a      	lsls	r2, r1, #6
 8003902:	4651      	mov	r1, sl
 8003904:	1a54      	subs	r4, r2, r1
 8003906:	4659      	mov	r1, fp
 8003908:	eb63 0501 	sbc.w	r5, r3, r1
 800390c:	f04f 0200 	mov.w	r2, #0
 8003910:	f04f 0300 	mov.w	r3, #0
 8003914:	00eb      	lsls	r3, r5, #3
 8003916:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800391a:	00e2      	lsls	r2, r4, #3
 800391c:	4614      	mov	r4, r2
 800391e:	461d      	mov	r5, r3
 8003920:	4643      	mov	r3, r8
 8003922:	18e3      	adds	r3, r4, r3
 8003924:	603b      	str	r3, [r7, #0]
 8003926:	464b      	mov	r3, r9
 8003928:	eb45 0303 	adc.w	r3, r5, r3
 800392c:	607b      	str	r3, [r7, #4]
 800392e:	f04f 0200 	mov.w	r2, #0
 8003932:	f04f 0300 	mov.w	r3, #0
 8003936:	e9d7 4500 	ldrd	r4, r5, [r7]
 800393a:	4629      	mov	r1, r5
 800393c:	028b      	lsls	r3, r1, #10
 800393e:	4621      	mov	r1, r4
 8003940:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003944:	4621      	mov	r1, r4
 8003946:	028a      	lsls	r2, r1, #10
 8003948:	4610      	mov	r0, r2
 800394a:	4619      	mov	r1, r3
 800394c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003950:	2200      	movs	r2, #0
 8003952:	64bb      	str	r3, [r7, #72]	; 0x48
 8003954:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003956:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800395a:	f7fd f89f 	bl	8000a9c <__aeabi_uldivmod>
 800395e:	4602      	mov	r2, r0
 8003960:	460b      	mov	r3, r1
 8003962:	4613      	mov	r3, r2
 8003964:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003968:	4b0d      	ldr	r3, [pc, #52]	; (80039a0 <HAL_RCC_GetSysClockFreq+0x458>)
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	0f1b      	lsrs	r3, r3, #28
 800396e:	f003 0307 	and.w	r3, r3, #7
 8003972:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003976:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800397a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800397e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003982:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003986:	e003      	b.n	8003990 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003988:	4b06      	ldr	r3, [pc, #24]	; (80039a4 <HAL_RCC_GetSysClockFreq+0x45c>)
 800398a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800398e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003990:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003994:	4618      	mov	r0, r3
 8003996:	37b8      	adds	r7, #184	; 0xb8
 8003998:	46bd      	mov	sp, r7
 800399a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800399e:	bf00      	nop
 80039a0:	40023800 	.word	0x40023800
 80039a4:	00f42400 	.word	0x00f42400

080039a8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b086      	sub	sp, #24
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d101      	bne.n	80039ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e28d      	b.n	8003ed6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0301 	and.w	r3, r3, #1
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	f000 8083 	beq.w	8003ace <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80039c8:	4b94      	ldr	r3, [pc, #592]	; (8003c1c <HAL_RCC_OscConfig+0x274>)
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	f003 030c 	and.w	r3, r3, #12
 80039d0:	2b04      	cmp	r3, #4
 80039d2:	d019      	beq.n	8003a08 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80039d4:	4b91      	ldr	r3, [pc, #580]	; (8003c1c <HAL_RCC_OscConfig+0x274>)
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80039dc:	2b08      	cmp	r3, #8
 80039de:	d106      	bne.n	80039ee <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80039e0:	4b8e      	ldr	r3, [pc, #568]	; (8003c1c <HAL_RCC_OscConfig+0x274>)
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039ec:	d00c      	beq.n	8003a08 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039ee:	4b8b      	ldr	r3, [pc, #556]	; (8003c1c <HAL_RCC_OscConfig+0x274>)
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80039f6:	2b0c      	cmp	r3, #12
 80039f8:	d112      	bne.n	8003a20 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039fa:	4b88      	ldr	r3, [pc, #544]	; (8003c1c <HAL_RCC_OscConfig+0x274>)
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a06:	d10b      	bne.n	8003a20 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a08:	4b84      	ldr	r3, [pc, #528]	; (8003c1c <HAL_RCC_OscConfig+0x274>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d05b      	beq.n	8003acc <HAL_RCC_OscConfig+0x124>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d157      	bne.n	8003acc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e25a      	b.n	8003ed6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a28:	d106      	bne.n	8003a38 <HAL_RCC_OscConfig+0x90>
 8003a2a:	4b7c      	ldr	r3, [pc, #496]	; (8003c1c <HAL_RCC_OscConfig+0x274>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a7b      	ldr	r2, [pc, #492]	; (8003c1c <HAL_RCC_OscConfig+0x274>)
 8003a30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a34:	6013      	str	r3, [r2, #0]
 8003a36:	e01d      	b.n	8003a74 <HAL_RCC_OscConfig+0xcc>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a40:	d10c      	bne.n	8003a5c <HAL_RCC_OscConfig+0xb4>
 8003a42:	4b76      	ldr	r3, [pc, #472]	; (8003c1c <HAL_RCC_OscConfig+0x274>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a75      	ldr	r2, [pc, #468]	; (8003c1c <HAL_RCC_OscConfig+0x274>)
 8003a48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a4c:	6013      	str	r3, [r2, #0]
 8003a4e:	4b73      	ldr	r3, [pc, #460]	; (8003c1c <HAL_RCC_OscConfig+0x274>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a72      	ldr	r2, [pc, #456]	; (8003c1c <HAL_RCC_OscConfig+0x274>)
 8003a54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a58:	6013      	str	r3, [r2, #0]
 8003a5a:	e00b      	b.n	8003a74 <HAL_RCC_OscConfig+0xcc>
 8003a5c:	4b6f      	ldr	r3, [pc, #444]	; (8003c1c <HAL_RCC_OscConfig+0x274>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a6e      	ldr	r2, [pc, #440]	; (8003c1c <HAL_RCC_OscConfig+0x274>)
 8003a62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a66:	6013      	str	r3, [r2, #0]
 8003a68:	4b6c      	ldr	r3, [pc, #432]	; (8003c1c <HAL_RCC_OscConfig+0x274>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a6b      	ldr	r2, [pc, #428]	; (8003c1c <HAL_RCC_OscConfig+0x274>)
 8003a6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d013      	beq.n	8003aa4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a7c:	f7fe fa6c 	bl	8001f58 <HAL_GetTick>
 8003a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a82:	e008      	b.n	8003a96 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a84:	f7fe fa68 	bl	8001f58 <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	2b64      	cmp	r3, #100	; 0x64
 8003a90:	d901      	bls.n	8003a96 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e21f      	b.n	8003ed6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a96:	4b61      	ldr	r3, [pc, #388]	; (8003c1c <HAL_RCC_OscConfig+0x274>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d0f0      	beq.n	8003a84 <HAL_RCC_OscConfig+0xdc>
 8003aa2:	e014      	b.n	8003ace <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa4:	f7fe fa58 	bl	8001f58 <HAL_GetTick>
 8003aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003aaa:	e008      	b.n	8003abe <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003aac:	f7fe fa54 	bl	8001f58 <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	2b64      	cmp	r3, #100	; 0x64
 8003ab8:	d901      	bls.n	8003abe <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e20b      	b.n	8003ed6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003abe:	4b57      	ldr	r3, [pc, #348]	; (8003c1c <HAL_RCC_OscConfig+0x274>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d1f0      	bne.n	8003aac <HAL_RCC_OscConfig+0x104>
 8003aca:	e000      	b.n	8003ace <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003acc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0302 	and.w	r3, r3, #2
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d06f      	beq.n	8003bba <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003ada:	4b50      	ldr	r3, [pc, #320]	; (8003c1c <HAL_RCC_OscConfig+0x274>)
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f003 030c 	and.w	r3, r3, #12
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d017      	beq.n	8003b16 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003ae6:	4b4d      	ldr	r3, [pc, #308]	; (8003c1c <HAL_RCC_OscConfig+0x274>)
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003aee:	2b08      	cmp	r3, #8
 8003af0:	d105      	bne.n	8003afe <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003af2:	4b4a      	ldr	r3, [pc, #296]	; (8003c1c <HAL_RCC_OscConfig+0x274>)
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d00b      	beq.n	8003b16 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003afe:	4b47      	ldr	r3, [pc, #284]	; (8003c1c <HAL_RCC_OscConfig+0x274>)
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003b06:	2b0c      	cmp	r3, #12
 8003b08:	d11c      	bne.n	8003b44 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b0a:	4b44      	ldr	r3, [pc, #272]	; (8003c1c <HAL_RCC_OscConfig+0x274>)
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d116      	bne.n	8003b44 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b16:	4b41      	ldr	r3, [pc, #260]	; (8003c1c <HAL_RCC_OscConfig+0x274>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0302 	and.w	r3, r3, #2
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d005      	beq.n	8003b2e <HAL_RCC_OscConfig+0x186>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d001      	beq.n	8003b2e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e1d3      	b.n	8003ed6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b2e:	4b3b      	ldr	r3, [pc, #236]	; (8003c1c <HAL_RCC_OscConfig+0x274>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	00db      	lsls	r3, r3, #3
 8003b3c:	4937      	ldr	r1, [pc, #220]	; (8003c1c <HAL_RCC_OscConfig+0x274>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b42:	e03a      	b.n	8003bba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d020      	beq.n	8003b8e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b4c:	4b34      	ldr	r3, [pc, #208]	; (8003c20 <HAL_RCC_OscConfig+0x278>)
 8003b4e:	2201      	movs	r2, #1
 8003b50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b52:	f7fe fa01 	bl	8001f58 <HAL_GetTick>
 8003b56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b58:	e008      	b.n	8003b6c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b5a:	f7fe f9fd 	bl	8001f58 <HAL_GetTick>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d901      	bls.n	8003b6c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	e1b4      	b.n	8003ed6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b6c:	4b2b      	ldr	r3, [pc, #172]	; (8003c1c <HAL_RCC_OscConfig+0x274>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0302 	and.w	r3, r3, #2
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d0f0      	beq.n	8003b5a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b78:	4b28      	ldr	r3, [pc, #160]	; (8003c1c <HAL_RCC_OscConfig+0x274>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	691b      	ldr	r3, [r3, #16]
 8003b84:	00db      	lsls	r3, r3, #3
 8003b86:	4925      	ldr	r1, [pc, #148]	; (8003c1c <HAL_RCC_OscConfig+0x274>)
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	600b      	str	r3, [r1, #0]
 8003b8c:	e015      	b.n	8003bba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b8e:	4b24      	ldr	r3, [pc, #144]	; (8003c20 <HAL_RCC_OscConfig+0x278>)
 8003b90:	2200      	movs	r2, #0
 8003b92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b94:	f7fe f9e0 	bl	8001f58 <HAL_GetTick>
 8003b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b9a:	e008      	b.n	8003bae <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b9c:	f7fe f9dc 	bl	8001f58 <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d901      	bls.n	8003bae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e193      	b.n	8003ed6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bae:	4b1b      	ldr	r3, [pc, #108]	; (8003c1c <HAL_RCC_OscConfig+0x274>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0302 	and.w	r3, r3, #2
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d1f0      	bne.n	8003b9c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0308 	and.w	r3, r3, #8
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d036      	beq.n	8003c34 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	695b      	ldr	r3, [r3, #20]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d016      	beq.n	8003bfc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bce:	4b15      	ldr	r3, [pc, #84]	; (8003c24 <HAL_RCC_OscConfig+0x27c>)
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bd4:	f7fe f9c0 	bl	8001f58 <HAL_GetTick>
 8003bd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bda:	e008      	b.n	8003bee <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bdc:	f7fe f9bc 	bl	8001f58 <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d901      	bls.n	8003bee <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e173      	b.n	8003ed6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bee:	4b0b      	ldr	r3, [pc, #44]	; (8003c1c <HAL_RCC_OscConfig+0x274>)
 8003bf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bf2:	f003 0302 	and.w	r3, r3, #2
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d0f0      	beq.n	8003bdc <HAL_RCC_OscConfig+0x234>
 8003bfa:	e01b      	b.n	8003c34 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bfc:	4b09      	ldr	r3, [pc, #36]	; (8003c24 <HAL_RCC_OscConfig+0x27c>)
 8003bfe:	2200      	movs	r2, #0
 8003c00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c02:	f7fe f9a9 	bl	8001f58 <HAL_GetTick>
 8003c06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c08:	e00e      	b.n	8003c28 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c0a:	f7fe f9a5 	bl	8001f58 <HAL_GetTick>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d907      	bls.n	8003c28 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e15c      	b.n	8003ed6 <HAL_RCC_OscConfig+0x52e>
 8003c1c:	40023800 	.word	0x40023800
 8003c20:	42470000 	.word	0x42470000
 8003c24:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c28:	4b8a      	ldr	r3, [pc, #552]	; (8003e54 <HAL_RCC_OscConfig+0x4ac>)
 8003c2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c2c:	f003 0302 	and.w	r3, r3, #2
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d1ea      	bne.n	8003c0a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0304 	and.w	r3, r3, #4
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	f000 8097 	beq.w	8003d70 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c42:	2300      	movs	r3, #0
 8003c44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c46:	4b83      	ldr	r3, [pc, #524]	; (8003e54 <HAL_RCC_OscConfig+0x4ac>)
 8003c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d10f      	bne.n	8003c72 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c52:	2300      	movs	r3, #0
 8003c54:	60bb      	str	r3, [r7, #8]
 8003c56:	4b7f      	ldr	r3, [pc, #508]	; (8003e54 <HAL_RCC_OscConfig+0x4ac>)
 8003c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5a:	4a7e      	ldr	r2, [pc, #504]	; (8003e54 <HAL_RCC_OscConfig+0x4ac>)
 8003c5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c60:	6413      	str	r3, [r2, #64]	; 0x40
 8003c62:	4b7c      	ldr	r3, [pc, #496]	; (8003e54 <HAL_RCC_OscConfig+0x4ac>)
 8003c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c6a:	60bb      	str	r3, [r7, #8]
 8003c6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c72:	4b79      	ldr	r3, [pc, #484]	; (8003e58 <HAL_RCC_OscConfig+0x4b0>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d118      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c7e:	4b76      	ldr	r3, [pc, #472]	; (8003e58 <HAL_RCC_OscConfig+0x4b0>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a75      	ldr	r2, [pc, #468]	; (8003e58 <HAL_RCC_OscConfig+0x4b0>)
 8003c84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c8a:	f7fe f965 	bl	8001f58 <HAL_GetTick>
 8003c8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c90:	e008      	b.n	8003ca4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c92:	f7fe f961 	bl	8001f58 <HAL_GetTick>
 8003c96:	4602      	mov	r2, r0
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	2b02      	cmp	r3, #2
 8003c9e:	d901      	bls.n	8003ca4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003ca0:	2303      	movs	r3, #3
 8003ca2:	e118      	b.n	8003ed6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ca4:	4b6c      	ldr	r3, [pc, #432]	; (8003e58 <HAL_RCC_OscConfig+0x4b0>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d0f0      	beq.n	8003c92 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d106      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x31e>
 8003cb8:	4b66      	ldr	r3, [pc, #408]	; (8003e54 <HAL_RCC_OscConfig+0x4ac>)
 8003cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cbc:	4a65      	ldr	r2, [pc, #404]	; (8003e54 <HAL_RCC_OscConfig+0x4ac>)
 8003cbe:	f043 0301 	orr.w	r3, r3, #1
 8003cc2:	6713      	str	r3, [r2, #112]	; 0x70
 8003cc4:	e01c      	b.n	8003d00 <HAL_RCC_OscConfig+0x358>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	2b05      	cmp	r3, #5
 8003ccc:	d10c      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x340>
 8003cce:	4b61      	ldr	r3, [pc, #388]	; (8003e54 <HAL_RCC_OscConfig+0x4ac>)
 8003cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cd2:	4a60      	ldr	r2, [pc, #384]	; (8003e54 <HAL_RCC_OscConfig+0x4ac>)
 8003cd4:	f043 0304 	orr.w	r3, r3, #4
 8003cd8:	6713      	str	r3, [r2, #112]	; 0x70
 8003cda:	4b5e      	ldr	r3, [pc, #376]	; (8003e54 <HAL_RCC_OscConfig+0x4ac>)
 8003cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cde:	4a5d      	ldr	r2, [pc, #372]	; (8003e54 <HAL_RCC_OscConfig+0x4ac>)
 8003ce0:	f043 0301 	orr.w	r3, r3, #1
 8003ce4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ce6:	e00b      	b.n	8003d00 <HAL_RCC_OscConfig+0x358>
 8003ce8:	4b5a      	ldr	r3, [pc, #360]	; (8003e54 <HAL_RCC_OscConfig+0x4ac>)
 8003cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cec:	4a59      	ldr	r2, [pc, #356]	; (8003e54 <HAL_RCC_OscConfig+0x4ac>)
 8003cee:	f023 0301 	bic.w	r3, r3, #1
 8003cf2:	6713      	str	r3, [r2, #112]	; 0x70
 8003cf4:	4b57      	ldr	r3, [pc, #348]	; (8003e54 <HAL_RCC_OscConfig+0x4ac>)
 8003cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf8:	4a56      	ldr	r2, [pc, #344]	; (8003e54 <HAL_RCC_OscConfig+0x4ac>)
 8003cfa:	f023 0304 	bic.w	r3, r3, #4
 8003cfe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d015      	beq.n	8003d34 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d08:	f7fe f926 	bl	8001f58 <HAL_GetTick>
 8003d0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d0e:	e00a      	b.n	8003d26 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d10:	f7fe f922 	bl	8001f58 <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d901      	bls.n	8003d26 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e0d7      	b.n	8003ed6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d26:	4b4b      	ldr	r3, [pc, #300]	; (8003e54 <HAL_RCC_OscConfig+0x4ac>)
 8003d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d2a:	f003 0302 	and.w	r3, r3, #2
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d0ee      	beq.n	8003d10 <HAL_RCC_OscConfig+0x368>
 8003d32:	e014      	b.n	8003d5e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d34:	f7fe f910 	bl	8001f58 <HAL_GetTick>
 8003d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d3a:	e00a      	b.n	8003d52 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d3c:	f7fe f90c 	bl	8001f58 <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d901      	bls.n	8003d52 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e0c1      	b.n	8003ed6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d52:	4b40      	ldr	r3, [pc, #256]	; (8003e54 <HAL_RCC_OscConfig+0x4ac>)
 8003d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d1ee      	bne.n	8003d3c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d5e:	7dfb      	ldrb	r3, [r7, #23]
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d105      	bne.n	8003d70 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d64:	4b3b      	ldr	r3, [pc, #236]	; (8003e54 <HAL_RCC_OscConfig+0x4ac>)
 8003d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d68:	4a3a      	ldr	r2, [pc, #232]	; (8003e54 <HAL_RCC_OscConfig+0x4ac>)
 8003d6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d6e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	699b      	ldr	r3, [r3, #24]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	f000 80ad 	beq.w	8003ed4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d7a:	4b36      	ldr	r3, [pc, #216]	; (8003e54 <HAL_RCC_OscConfig+0x4ac>)
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f003 030c 	and.w	r3, r3, #12
 8003d82:	2b08      	cmp	r3, #8
 8003d84:	d060      	beq.n	8003e48 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	699b      	ldr	r3, [r3, #24]
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d145      	bne.n	8003e1a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d8e:	4b33      	ldr	r3, [pc, #204]	; (8003e5c <HAL_RCC_OscConfig+0x4b4>)
 8003d90:	2200      	movs	r2, #0
 8003d92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d94:	f7fe f8e0 	bl	8001f58 <HAL_GetTick>
 8003d98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d9a:	e008      	b.n	8003dae <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d9c:	f7fe f8dc 	bl	8001f58 <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d901      	bls.n	8003dae <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e093      	b.n	8003ed6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dae:	4b29      	ldr	r3, [pc, #164]	; (8003e54 <HAL_RCC_OscConfig+0x4ac>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d1f0      	bne.n	8003d9c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	69da      	ldr	r2, [r3, #28]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a1b      	ldr	r3, [r3, #32]
 8003dc2:	431a      	orrs	r2, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc8:	019b      	lsls	r3, r3, #6
 8003dca:	431a      	orrs	r2, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd0:	085b      	lsrs	r3, r3, #1
 8003dd2:	3b01      	subs	r3, #1
 8003dd4:	041b      	lsls	r3, r3, #16
 8003dd6:	431a      	orrs	r2, r3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ddc:	061b      	lsls	r3, r3, #24
 8003dde:	431a      	orrs	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de4:	071b      	lsls	r3, r3, #28
 8003de6:	491b      	ldr	r1, [pc, #108]	; (8003e54 <HAL_RCC_OscConfig+0x4ac>)
 8003de8:	4313      	orrs	r3, r2
 8003dea:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003dec:	4b1b      	ldr	r3, [pc, #108]	; (8003e5c <HAL_RCC_OscConfig+0x4b4>)
 8003dee:	2201      	movs	r2, #1
 8003df0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df2:	f7fe f8b1 	bl	8001f58 <HAL_GetTick>
 8003df6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003df8:	e008      	b.n	8003e0c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dfa:	f7fe f8ad 	bl	8001f58 <HAL_GetTick>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d901      	bls.n	8003e0c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	e064      	b.n	8003ed6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e0c:	4b11      	ldr	r3, [pc, #68]	; (8003e54 <HAL_RCC_OscConfig+0x4ac>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d0f0      	beq.n	8003dfa <HAL_RCC_OscConfig+0x452>
 8003e18:	e05c      	b.n	8003ed4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e1a:	4b10      	ldr	r3, [pc, #64]	; (8003e5c <HAL_RCC_OscConfig+0x4b4>)
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e20:	f7fe f89a 	bl	8001f58 <HAL_GetTick>
 8003e24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e26:	e008      	b.n	8003e3a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e28:	f7fe f896 	bl	8001f58 <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d901      	bls.n	8003e3a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e04d      	b.n	8003ed6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e3a:	4b06      	ldr	r3, [pc, #24]	; (8003e54 <HAL_RCC_OscConfig+0x4ac>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d1f0      	bne.n	8003e28 <HAL_RCC_OscConfig+0x480>
 8003e46:	e045      	b.n	8003ed4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	699b      	ldr	r3, [r3, #24]
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d107      	bne.n	8003e60 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e040      	b.n	8003ed6 <HAL_RCC_OscConfig+0x52e>
 8003e54:	40023800 	.word	0x40023800
 8003e58:	40007000 	.word	0x40007000
 8003e5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e60:	4b1f      	ldr	r3, [pc, #124]	; (8003ee0 <HAL_RCC_OscConfig+0x538>)
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	699b      	ldr	r3, [r3, #24]
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d030      	beq.n	8003ed0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d129      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d122      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e8a:	68fa      	ldr	r2, [r7, #12]
 8003e8c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e90:	4013      	ands	r3, r2
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e96:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d119      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea6:	085b      	lsrs	r3, r3, #1
 8003ea8:	3b01      	subs	r3, #1
 8003eaa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d10f      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d107      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eca:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d001      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e000      	b.n	8003ed6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3718      	adds	r7, #24
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	40023800 	.word	0x40023800

08003ee4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d101      	bne.n	8003ef6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e041      	b.n	8003f7a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d106      	bne.n	8003f10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f7fd fd46 	bl	800199c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2202      	movs	r2, #2
 8003f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	3304      	adds	r3, #4
 8003f20:	4619      	mov	r1, r3
 8003f22:	4610      	mov	r0, r2
 8003f24:	f000 fcca 	bl	80048bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3708      	adds	r7, #8
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
	...

08003f84 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b085      	sub	sp, #20
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d001      	beq.n	8003f9c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e046      	b.n	800402a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2202      	movs	r2, #2
 8003fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a23      	ldr	r2, [pc, #140]	; (8004038 <HAL_TIM_Base_Start+0xb4>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d022      	beq.n	8003ff4 <HAL_TIM_Base_Start+0x70>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fb6:	d01d      	beq.n	8003ff4 <HAL_TIM_Base_Start+0x70>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a1f      	ldr	r2, [pc, #124]	; (800403c <HAL_TIM_Base_Start+0xb8>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d018      	beq.n	8003ff4 <HAL_TIM_Base_Start+0x70>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a1e      	ldr	r2, [pc, #120]	; (8004040 <HAL_TIM_Base_Start+0xbc>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d013      	beq.n	8003ff4 <HAL_TIM_Base_Start+0x70>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a1c      	ldr	r2, [pc, #112]	; (8004044 <HAL_TIM_Base_Start+0xc0>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d00e      	beq.n	8003ff4 <HAL_TIM_Base_Start+0x70>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a1b      	ldr	r2, [pc, #108]	; (8004048 <HAL_TIM_Base_Start+0xc4>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d009      	beq.n	8003ff4 <HAL_TIM_Base_Start+0x70>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a19      	ldr	r2, [pc, #100]	; (800404c <HAL_TIM_Base_Start+0xc8>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d004      	beq.n	8003ff4 <HAL_TIM_Base_Start+0x70>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a18      	ldr	r2, [pc, #96]	; (8004050 <HAL_TIM_Base_Start+0xcc>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d111      	bne.n	8004018 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f003 0307 	and.w	r3, r3, #7
 8003ffe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2b06      	cmp	r3, #6
 8004004:	d010      	beq.n	8004028 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f042 0201 	orr.w	r2, r2, #1
 8004014:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004016:	e007      	b.n	8004028 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f042 0201 	orr.w	r2, r2, #1
 8004026:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3714      	adds	r7, #20
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr
 8004036:	bf00      	nop
 8004038:	40010000 	.word	0x40010000
 800403c:	40000400 	.word	0x40000400
 8004040:	40000800 	.word	0x40000800
 8004044:	40000c00 	.word	0x40000c00
 8004048:	40010400 	.word	0x40010400
 800404c:	40014000 	.word	0x40014000
 8004050:	40001800 	.word	0x40001800

08004054 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004054:	b480      	push	{r7}
 8004056:	b085      	sub	sp, #20
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004062:	b2db      	uxtb	r3, r3
 8004064:	2b01      	cmp	r3, #1
 8004066:	d001      	beq.n	800406c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e04e      	b.n	800410a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2202      	movs	r2, #2
 8004070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	68da      	ldr	r2, [r3, #12]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f042 0201 	orr.w	r2, r2, #1
 8004082:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a23      	ldr	r2, [pc, #140]	; (8004118 <HAL_TIM_Base_Start_IT+0xc4>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d022      	beq.n	80040d4 <HAL_TIM_Base_Start_IT+0x80>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004096:	d01d      	beq.n	80040d4 <HAL_TIM_Base_Start_IT+0x80>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a1f      	ldr	r2, [pc, #124]	; (800411c <HAL_TIM_Base_Start_IT+0xc8>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d018      	beq.n	80040d4 <HAL_TIM_Base_Start_IT+0x80>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a1e      	ldr	r2, [pc, #120]	; (8004120 <HAL_TIM_Base_Start_IT+0xcc>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d013      	beq.n	80040d4 <HAL_TIM_Base_Start_IT+0x80>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a1c      	ldr	r2, [pc, #112]	; (8004124 <HAL_TIM_Base_Start_IT+0xd0>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d00e      	beq.n	80040d4 <HAL_TIM_Base_Start_IT+0x80>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a1b      	ldr	r2, [pc, #108]	; (8004128 <HAL_TIM_Base_Start_IT+0xd4>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d009      	beq.n	80040d4 <HAL_TIM_Base_Start_IT+0x80>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a19      	ldr	r2, [pc, #100]	; (800412c <HAL_TIM_Base_Start_IT+0xd8>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d004      	beq.n	80040d4 <HAL_TIM_Base_Start_IT+0x80>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a18      	ldr	r2, [pc, #96]	; (8004130 <HAL_TIM_Base_Start_IT+0xdc>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d111      	bne.n	80040f8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	f003 0307 	and.w	r3, r3, #7
 80040de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2b06      	cmp	r3, #6
 80040e4:	d010      	beq.n	8004108 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f042 0201 	orr.w	r2, r2, #1
 80040f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040f6:	e007      	b.n	8004108 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f042 0201 	orr.w	r2, r2, #1
 8004106:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004108:	2300      	movs	r3, #0
}
 800410a:	4618      	mov	r0, r3
 800410c:	3714      	adds	r7, #20
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
 8004116:	bf00      	nop
 8004118:	40010000 	.word	0x40010000
 800411c:	40000400 	.word	0x40000400
 8004120:	40000800 	.word	0x40000800
 8004124:	40000c00 	.word	0x40000c00
 8004128:	40010400 	.word	0x40010400
 800412c:	40014000 	.word	0x40014000
 8004130:	40001800 	.word	0x40001800

08004134 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b082      	sub	sp, #8
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d101      	bne.n	8004146 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e041      	b.n	80041ca <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800414c:	b2db      	uxtb	r3, r3
 800414e:	2b00      	cmp	r3, #0
 8004150:	d106      	bne.n	8004160 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f7fd fbfe 	bl	800195c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2202      	movs	r2, #2
 8004164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	3304      	adds	r3, #4
 8004170:	4619      	mov	r1, r3
 8004172:	4610      	mov	r0, r2
 8004174:	f000 fba2 	bl	80048bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041c8:	2300      	movs	r3, #0
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3708      	adds	r7, #8
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
	...

080041d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d109      	bne.n	80041f8 <HAL_TIM_PWM_Start+0x24>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	bf14      	ite	ne
 80041f0:	2301      	movne	r3, #1
 80041f2:	2300      	moveq	r3, #0
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	e022      	b.n	800423e <HAL_TIM_PWM_Start+0x6a>
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	2b04      	cmp	r3, #4
 80041fc:	d109      	bne.n	8004212 <HAL_TIM_PWM_Start+0x3e>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004204:	b2db      	uxtb	r3, r3
 8004206:	2b01      	cmp	r3, #1
 8004208:	bf14      	ite	ne
 800420a:	2301      	movne	r3, #1
 800420c:	2300      	moveq	r3, #0
 800420e:	b2db      	uxtb	r3, r3
 8004210:	e015      	b.n	800423e <HAL_TIM_PWM_Start+0x6a>
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	2b08      	cmp	r3, #8
 8004216:	d109      	bne.n	800422c <HAL_TIM_PWM_Start+0x58>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800421e:	b2db      	uxtb	r3, r3
 8004220:	2b01      	cmp	r3, #1
 8004222:	bf14      	ite	ne
 8004224:	2301      	movne	r3, #1
 8004226:	2300      	moveq	r3, #0
 8004228:	b2db      	uxtb	r3, r3
 800422a:	e008      	b.n	800423e <HAL_TIM_PWM_Start+0x6a>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004232:	b2db      	uxtb	r3, r3
 8004234:	2b01      	cmp	r3, #1
 8004236:	bf14      	ite	ne
 8004238:	2301      	movne	r3, #1
 800423a:	2300      	moveq	r3, #0
 800423c:	b2db      	uxtb	r3, r3
 800423e:	2b00      	cmp	r3, #0
 8004240:	d001      	beq.n	8004246 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e07c      	b.n	8004340 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d104      	bne.n	8004256 <HAL_TIM_PWM_Start+0x82>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2202      	movs	r2, #2
 8004250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004254:	e013      	b.n	800427e <HAL_TIM_PWM_Start+0xaa>
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	2b04      	cmp	r3, #4
 800425a:	d104      	bne.n	8004266 <HAL_TIM_PWM_Start+0x92>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2202      	movs	r2, #2
 8004260:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004264:	e00b      	b.n	800427e <HAL_TIM_PWM_Start+0xaa>
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	2b08      	cmp	r3, #8
 800426a:	d104      	bne.n	8004276 <HAL_TIM_PWM_Start+0xa2>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2202      	movs	r2, #2
 8004270:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004274:	e003      	b.n	800427e <HAL_TIM_PWM_Start+0xaa>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2202      	movs	r2, #2
 800427a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2201      	movs	r2, #1
 8004284:	6839      	ldr	r1, [r7, #0]
 8004286:	4618      	mov	r0, r3
 8004288:	f000 fe0e 	bl	8004ea8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a2d      	ldr	r2, [pc, #180]	; (8004348 <HAL_TIM_PWM_Start+0x174>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d004      	beq.n	80042a0 <HAL_TIM_PWM_Start+0xcc>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a2c      	ldr	r2, [pc, #176]	; (800434c <HAL_TIM_PWM_Start+0x178>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d101      	bne.n	80042a4 <HAL_TIM_PWM_Start+0xd0>
 80042a0:	2301      	movs	r3, #1
 80042a2:	e000      	b.n	80042a6 <HAL_TIM_PWM_Start+0xd2>
 80042a4:	2300      	movs	r3, #0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d007      	beq.n	80042ba <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042b8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a22      	ldr	r2, [pc, #136]	; (8004348 <HAL_TIM_PWM_Start+0x174>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d022      	beq.n	800430a <HAL_TIM_PWM_Start+0x136>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042cc:	d01d      	beq.n	800430a <HAL_TIM_PWM_Start+0x136>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a1f      	ldr	r2, [pc, #124]	; (8004350 <HAL_TIM_PWM_Start+0x17c>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d018      	beq.n	800430a <HAL_TIM_PWM_Start+0x136>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a1d      	ldr	r2, [pc, #116]	; (8004354 <HAL_TIM_PWM_Start+0x180>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d013      	beq.n	800430a <HAL_TIM_PWM_Start+0x136>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a1c      	ldr	r2, [pc, #112]	; (8004358 <HAL_TIM_PWM_Start+0x184>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d00e      	beq.n	800430a <HAL_TIM_PWM_Start+0x136>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a16      	ldr	r2, [pc, #88]	; (800434c <HAL_TIM_PWM_Start+0x178>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d009      	beq.n	800430a <HAL_TIM_PWM_Start+0x136>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a18      	ldr	r2, [pc, #96]	; (800435c <HAL_TIM_PWM_Start+0x188>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d004      	beq.n	800430a <HAL_TIM_PWM_Start+0x136>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a16      	ldr	r2, [pc, #88]	; (8004360 <HAL_TIM_PWM_Start+0x18c>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d111      	bne.n	800432e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	f003 0307 	and.w	r3, r3, #7
 8004314:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2b06      	cmp	r3, #6
 800431a:	d010      	beq.n	800433e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f042 0201 	orr.w	r2, r2, #1
 800432a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800432c:	e007      	b.n	800433e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f042 0201 	orr.w	r2, r2, #1
 800433c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800433e:	2300      	movs	r3, #0
}
 8004340:	4618      	mov	r0, r3
 8004342:	3710      	adds	r7, #16
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}
 8004348:	40010000 	.word	0x40010000
 800434c:	40010400 	.word	0x40010400
 8004350:	40000400 	.word	0x40000400
 8004354:	40000800 	.word	0x40000800
 8004358:	40000c00 	.word	0x40000c00
 800435c:	40014000 	.word	0x40014000
 8004360:	40001800 	.word	0x40001800

08004364 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	691b      	ldr	r3, [r3, #16]
 800437a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	f003 0302 	and.w	r3, r3, #2
 8004382:	2b00      	cmp	r3, #0
 8004384:	d020      	beq.n	80043c8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f003 0302 	and.w	r3, r3, #2
 800438c:	2b00      	cmp	r3, #0
 800438e:	d01b      	beq.n	80043c8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f06f 0202 	mvn.w	r2, #2
 8004398:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2201      	movs	r2, #1
 800439e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	699b      	ldr	r3, [r3, #24]
 80043a6:	f003 0303 	and.w	r3, r3, #3
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d003      	beq.n	80043b6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f000 fa65 	bl	800487e <HAL_TIM_IC_CaptureCallback>
 80043b4:	e005      	b.n	80043c2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f000 fa57 	bl	800486a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f000 fa68 	bl	8004892 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	f003 0304 	and.w	r3, r3, #4
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d020      	beq.n	8004414 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f003 0304 	and.w	r3, r3, #4
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d01b      	beq.n	8004414 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f06f 0204 	mvn.w	r2, #4
 80043e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2202      	movs	r2, #2
 80043ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	699b      	ldr	r3, [r3, #24]
 80043f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d003      	beq.n	8004402 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f000 fa3f 	bl	800487e <HAL_TIM_IC_CaptureCallback>
 8004400:	e005      	b.n	800440e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f000 fa31 	bl	800486a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f000 fa42 	bl	8004892 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	f003 0308 	and.w	r3, r3, #8
 800441a:	2b00      	cmp	r3, #0
 800441c:	d020      	beq.n	8004460 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f003 0308 	and.w	r3, r3, #8
 8004424:	2b00      	cmp	r3, #0
 8004426:	d01b      	beq.n	8004460 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f06f 0208 	mvn.w	r2, #8
 8004430:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2204      	movs	r2, #4
 8004436:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	69db      	ldr	r3, [r3, #28]
 800443e:	f003 0303 	and.w	r3, r3, #3
 8004442:	2b00      	cmp	r3, #0
 8004444:	d003      	beq.n	800444e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 fa19 	bl	800487e <HAL_TIM_IC_CaptureCallback>
 800444c:	e005      	b.n	800445a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 fa0b 	bl	800486a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f000 fa1c 	bl	8004892 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	f003 0310 	and.w	r3, r3, #16
 8004466:	2b00      	cmp	r3, #0
 8004468:	d020      	beq.n	80044ac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f003 0310 	and.w	r3, r3, #16
 8004470:	2b00      	cmp	r3, #0
 8004472:	d01b      	beq.n	80044ac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f06f 0210 	mvn.w	r2, #16
 800447c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2208      	movs	r2, #8
 8004482:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	69db      	ldr	r3, [r3, #28]
 800448a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800448e:	2b00      	cmp	r3, #0
 8004490:	d003      	beq.n	800449a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 f9f3 	bl	800487e <HAL_TIM_IC_CaptureCallback>
 8004498:	e005      	b.n	80044a6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 f9e5 	bl	800486a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f000 f9f6 	bl	8004892 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	f003 0301 	and.w	r3, r3, #1
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d00c      	beq.n	80044d0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f003 0301 	and.w	r3, r3, #1
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d007      	beq.n	80044d0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f06f 0201 	mvn.w	r2, #1
 80044c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 f9c3 	bl	8004856 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d00c      	beq.n	80044f4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d007      	beq.n	80044f4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80044ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 fd86 	bl	8005000 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d00c      	beq.n	8004518 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004504:	2b00      	cmp	r3, #0
 8004506:	d007      	beq.n	8004518 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004510:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f000 f9c7 	bl	80048a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	f003 0320 	and.w	r3, r3, #32
 800451e:	2b00      	cmp	r3, #0
 8004520:	d00c      	beq.n	800453c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	f003 0320 	and.w	r3, r3, #32
 8004528:	2b00      	cmp	r3, #0
 800452a:	d007      	beq.n	800453c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f06f 0220 	mvn.w	r2, #32
 8004534:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 fd58 	bl	8004fec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800453c:	bf00      	nop
 800453e:	3710      	adds	r7, #16
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}

08004544 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b086      	sub	sp, #24
 8004548:	af00      	add	r7, sp, #0
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004550:	2300      	movs	r3, #0
 8004552:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800455a:	2b01      	cmp	r3, #1
 800455c:	d101      	bne.n	8004562 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800455e:	2302      	movs	r3, #2
 8004560:	e0ae      	b.n	80046c0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2201      	movs	r2, #1
 8004566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2b0c      	cmp	r3, #12
 800456e:	f200 809f 	bhi.w	80046b0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004572:	a201      	add	r2, pc, #4	; (adr r2, 8004578 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004578:	080045ad 	.word	0x080045ad
 800457c:	080046b1 	.word	0x080046b1
 8004580:	080046b1 	.word	0x080046b1
 8004584:	080046b1 	.word	0x080046b1
 8004588:	080045ed 	.word	0x080045ed
 800458c:	080046b1 	.word	0x080046b1
 8004590:	080046b1 	.word	0x080046b1
 8004594:	080046b1 	.word	0x080046b1
 8004598:	0800462f 	.word	0x0800462f
 800459c:	080046b1 	.word	0x080046b1
 80045a0:	080046b1 	.word	0x080046b1
 80045a4:	080046b1 	.word	0x080046b1
 80045a8:	0800466f 	.word	0x0800466f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	68b9      	ldr	r1, [r7, #8]
 80045b2:	4618      	mov	r0, r3
 80045b4:	f000 fa2e 	bl	8004a14 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	699a      	ldr	r2, [r3, #24]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f042 0208 	orr.w	r2, r2, #8
 80045c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	699a      	ldr	r2, [r3, #24]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f022 0204 	bic.w	r2, r2, #4
 80045d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	6999      	ldr	r1, [r3, #24]
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	691a      	ldr	r2, [r3, #16]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	430a      	orrs	r2, r1
 80045e8:	619a      	str	r2, [r3, #24]
      break;
 80045ea:	e064      	b.n	80046b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	68b9      	ldr	r1, [r7, #8]
 80045f2:	4618      	mov	r0, r3
 80045f4:	f000 fa7e 	bl	8004af4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	699a      	ldr	r2, [r3, #24]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004606:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	699a      	ldr	r2, [r3, #24]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004616:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	6999      	ldr	r1, [r3, #24]
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	021a      	lsls	r2, r3, #8
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	430a      	orrs	r2, r1
 800462a:	619a      	str	r2, [r3, #24]
      break;
 800462c:	e043      	b.n	80046b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	68b9      	ldr	r1, [r7, #8]
 8004634:	4618      	mov	r0, r3
 8004636:	f000 fad3 	bl	8004be0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	69da      	ldr	r2, [r3, #28]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f042 0208 	orr.w	r2, r2, #8
 8004648:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	69da      	ldr	r2, [r3, #28]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f022 0204 	bic.w	r2, r2, #4
 8004658:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	69d9      	ldr	r1, [r3, #28]
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	691a      	ldr	r2, [r3, #16]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	430a      	orrs	r2, r1
 800466a:	61da      	str	r2, [r3, #28]
      break;
 800466c:	e023      	b.n	80046b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	68b9      	ldr	r1, [r7, #8]
 8004674:	4618      	mov	r0, r3
 8004676:	f000 fb27 	bl	8004cc8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	69da      	ldr	r2, [r3, #28]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004688:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	69da      	ldr	r2, [r3, #28]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004698:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	69d9      	ldr	r1, [r3, #28]
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	691b      	ldr	r3, [r3, #16]
 80046a4:	021a      	lsls	r2, r3, #8
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	430a      	orrs	r2, r1
 80046ac:	61da      	str	r2, [r3, #28]
      break;
 80046ae:	e002      	b.n	80046b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	75fb      	strb	r3, [r7, #23]
      break;
 80046b4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80046be:	7dfb      	ldrb	r3, [r7, #23]
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3718      	adds	r7, #24
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046d2:	2300      	movs	r3, #0
 80046d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d101      	bne.n	80046e4 <HAL_TIM_ConfigClockSource+0x1c>
 80046e0:	2302      	movs	r3, #2
 80046e2:	e0b4      	b.n	800484e <HAL_TIM_ConfigClockSource+0x186>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2202      	movs	r2, #2
 80046f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004702:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800470a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	68ba      	ldr	r2, [r7, #8]
 8004712:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800471c:	d03e      	beq.n	800479c <HAL_TIM_ConfigClockSource+0xd4>
 800471e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004722:	f200 8087 	bhi.w	8004834 <HAL_TIM_ConfigClockSource+0x16c>
 8004726:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800472a:	f000 8086 	beq.w	800483a <HAL_TIM_ConfigClockSource+0x172>
 800472e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004732:	d87f      	bhi.n	8004834 <HAL_TIM_ConfigClockSource+0x16c>
 8004734:	2b70      	cmp	r3, #112	; 0x70
 8004736:	d01a      	beq.n	800476e <HAL_TIM_ConfigClockSource+0xa6>
 8004738:	2b70      	cmp	r3, #112	; 0x70
 800473a:	d87b      	bhi.n	8004834 <HAL_TIM_ConfigClockSource+0x16c>
 800473c:	2b60      	cmp	r3, #96	; 0x60
 800473e:	d050      	beq.n	80047e2 <HAL_TIM_ConfigClockSource+0x11a>
 8004740:	2b60      	cmp	r3, #96	; 0x60
 8004742:	d877      	bhi.n	8004834 <HAL_TIM_ConfigClockSource+0x16c>
 8004744:	2b50      	cmp	r3, #80	; 0x50
 8004746:	d03c      	beq.n	80047c2 <HAL_TIM_ConfigClockSource+0xfa>
 8004748:	2b50      	cmp	r3, #80	; 0x50
 800474a:	d873      	bhi.n	8004834 <HAL_TIM_ConfigClockSource+0x16c>
 800474c:	2b40      	cmp	r3, #64	; 0x40
 800474e:	d058      	beq.n	8004802 <HAL_TIM_ConfigClockSource+0x13a>
 8004750:	2b40      	cmp	r3, #64	; 0x40
 8004752:	d86f      	bhi.n	8004834 <HAL_TIM_ConfigClockSource+0x16c>
 8004754:	2b30      	cmp	r3, #48	; 0x30
 8004756:	d064      	beq.n	8004822 <HAL_TIM_ConfigClockSource+0x15a>
 8004758:	2b30      	cmp	r3, #48	; 0x30
 800475a:	d86b      	bhi.n	8004834 <HAL_TIM_ConfigClockSource+0x16c>
 800475c:	2b20      	cmp	r3, #32
 800475e:	d060      	beq.n	8004822 <HAL_TIM_ConfigClockSource+0x15a>
 8004760:	2b20      	cmp	r3, #32
 8004762:	d867      	bhi.n	8004834 <HAL_TIM_ConfigClockSource+0x16c>
 8004764:	2b00      	cmp	r3, #0
 8004766:	d05c      	beq.n	8004822 <HAL_TIM_ConfigClockSource+0x15a>
 8004768:	2b10      	cmp	r3, #16
 800476a:	d05a      	beq.n	8004822 <HAL_TIM_ConfigClockSource+0x15a>
 800476c:	e062      	b.n	8004834 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800477e:	f000 fb73 	bl	8004e68 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004790:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	68ba      	ldr	r2, [r7, #8]
 8004798:	609a      	str	r2, [r3, #8]
      break;
 800479a:	e04f      	b.n	800483c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80047ac:	f000 fb5c 	bl	8004e68 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	689a      	ldr	r2, [r3, #8]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047be:	609a      	str	r2, [r3, #8]
      break;
 80047c0:	e03c      	b.n	800483c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047ce:	461a      	mov	r2, r3
 80047d0:	f000 fad0 	bl	8004d74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2150      	movs	r1, #80	; 0x50
 80047da:	4618      	mov	r0, r3
 80047dc:	f000 fb29 	bl	8004e32 <TIM_ITRx_SetConfig>
      break;
 80047e0:	e02c      	b.n	800483c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80047ee:	461a      	mov	r2, r3
 80047f0:	f000 faef 	bl	8004dd2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	2160      	movs	r1, #96	; 0x60
 80047fa:	4618      	mov	r0, r3
 80047fc:	f000 fb19 	bl	8004e32 <TIM_ITRx_SetConfig>
      break;
 8004800:	e01c      	b.n	800483c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800480e:	461a      	mov	r2, r3
 8004810:	f000 fab0 	bl	8004d74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2140      	movs	r1, #64	; 0x40
 800481a:	4618      	mov	r0, r3
 800481c:	f000 fb09 	bl	8004e32 <TIM_ITRx_SetConfig>
      break;
 8004820:	e00c      	b.n	800483c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4619      	mov	r1, r3
 800482c:	4610      	mov	r0, r2
 800482e:	f000 fb00 	bl	8004e32 <TIM_ITRx_SetConfig>
      break;
 8004832:	e003      	b.n	800483c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	73fb      	strb	r3, [r7, #15]
      break;
 8004838:	e000      	b.n	800483c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800483a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2200      	movs	r2, #0
 8004848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800484c:	7bfb      	ldrb	r3, [r7, #15]
}
 800484e:	4618      	mov	r0, r3
 8004850:	3710      	adds	r7, #16
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}

08004856 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004856:	b480      	push	{r7}
 8004858:	b083      	sub	sp, #12
 800485a:	af00      	add	r7, sp, #0
 800485c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800485e:	bf00      	nop
 8004860:	370c      	adds	r7, #12
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr

0800486a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800486a:	b480      	push	{r7}
 800486c:	b083      	sub	sp, #12
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004872:	bf00      	nop
 8004874:	370c      	adds	r7, #12
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr

0800487e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800487e:	b480      	push	{r7}
 8004880:	b083      	sub	sp, #12
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004886:	bf00      	nop
 8004888:	370c      	adds	r7, #12
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr

08004892 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004892:	b480      	push	{r7}
 8004894:	b083      	sub	sp, #12
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800489a:	bf00      	nop
 800489c:	370c      	adds	r7, #12
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr

080048a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048a6:	b480      	push	{r7}
 80048a8:	b083      	sub	sp, #12
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048ae:	bf00      	nop
 80048b0:	370c      	adds	r7, #12
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr
	...

080048bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80048bc:	b480      	push	{r7}
 80048be:	b085      	sub	sp, #20
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	4a46      	ldr	r2, [pc, #280]	; (80049e8 <TIM_Base_SetConfig+0x12c>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d013      	beq.n	80048fc <TIM_Base_SetConfig+0x40>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048da:	d00f      	beq.n	80048fc <TIM_Base_SetConfig+0x40>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	4a43      	ldr	r2, [pc, #268]	; (80049ec <TIM_Base_SetConfig+0x130>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d00b      	beq.n	80048fc <TIM_Base_SetConfig+0x40>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	4a42      	ldr	r2, [pc, #264]	; (80049f0 <TIM_Base_SetConfig+0x134>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d007      	beq.n	80048fc <TIM_Base_SetConfig+0x40>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	4a41      	ldr	r2, [pc, #260]	; (80049f4 <TIM_Base_SetConfig+0x138>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d003      	beq.n	80048fc <TIM_Base_SetConfig+0x40>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4a40      	ldr	r2, [pc, #256]	; (80049f8 <TIM_Base_SetConfig+0x13c>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d108      	bne.n	800490e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004902:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	68fa      	ldr	r2, [r7, #12]
 800490a:	4313      	orrs	r3, r2
 800490c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a35      	ldr	r2, [pc, #212]	; (80049e8 <TIM_Base_SetConfig+0x12c>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d02b      	beq.n	800496e <TIM_Base_SetConfig+0xb2>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800491c:	d027      	beq.n	800496e <TIM_Base_SetConfig+0xb2>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a32      	ldr	r2, [pc, #200]	; (80049ec <TIM_Base_SetConfig+0x130>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d023      	beq.n	800496e <TIM_Base_SetConfig+0xb2>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a31      	ldr	r2, [pc, #196]	; (80049f0 <TIM_Base_SetConfig+0x134>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d01f      	beq.n	800496e <TIM_Base_SetConfig+0xb2>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a30      	ldr	r2, [pc, #192]	; (80049f4 <TIM_Base_SetConfig+0x138>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d01b      	beq.n	800496e <TIM_Base_SetConfig+0xb2>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a2f      	ldr	r2, [pc, #188]	; (80049f8 <TIM_Base_SetConfig+0x13c>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d017      	beq.n	800496e <TIM_Base_SetConfig+0xb2>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a2e      	ldr	r2, [pc, #184]	; (80049fc <TIM_Base_SetConfig+0x140>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d013      	beq.n	800496e <TIM_Base_SetConfig+0xb2>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a2d      	ldr	r2, [pc, #180]	; (8004a00 <TIM_Base_SetConfig+0x144>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d00f      	beq.n	800496e <TIM_Base_SetConfig+0xb2>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a2c      	ldr	r2, [pc, #176]	; (8004a04 <TIM_Base_SetConfig+0x148>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d00b      	beq.n	800496e <TIM_Base_SetConfig+0xb2>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4a2b      	ldr	r2, [pc, #172]	; (8004a08 <TIM_Base_SetConfig+0x14c>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d007      	beq.n	800496e <TIM_Base_SetConfig+0xb2>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4a2a      	ldr	r2, [pc, #168]	; (8004a0c <TIM_Base_SetConfig+0x150>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d003      	beq.n	800496e <TIM_Base_SetConfig+0xb2>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a29      	ldr	r2, [pc, #164]	; (8004a10 <TIM_Base_SetConfig+0x154>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d108      	bne.n	8004980 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004974:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	68fa      	ldr	r2, [r7, #12]
 800497c:	4313      	orrs	r3, r2
 800497e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	695b      	ldr	r3, [r3, #20]
 800498a:	4313      	orrs	r3, r2
 800498c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	68fa      	ldr	r2, [r7, #12]
 8004992:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	689a      	ldr	r2, [r3, #8]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4a10      	ldr	r2, [pc, #64]	; (80049e8 <TIM_Base_SetConfig+0x12c>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d003      	beq.n	80049b4 <TIM_Base_SetConfig+0xf8>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4a12      	ldr	r2, [pc, #72]	; (80049f8 <TIM_Base_SetConfig+0x13c>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d103      	bne.n	80049bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	691a      	ldr	r2, [r3, #16]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	691b      	ldr	r3, [r3, #16]
 80049c6:	f003 0301 	and.w	r3, r3, #1
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d105      	bne.n	80049da <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	f023 0201 	bic.w	r2, r3, #1
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	611a      	str	r2, [r3, #16]
  }
}
 80049da:	bf00      	nop
 80049dc:	3714      	adds	r7, #20
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr
 80049e6:	bf00      	nop
 80049e8:	40010000 	.word	0x40010000
 80049ec:	40000400 	.word	0x40000400
 80049f0:	40000800 	.word	0x40000800
 80049f4:	40000c00 	.word	0x40000c00
 80049f8:	40010400 	.word	0x40010400
 80049fc:	40014000 	.word	0x40014000
 8004a00:	40014400 	.word	0x40014400
 8004a04:	40014800 	.word	0x40014800
 8004a08:	40001800 	.word	0x40001800
 8004a0c:	40001c00 	.word	0x40001c00
 8004a10:	40002000 	.word	0x40002000

08004a14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b087      	sub	sp, #28
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a1b      	ldr	r3, [r3, #32]
 8004a22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6a1b      	ldr	r3, [r3, #32]
 8004a28:	f023 0201 	bic.w	r2, r3, #1
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	699b      	ldr	r3, [r3, #24]
 8004a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f023 0303 	bic.w	r3, r3, #3
 8004a4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	68fa      	ldr	r2, [r7, #12]
 8004a52:	4313      	orrs	r3, r2
 8004a54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	f023 0302 	bic.w	r3, r3, #2
 8004a5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	697a      	ldr	r2, [r7, #20]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4a20      	ldr	r2, [pc, #128]	; (8004aec <TIM_OC1_SetConfig+0xd8>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d003      	beq.n	8004a78 <TIM_OC1_SetConfig+0x64>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4a1f      	ldr	r2, [pc, #124]	; (8004af0 <TIM_OC1_SetConfig+0xdc>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d10c      	bne.n	8004a92 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	f023 0308 	bic.w	r3, r3, #8
 8004a7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	697a      	ldr	r2, [r7, #20]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	f023 0304 	bic.w	r3, r3, #4
 8004a90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a15      	ldr	r2, [pc, #84]	; (8004aec <TIM_OC1_SetConfig+0xd8>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d003      	beq.n	8004aa2 <TIM_OC1_SetConfig+0x8e>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a14      	ldr	r2, [pc, #80]	; (8004af0 <TIM_OC1_SetConfig+0xdc>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d111      	bne.n	8004ac6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004aa8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ab0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	695b      	ldr	r3, [r3, #20]
 8004ab6:	693a      	ldr	r2, [r7, #16]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	699b      	ldr	r3, [r3, #24]
 8004ac0:	693a      	ldr	r2, [r7, #16]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	693a      	ldr	r2, [r7, #16]
 8004aca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	68fa      	ldr	r2, [r7, #12]
 8004ad0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	685a      	ldr	r2, [r3, #4]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	697a      	ldr	r2, [r7, #20]
 8004ade:	621a      	str	r2, [r3, #32]
}
 8004ae0:	bf00      	nop
 8004ae2:	371c      	adds	r7, #28
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr
 8004aec:	40010000 	.word	0x40010000
 8004af0:	40010400 	.word	0x40010400

08004af4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b087      	sub	sp, #28
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a1b      	ldr	r3, [r3, #32]
 8004b02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6a1b      	ldr	r3, [r3, #32]
 8004b08:	f023 0210 	bic.w	r2, r3, #16
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	699b      	ldr	r3, [r3, #24]
 8004b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	021b      	lsls	r3, r3, #8
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	f023 0320 	bic.w	r3, r3, #32
 8004b3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	011b      	lsls	r3, r3, #4
 8004b46:	697a      	ldr	r2, [r7, #20]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	4a22      	ldr	r2, [pc, #136]	; (8004bd8 <TIM_OC2_SetConfig+0xe4>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d003      	beq.n	8004b5c <TIM_OC2_SetConfig+0x68>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	4a21      	ldr	r2, [pc, #132]	; (8004bdc <TIM_OC2_SetConfig+0xe8>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d10d      	bne.n	8004b78 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	011b      	lsls	r3, r3, #4
 8004b6a:	697a      	ldr	r2, [r7, #20]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b76:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a17      	ldr	r2, [pc, #92]	; (8004bd8 <TIM_OC2_SetConfig+0xe4>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d003      	beq.n	8004b88 <TIM_OC2_SetConfig+0x94>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a16      	ldr	r2, [pc, #88]	; (8004bdc <TIM_OC2_SetConfig+0xe8>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d113      	bne.n	8004bb0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b8e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b96:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	695b      	ldr	r3, [r3, #20]
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	693a      	ldr	r2, [r7, #16]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	699b      	ldr	r3, [r3, #24]
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	693a      	ldr	r2, [r7, #16]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	693a      	ldr	r2, [r7, #16]
 8004bb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	68fa      	ldr	r2, [r7, #12]
 8004bba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	685a      	ldr	r2, [r3, #4]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	697a      	ldr	r2, [r7, #20]
 8004bc8:	621a      	str	r2, [r3, #32]
}
 8004bca:	bf00      	nop
 8004bcc:	371c      	adds	r7, #28
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr
 8004bd6:	bf00      	nop
 8004bd8:	40010000 	.word	0x40010000
 8004bdc:	40010400 	.word	0x40010400

08004be0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b087      	sub	sp, #28
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a1b      	ldr	r3, [r3, #32]
 8004bee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6a1b      	ldr	r3, [r3, #32]
 8004bf4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	69db      	ldr	r3, [r3, #28]
 8004c06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f023 0303 	bic.w	r3, r3, #3
 8004c16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	68fa      	ldr	r2, [r7, #12]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	021b      	lsls	r3, r3, #8
 8004c30:	697a      	ldr	r2, [r7, #20]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4a21      	ldr	r2, [pc, #132]	; (8004cc0 <TIM_OC3_SetConfig+0xe0>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d003      	beq.n	8004c46 <TIM_OC3_SetConfig+0x66>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a20      	ldr	r2, [pc, #128]	; (8004cc4 <TIM_OC3_SetConfig+0xe4>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d10d      	bne.n	8004c62 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	021b      	lsls	r3, r3, #8
 8004c54:	697a      	ldr	r2, [r7, #20]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4a16      	ldr	r2, [pc, #88]	; (8004cc0 <TIM_OC3_SetConfig+0xe0>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d003      	beq.n	8004c72 <TIM_OC3_SetConfig+0x92>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4a15      	ldr	r2, [pc, #84]	; (8004cc4 <TIM_OC3_SetConfig+0xe4>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d113      	bne.n	8004c9a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	695b      	ldr	r3, [r3, #20]
 8004c86:	011b      	lsls	r3, r3, #4
 8004c88:	693a      	ldr	r2, [r7, #16]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	699b      	ldr	r3, [r3, #24]
 8004c92:	011b      	lsls	r3, r3, #4
 8004c94:	693a      	ldr	r2, [r7, #16]
 8004c96:	4313      	orrs	r3, r2
 8004c98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	693a      	ldr	r2, [r7, #16]
 8004c9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	68fa      	ldr	r2, [r7, #12]
 8004ca4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	685a      	ldr	r2, [r3, #4]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	697a      	ldr	r2, [r7, #20]
 8004cb2:	621a      	str	r2, [r3, #32]
}
 8004cb4:	bf00      	nop
 8004cb6:	371c      	adds	r7, #28
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr
 8004cc0:	40010000 	.word	0x40010000
 8004cc4:	40010400 	.word	0x40010400

08004cc8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b087      	sub	sp, #28
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6a1b      	ldr	r3, [r3, #32]
 8004cd6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6a1b      	ldr	r3, [r3, #32]
 8004cdc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	69db      	ldr	r3, [r3, #28]
 8004cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	021b      	lsls	r3, r3, #8
 8004d06:	68fa      	ldr	r2, [r7, #12]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	031b      	lsls	r3, r3, #12
 8004d1a:	693a      	ldr	r2, [r7, #16]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	4a12      	ldr	r2, [pc, #72]	; (8004d6c <TIM_OC4_SetConfig+0xa4>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d003      	beq.n	8004d30 <TIM_OC4_SetConfig+0x68>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	4a11      	ldr	r2, [pc, #68]	; (8004d70 <TIM_OC4_SetConfig+0xa8>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d109      	bne.n	8004d44 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d36:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	695b      	ldr	r3, [r3, #20]
 8004d3c:	019b      	lsls	r3, r3, #6
 8004d3e:	697a      	ldr	r2, [r7, #20]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	697a      	ldr	r2, [r7, #20]
 8004d48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	68fa      	ldr	r2, [r7, #12]
 8004d4e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	685a      	ldr	r2, [r3, #4]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	693a      	ldr	r2, [r7, #16]
 8004d5c:	621a      	str	r2, [r3, #32]
}
 8004d5e:	bf00      	nop
 8004d60:	371c      	adds	r7, #28
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr
 8004d6a:	bf00      	nop
 8004d6c:	40010000 	.word	0x40010000
 8004d70:	40010400 	.word	0x40010400

08004d74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b087      	sub	sp, #28
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	60f8      	str	r0, [r7, #12]
 8004d7c:	60b9      	str	r1, [r7, #8]
 8004d7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6a1b      	ldr	r3, [r3, #32]
 8004d84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6a1b      	ldr	r3, [r3, #32]
 8004d8a:	f023 0201 	bic.w	r2, r3, #1
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	699b      	ldr	r3, [r3, #24]
 8004d96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	011b      	lsls	r3, r3, #4
 8004da4:	693a      	ldr	r2, [r7, #16]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	f023 030a 	bic.w	r3, r3, #10
 8004db0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004db2:	697a      	ldr	r2, [r7, #20]
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	693a      	ldr	r2, [r7, #16]
 8004dbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	697a      	ldr	r2, [r7, #20]
 8004dc4:	621a      	str	r2, [r3, #32]
}
 8004dc6:	bf00      	nop
 8004dc8:	371c      	adds	r7, #28
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr

08004dd2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004dd2:	b480      	push	{r7}
 8004dd4:	b087      	sub	sp, #28
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	60f8      	str	r0, [r7, #12]
 8004dda:	60b9      	str	r1, [r7, #8]
 8004ddc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	6a1b      	ldr	r3, [r3, #32]
 8004de2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6a1b      	ldr	r3, [r3, #32]
 8004de8:	f023 0210 	bic.w	r2, r3, #16
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	699b      	ldr	r3, [r3, #24]
 8004df4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004dfc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	031b      	lsls	r3, r3, #12
 8004e02:	693a      	ldr	r2, [r7, #16]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e0e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	011b      	lsls	r3, r3, #4
 8004e14:	697a      	ldr	r2, [r7, #20]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	693a      	ldr	r2, [r7, #16]
 8004e1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	697a      	ldr	r2, [r7, #20]
 8004e24:	621a      	str	r2, [r3, #32]
}
 8004e26:	bf00      	nop
 8004e28:	371c      	adds	r7, #28
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr

08004e32 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e32:	b480      	push	{r7}
 8004e34:	b085      	sub	sp, #20
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	6078      	str	r0, [r7, #4]
 8004e3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e4a:	683a      	ldr	r2, [r7, #0]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	f043 0307 	orr.w	r3, r3, #7
 8004e54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	68fa      	ldr	r2, [r7, #12]
 8004e5a:	609a      	str	r2, [r3, #8]
}
 8004e5c:	bf00      	nop
 8004e5e:	3714      	adds	r7, #20
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b087      	sub	sp, #28
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	60b9      	str	r1, [r7, #8]
 8004e72:	607a      	str	r2, [r7, #4]
 8004e74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	021a      	lsls	r2, r3, #8
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	431a      	orrs	r2, r3
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	697a      	ldr	r2, [r7, #20]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	697a      	ldr	r2, [r7, #20]
 8004e9a:	609a      	str	r2, [r3, #8]
}
 8004e9c:	bf00      	nop
 8004e9e:	371c      	adds	r7, #28
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr

08004ea8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b087      	sub	sp, #28
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	60b9      	str	r1, [r7, #8]
 8004eb2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	f003 031f 	and.w	r3, r3, #31
 8004eba:	2201      	movs	r2, #1
 8004ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	6a1a      	ldr	r2, [r3, #32]
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	43db      	mvns	r3, r3
 8004eca:	401a      	ands	r2, r3
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	6a1a      	ldr	r2, [r3, #32]
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	f003 031f 	and.w	r3, r3, #31
 8004eda:	6879      	ldr	r1, [r7, #4]
 8004edc:	fa01 f303 	lsl.w	r3, r1, r3
 8004ee0:	431a      	orrs	r2, r3
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	621a      	str	r2, [r3, #32]
}
 8004ee6:	bf00      	nop
 8004ee8:	371c      	adds	r7, #28
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr
	...

08004ef4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b085      	sub	sp, #20
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d101      	bne.n	8004f0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f08:	2302      	movs	r3, #2
 8004f0a:	e05a      	b.n	8004fc2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2202      	movs	r2, #2
 8004f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	68fa      	ldr	r2, [r7, #12]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	68fa      	ldr	r2, [r7, #12]
 8004f44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a21      	ldr	r2, [pc, #132]	; (8004fd0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d022      	beq.n	8004f96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f58:	d01d      	beq.n	8004f96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a1d      	ldr	r2, [pc, #116]	; (8004fd4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d018      	beq.n	8004f96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a1b      	ldr	r2, [pc, #108]	; (8004fd8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d013      	beq.n	8004f96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a1a      	ldr	r2, [pc, #104]	; (8004fdc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d00e      	beq.n	8004f96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a18      	ldr	r2, [pc, #96]	; (8004fe0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d009      	beq.n	8004f96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a17      	ldr	r2, [pc, #92]	; (8004fe4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d004      	beq.n	8004f96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a15      	ldr	r2, [pc, #84]	; (8004fe8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d10c      	bne.n	8004fb0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	68ba      	ldr	r2, [r7, #8]
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	68ba      	ldr	r2, [r7, #8]
 8004fae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004fc0:	2300      	movs	r3, #0
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3714      	adds	r7, #20
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr
 8004fce:	bf00      	nop
 8004fd0:	40010000 	.word	0x40010000
 8004fd4:	40000400 	.word	0x40000400
 8004fd8:	40000800 	.word	0x40000800
 8004fdc:	40000c00 	.word	0x40000c00
 8004fe0:	40010400 	.word	0x40010400
 8004fe4:	40014000 	.word	0x40014000
 8004fe8:	40001800 	.word	0x40001800

08004fec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ff4:	bf00      	nop
 8004ff6:	370c      	adds	r7, #12
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr

08005000 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005008:	bf00      	nop
 800500a:	370c      	adds	r7, #12
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b082      	sub	sp, #8
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d101      	bne.n	8005026 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e042      	b.n	80050ac <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800502c:	b2db      	uxtb	r3, r3
 800502e:	2b00      	cmp	r3, #0
 8005030:	d106      	bne.n	8005040 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2200      	movs	r2, #0
 8005036:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f7fc fd44 	bl	8001ac8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2224      	movs	r2, #36	; 0x24
 8005044:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	68da      	ldr	r2, [r3, #12]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005056:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f000 fdc7 	bl	8005bec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	691a      	ldr	r2, [r3, #16]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800506c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	695a      	ldr	r2, [r3, #20]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800507c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	68da      	ldr	r2, [r3, #12]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800508c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2220      	movs	r2, #32
 8005098:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2220      	movs	r2, #32
 80050a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80050aa:	2300      	movs	r3, #0
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3708      	adds	r7, #8
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}

080050b4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b08a      	sub	sp, #40	; 0x28
 80050b8:	af02      	add	r7, sp, #8
 80050ba:	60f8      	str	r0, [r7, #12]
 80050bc:	60b9      	str	r1, [r7, #8]
 80050be:	603b      	str	r3, [r7, #0]
 80050c0:	4613      	mov	r3, r2
 80050c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80050c4:	2300      	movs	r3, #0
 80050c6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	2b20      	cmp	r3, #32
 80050d2:	d175      	bne.n	80051c0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d002      	beq.n	80050e0 <HAL_UART_Transmit+0x2c>
 80050da:	88fb      	ldrh	r3, [r7, #6]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d101      	bne.n	80050e4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	e06e      	b.n	80051c2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2200      	movs	r2, #0
 80050e8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2221      	movs	r2, #33	; 0x21
 80050ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80050f2:	f7fc ff31 	bl	8001f58 <HAL_GetTick>
 80050f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	88fa      	ldrh	r2, [r7, #6]
 80050fc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	88fa      	ldrh	r2, [r7, #6]
 8005102:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800510c:	d108      	bne.n	8005120 <HAL_UART_Transmit+0x6c>
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d104      	bne.n	8005120 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005116:	2300      	movs	r3, #0
 8005118:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	61bb      	str	r3, [r7, #24]
 800511e:	e003      	b.n	8005128 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005124:	2300      	movs	r3, #0
 8005126:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005128:	e02e      	b.n	8005188 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	9300      	str	r3, [sp, #0]
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	2200      	movs	r2, #0
 8005132:	2180      	movs	r1, #128	; 0x80
 8005134:	68f8      	ldr	r0, [r7, #12]
 8005136:	f000 fb29 	bl	800578c <UART_WaitOnFlagUntilTimeout>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d005      	beq.n	800514c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2220      	movs	r2, #32
 8005144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	e03a      	b.n	80051c2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d10b      	bne.n	800516a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005152:	69bb      	ldr	r3, [r7, #24]
 8005154:	881b      	ldrh	r3, [r3, #0]
 8005156:	461a      	mov	r2, r3
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005160:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	3302      	adds	r3, #2
 8005166:	61bb      	str	r3, [r7, #24]
 8005168:	e007      	b.n	800517a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	781a      	ldrb	r2, [r3, #0]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	3301      	adds	r3, #1
 8005178:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800517e:	b29b      	uxth	r3, r3
 8005180:	3b01      	subs	r3, #1
 8005182:	b29a      	uxth	r2, r3
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800518c:	b29b      	uxth	r3, r3
 800518e:	2b00      	cmp	r3, #0
 8005190:	d1cb      	bne.n	800512a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	9300      	str	r3, [sp, #0]
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	2200      	movs	r2, #0
 800519a:	2140      	movs	r1, #64	; 0x40
 800519c:	68f8      	ldr	r0, [r7, #12]
 800519e:	f000 faf5 	bl	800578c <UART_WaitOnFlagUntilTimeout>
 80051a2:	4603      	mov	r3, r0
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d005      	beq.n	80051b4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2220      	movs	r2, #32
 80051ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80051b0:	2303      	movs	r3, #3
 80051b2:	e006      	b.n	80051c2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2220      	movs	r2, #32
 80051b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80051bc:	2300      	movs	r3, #0
 80051be:	e000      	b.n	80051c2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80051c0:	2302      	movs	r3, #2
  }
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3720      	adds	r7, #32
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}

080051ca <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80051ca:	b580      	push	{r7, lr}
 80051cc:	b084      	sub	sp, #16
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	60f8      	str	r0, [r7, #12]
 80051d2:	60b9      	str	r1, [r7, #8]
 80051d4:	4613      	mov	r3, r2
 80051d6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	2b20      	cmp	r3, #32
 80051e2:	d112      	bne.n	800520a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d002      	beq.n	80051f0 <HAL_UART_Receive_IT+0x26>
 80051ea:	88fb      	ldrh	r3, [r7, #6]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d101      	bne.n	80051f4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	e00b      	b.n	800520c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2200      	movs	r2, #0
 80051f8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80051fa:	88fb      	ldrh	r3, [r7, #6]
 80051fc:	461a      	mov	r2, r3
 80051fe:	68b9      	ldr	r1, [r7, #8]
 8005200:	68f8      	ldr	r0, [r7, #12]
 8005202:	f000 fb1c 	bl	800583e <UART_Start_Receive_IT>
 8005206:	4603      	mov	r3, r0
 8005208:	e000      	b.n	800520c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800520a:	2302      	movs	r3, #2
  }
}
 800520c:	4618      	mov	r0, r3
 800520e:	3710      	adds	r7, #16
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}

08005214 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b0ba      	sub	sp, #232	; 0xe8
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	68db      	ldr	r3, [r3, #12]
 800522c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	695b      	ldr	r3, [r3, #20]
 8005236:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800523a:	2300      	movs	r3, #0
 800523c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005240:	2300      	movs	r3, #0
 8005242:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005246:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800524a:	f003 030f 	and.w	r3, r3, #15
 800524e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005252:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005256:	2b00      	cmp	r3, #0
 8005258:	d10f      	bne.n	800527a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800525a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800525e:	f003 0320 	and.w	r3, r3, #32
 8005262:	2b00      	cmp	r3, #0
 8005264:	d009      	beq.n	800527a <HAL_UART_IRQHandler+0x66>
 8005266:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800526a:	f003 0320 	and.w	r3, r3, #32
 800526e:	2b00      	cmp	r3, #0
 8005270:	d003      	beq.n	800527a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f000 fbfc 	bl	8005a70 <UART_Receive_IT>
      return;
 8005278:	e25b      	b.n	8005732 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800527a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800527e:	2b00      	cmp	r3, #0
 8005280:	f000 80de 	beq.w	8005440 <HAL_UART_IRQHandler+0x22c>
 8005284:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005288:	f003 0301 	and.w	r3, r3, #1
 800528c:	2b00      	cmp	r3, #0
 800528e:	d106      	bne.n	800529e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005290:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005294:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005298:	2b00      	cmp	r3, #0
 800529a:	f000 80d1 	beq.w	8005440 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800529e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052a2:	f003 0301 	and.w	r3, r3, #1
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d00b      	beq.n	80052c2 <HAL_UART_IRQHandler+0xae>
 80052aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d005      	beq.n	80052c2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052ba:	f043 0201 	orr.w	r2, r3, #1
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80052c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052c6:	f003 0304 	and.w	r3, r3, #4
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d00b      	beq.n	80052e6 <HAL_UART_IRQHandler+0xd2>
 80052ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052d2:	f003 0301 	and.w	r3, r3, #1
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d005      	beq.n	80052e6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052de:	f043 0202 	orr.w	r2, r3, #2
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80052e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052ea:	f003 0302 	and.w	r3, r3, #2
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d00b      	beq.n	800530a <HAL_UART_IRQHandler+0xf6>
 80052f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052f6:	f003 0301 	and.w	r3, r3, #1
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d005      	beq.n	800530a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005302:	f043 0204 	orr.w	r2, r3, #4
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800530a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800530e:	f003 0308 	and.w	r3, r3, #8
 8005312:	2b00      	cmp	r3, #0
 8005314:	d011      	beq.n	800533a <HAL_UART_IRQHandler+0x126>
 8005316:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800531a:	f003 0320 	and.w	r3, r3, #32
 800531e:	2b00      	cmp	r3, #0
 8005320:	d105      	bne.n	800532e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005322:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005326:	f003 0301 	and.w	r3, r3, #1
 800532a:	2b00      	cmp	r3, #0
 800532c:	d005      	beq.n	800533a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005332:	f043 0208 	orr.w	r2, r3, #8
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800533e:	2b00      	cmp	r3, #0
 8005340:	f000 81f2 	beq.w	8005728 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005344:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005348:	f003 0320 	and.w	r3, r3, #32
 800534c:	2b00      	cmp	r3, #0
 800534e:	d008      	beq.n	8005362 <HAL_UART_IRQHandler+0x14e>
 8005350:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005354:	f003 0320 	and.w	r3, r3, #32
 8005358:	2b00      	cmp	r3, #0
 800535a:	d002      	beq.n	8005362 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f000 fb87 	bl	8005a70 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	695b      	ldr	r3, [r3, #20]
 8005368:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800536c:	2b40      	cmp	r3, #64	; 0x40
 800536e:	bf0c      	ite	eq
 8005370:	2301      	moveq	r3, #1
 8005372:	2300      	movne	r3, #0
 8005374:	b2db      	uxtb	r3, r3
 8005376:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800537e:	f003 0308 	and.w	r3, r3, #8
 8005382:	2b00      	cmp	r3, #0
 8005384:	d103      	bne.n	800538e <HAL_UART_IRQHandler+0x17a>
 8005386:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800538a:	2b00      	cmp	r3, #0
 800538c:	d04f      	beq.n	800542e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f000 fa8f 	bl	80058b2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	695b      	ldr	r3, [r3, #20]
 800539a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800539e:	2b40      	cmp	r3, #64	; 0x40
 80053a0:	d141      	bne.n	8005426 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	3314      	adds	r3, #20
 80053a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80053b0:	e853 3f00 	ldrex	r3, [r3]
 80053b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80053b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80053bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	3314      	adds	r3, #20
 80053ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80053ce:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80053d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80053da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80053de:	e841 2300 	strex	r3, r2, [r1]
 80053e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80053e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d1d9      	bne.n	80053a2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d013      	beq.n	800541e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053fa:	4a7e      	ldr	r2, [pc, #504]	; (80055f4 <HAL_UART_IRQHandler+0x3e0>)
 80053fc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005402:	4618      	mov	r0, r3
 8005404:	f7fd fd4d 	bl	8002ea2 <HAL_DMA_Abort_IT>
 8005408:	4603      	mov	r3, r0
 800540a:	2b00      	cmp	r3, #0
 800540c:	d016      	beq.n	800543c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005412:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005418:	4610      	mov	r0, r2
 800541a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800541c:	e00e      	b.n	800543c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f000 f99e 	bl	8005760 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005424:	e00a      	b.n	800543c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 f99a 	bl	8005760 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800542c:	e006      	b.n	800543c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f000 f996 	bl	8005760 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2200      	movs	r2, #0
 8005438:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800543a:	e175      	b.n	8005728 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800543c:	bf00      	nop
    return;
 800543e:	e173      	b.n	8005728 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005444:	2b01      	cmp	r3, #1
 8005446:	f040 814f 	bne.w	80056e8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800544a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800544e:	f003 0310 	and.w	r3, r3, #16
 8005452:	2b00      	cmp	r3, #0
 8005454:	f000 8148 	beq.w	80056e8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005458:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800545c:	f003 0310 	and.w	r3, r3, #16
 8005460:	2b00      	cmp	r3, #0
 8005462:	f000 8141 	beq.w	80056e8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005466:	2300      	movs	r3, #0
 8005468:	60bb      	str	r3, [r7, #8]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	60bb      	str	r3, [r7, #8]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	60bb      	str	r3, [r7, #8]
 800547a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	695b      	ldr	r3, [r3, #20]
 8005482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005486:	2b40      	cmp	r3, #64	; 0x40
 8005488:	f040 80b6 	bne.w	80055f8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005498:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800549c:	2b00      	cmp	r3, #0
 800549e:	f000 8145 	beq.w	800572c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80054a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80054aa:	429a      	cmp	r2, r3
 80054ac:	f080 813e 	bcs.w	800572c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80054b6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054bc:	69db      	ldr	r3, [r3, #28]
 80054be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054c2:	f000 8088 	beq.w	80055d6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	330c      	adds	r3, #12
 80054cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80054d4:	e853 3f00 	ldrex	r3, [r3]
 80054d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80054dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80054e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	330c      	adds	r3, #12
 80054ee:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80054f2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80054f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80054fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005502:	e841 2300 	strex	r3, r2, [r1]
 8005506:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800550a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800550e:	2b00      	cmp	r3, #0
 8005510:	d1d9      	bne.n	80054c6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	3314      	adds	r3, #20
 8005518:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800551a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800551c:	e853 3f00 	ldrex	r3, [r3]
 8005520:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005522:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005524:	f023 0301 	bic.w	r3, r3, #1
 8005528:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	3314      	adds	r3, #20
 8005532:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005536:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800553a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800553c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800553e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005542:	e841 2300 	strex	r3, r2, [r1]
 8005546:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005548:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800554a:	2b00      	cmp	r3, #0
 800554c:	d1e1      	bne.n	8005512 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	3314      	adds	r3, #20
 8005554:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005556:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005558:	e853 3f00 	ldrex	r3, [r3]
 800555c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800555e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005560:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005564:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	3314      	adds	r3, #20
 800556e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005572:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005574:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005576:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005578:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800557a:	e841 2300 	strex	r3, r2, [r1]
 800557e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005580:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005582:	2b00      	cmp	r3, #0
 8005584:	d1e3      	bne.n	800554e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2220      	movs	r2, #32
 800558a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2200      	movs	r2, #0
 8005592:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	330c      	adds	r3, #12
 800559a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800559c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800559e:	e853 3f00 	ldrex	r3, [r3]
 80055a2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80055a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055a6:	f023 0310 	bic.w	r3, r3, #16
 80055aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	330c      	adds	r3, #12
 80055b4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80055b8:	65ba      	str	r2, [r7, #88]	; 0x58
 80055ba:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055bc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80055be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80055c0:	e841 2300 	strex	r3, r2, [r1]
 80055c4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80055c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d1e3      	bne.n	8005594 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055d0:	4618      	mov	r0, r3
 80055d2:	f7fd fbf6 	bl	8002dc2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2202      	movs	r2, #2
 80055da:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	1ad3      	subs	r3, r2, r3
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	4619      	mov	r1, r3
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f000 f8c1 	bl	8005774 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80055f2:	e09b      	b.n	800572c <HAL_UART_IRQHandler+0x518>
 80055f4:	08005979 	.word	0x08005979
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005600:	b29b      	uxth	r3, r3
 8005602:	1ad3      	subs	r3, r2, r3
 8005604:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800560c:	b29b      	uxth	r3, r3
 800560e:	2b00      	cmp	r3, #0
 8005610:	f000 808e 	beq.w	8005730 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005614:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005618:	2b00      	cmp	r3, #0
 800561a:	f000 8089 	beq.w	8005730 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	330c      	adds	r3, #12
 8005624:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005628:	e853 3f00 	ldrex	r3, [r3]
 800562c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800562e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005630:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005634:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	330c      	adds	r3, #12
 800563e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005642:	647a      	str	r2, [r7, #68]	; 0x44
 8005644:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005646:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005648:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800564a:	e841 2300 	strex	r3, r2, [r1]
 800564e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005652:	2b00      	cmp	r3, #0
 8005654:	d1e3      	bne.n	800561e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	3314      	adds	r3, #20
 800565c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800565e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005660:	e853 3f00 	ldrex	r3, [r3]
 8005664:	623b      	str	r3, [r7, #32]
   return(result);
 8005666:	6a3b      	ldr	r3, [r7, #32]
 8005668:	f023 0301 	bic.w	r3, r3, #1
 800566c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	3314      	adds	r3, #20
 8005676:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800567a:	633a      	str	r2, [r7, #48]	; 0x30
 800567c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800567e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005680:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005682:	e841 2300 	strex	r3, r2, [r1]
 8005686:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800568a:	2b00      	cmp	r3, #0
 800568c:	d1e3      	bne.n	8005656 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2220      	movs	r2, #32
 8005692:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	330c      	adds	r3, #12
 80056a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	e853 3f00 	ldrex	r3, [r3]
 80056aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f023 0310 	bic.w	r3, r3, #16
 80056b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	330c      	adds	r3, #12
 80056bc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80056c0:	61fa      	str	r2, [r7, #28]
 80056c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c4:	69b9      	ldr	r1, [r7, #24]
 80056c6:	69fa      	ldr	r2, [r7, #28]
 80056c8:	e841 2300 	strex	r3, r2, [r1]
 80056cc:	617b      	str	r3, [r7, #20]
   return(result);
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d1e3      	bne.n	800569c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2202      	movs	r2, #2
 80056d8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80056da:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80056de:	4619      	mov	r1, r3
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f000 f847 	bl	8005774 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80056e6:	e023      	b.n	8005730 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80056e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d009      	beq.n	8005708 <HAL_UART_IRQHandler+0x4f4>
 80056f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d003      	beq.n	8005708 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f000 f94d 	bl	80059a0 <UART_Transmit_IT>
    return;
 8005706:	e014      	b.n	8005732 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005708:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800570c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005710:	2b00      	cmp	r3, #0
 8005712:	d00e      	beq.n	8005732 <HAL_UART_IRQHandler+0x51e>
 8005714:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800571c:	2b00      	cmp	r3, #0
 800571e:	d008      	beq.n	8005732 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f000 f98d 	bl	8005a40 <UART_EndTransmit_IT>
    return;
 8005726:	e004      	b.n	8005732 <HAL_UART_IRQHandler+0x51e>
    return;
 8005728:	bf00      	nop
 800572a:	e002      	b.n	8005732 <HAL_UART_IRQHandler+0x51e>
      return;
 800572c:	bf00      	nop
 800572e:	e000      	b.n	8005732 <HAL_UART_IRQHandler+0x51e>
      return;
 8005730:	bf00      	nop
  }
}
 8005732:	37e8      	adds	r7, #232	; 0xe8
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}

08005738 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005738:	b480      	push	{r7}
 800573a:	b083      	sub	sp, #12
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005740:	bf00      	nop
 8005742:	370c      	adds	r7, #12
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr

0800574c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800574c:	b480      	push	{r7}
 800574e:	b083      	sub	sp, #12
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005754:	bf00      	nop
 8005756:	370c      	adds	r7, #12
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr

08005760 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005760:	b480      	push	{r7}
 8005762:	b083      	sub	sp, #12
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005768:	bf00      	nop
 800576a:	370c      	adds	r7, #12
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr

08005774 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005774:	b480      	push	{r7}
 8005776:	b083      	sub	sp, #12
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	460b      	mov	r3, r1
 800577e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005780:	bf00      	nop
 8005782:	370c      	adds	r7, #12
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr

0800578c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b086      	sub	sp, #24
 8005790:	af00      	add	r7, sp, #0
 8005792:	60f8      	str	r0, [r7, #12]
 8005794:	60b9      	str	r1, [r7, #8]
 8005796:	603b      	str	r3, [r7, #0]
 8005798:	4613      	mov	r3, r2
 800579a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800579c:	e03b      	b.n	8005816 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800579e:	6a3b      	ldr	r3, [r7, #32]
 80057a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057a4:	d037      	beq.n	8005816 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057a6:	f7fc fbd7 	bl	8001f58 <HAL_GetTick>
 80057aa:	4602      	mov	r2, r0
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	1ad3      	subs	r3, r2, r3
 80057b0:	6a3a      	ldr	r2, [r7, #32]
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d302      	bcc.n	80057bc <UART_WaitOnFlagUntilTimeout+0x30>
 80057b6:	6a3b      	ldr	r3, [r7, #32]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d101      	bne.n	80057c0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80057bc:	2303      	movs	r3, #3
 80057be:	e03a      	b.n	8005836 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	68db      	ldr	r3, [r3, #12]
 80057c6:	f003 0304 	and.w	r3, r3, #4
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d023      	beq.n	8005816 <UART_WaitOnFlagUntilTimeout+0x8a>
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	2b80      	cmp	r3, #128	; 0x80
 80057d2:	d020      	beq.n	8005816 <UART_WaitOnFlagUntilTimeout+0x8a>
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	2b40      	cmp	r3, #64	; 0x40
 80057d8:	d01d      	beq.n	8005816 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f003 0308 	and.w	r3, r3, #8
 80057e4:	2b08      	cmp	r3, #8
 80057e6:	d116      	bne.n	8005816 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80057e8:	2300      	movs	r3, #0
 80057ea:	617b      	str	r3, [r7, #20]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	617b      	str	r3, [r7, #20]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	617b      	str	r3, [r7, #20]
 80057fc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80057fe:	68f8      	ldr	r0, [r7, #12]
 8005800:	f000 f857 	bl	80058b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2208      	movs	r2, #8
 8005808:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2200      	movs	r2, #0
 800580e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	e00f      	b.n	8005836 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	4013      	ands	r3, r2
 8005820:	68ba      	ldr	r2, [r7, #8]
 8005822:	429a      	cmp	r2, r3
 8005824:	bf0c      	ite	eq
 8005826:	2301      	moveq	r3, #1
 8005828:	2300      	movne	r3, #0
 800582a:	b2db      	uxtb	r3, r3
 800582c:	461a      	mov	r2, r3
 800582e:	79fb      	ldrb	r3, [r7, #7]
 8005830:	429a      	cmp	r2, r3
 8005832:	d0b4      	beq.n	800579e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005834:	2300      	movs	r3, #0
}
 8005836:	4618      	mov	r0, r3
 8005838:	3718      	adds	r7, #24
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}

0800583e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800583e:	b480      	push	{r7}
 8005840:	b085      	sub	sp, #20
 8005842:	af00      	add	r7, sp, #0
 8005844:	60f8      	str	r0, [r7, #12]
 8005846:	60b9      	str	r1, [r7, #8]
 8005848:	4613      	mov	r3, r2
 800584a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	68ba      	ldr	r2, [r7, #8]
 8005850:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	88fa      	ldrh	r2, [r7, #6]
 8005856:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	88fa      	ldrh	r2, [r7, #6]
 800585c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2200      	movs	r2, #0
 8005862:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2222      	movs	r2, #34	; 0x22
 8005868:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	691b      	ldr	r3, [r3, #16]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d007      	beq.n	8005884 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	68da      	ldr	r2, [r3, #12]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005882:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	695a      	ldr	r2, [r3, #20]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f042 0201 	orr.w	r2, r2, #1
 8005892:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	68da      	ldr	r2, [r3, #12]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f042 0220 	orr.w	r2, r2, #32
 80058a2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80058a4:	2300      	movs	r3, #0
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3714      	adds	r7, #20
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr

080058b2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80058b2:	b480      	push	{r7}
 80058b4:	b095      	sub	sp, #84	; 0x54
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	330c      	adds	r3, #12
 80058c0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058c4:	e853 3f00 	ldrex	r3, [r3]
 80058c8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80058ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80058d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	330c      	adds	r3, #12
 80058d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80058da:	643a      	str	r2, [r7, #64]	; 0x40
 80058dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058de:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80058e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80058e2:	e841 2300 	strex	r3, r2, [r1]
 80058e6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80058e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d1e5      	bne.n	80058ba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	3314      	adds	r3, #20
 80058f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f6:	6a3b      	ldr	r3, [r7, #32]
 80058f8:	e853 3f00 	ldrex	r3, [r3]
 80058fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80058fe:	69fb      	ldr	r3, [r7, #28]
 8005900:	f023 0301 	bic.w	r3, r3, #1
 8005904:	64bb      	str	r3, [r7, #72]	; 0x48
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	3314      	adds	r3, #20
 800590c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800590e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005910:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005912:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005914:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005916:	e841 2300 	strex	r3, r2, [r1]
 800591a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800591c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591e:	2b00      	cmp	r3, #0
 8005920:	d1e5      	bne.n	80058ee <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005926:	2b01      	cmp	r3, #1
 8005928:	d119      	bne.n	800595e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	330c      	adds	r3, #12
 8005930:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	e853 3f00 	ldrex	r3, [r3]
 8005938:	60bb      	str	r3, [r7, #8]
   return(result);
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	f023 0310 	bic.w	r3, r3, #16
 8005940:	647b      	str	r3, [r7, #68]	; 0x44
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	330c      	adds	r3, #12
 8005948:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800594a:	61ba      	str	r2, [r7, #24]
 800594c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800594e:	6979      	ldr	r1, [r7, #20]
 8005950:	69ba      	ldr	r2, [r7, #24]
 8005952:	e841 2300 	strex	r3, r2, [r1]
 8005956:	613b      	str	r3, [r7, #16]
   return(result);
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d1e5      	bne.n	800592a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2220      	movs	r2, #32
 8005962:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800596c:	bf00      	nop
 800596e:	3754      	adds	r7, #84	; 0x54
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr

08005978 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b084      	sub	sp, #16
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005984:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2200      	movs	r2, #0
 800598a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2200      	movs	r2, #0
 8005990:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005992:	68f8      	ldr	r0, [r7, #12]
 8005994:	f7ff fee4 	bl	8005760 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005998:	bf00      	nop
 800599a:	3710      	adds	r7, #16
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}

080059a0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b085      	sub	sp, #20
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	2b21      	cmp	r3, #33	; 0x21
 80059b2:	d13e      	bne.n	8005a32 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059bc:	d114      	bne.n	80059e8 <UART_Transmit_IT+0x48>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	691b      	ldr	r3, [r3, #16]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d110      	bne.n	80059e8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6a1b      	ldr	r3, [r3, #32]
 80059ca:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	881b      	ldrh	r3, [r3, #0]
 80059d0:	461a      	mov	r2, r3
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059da:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6a1b      	ldr	r3, [r3, #32]
 80059e0:	1c9a      	adds	r2, r3, #2
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	621a      	str	r2, [r3, #32]
 80059e6:	e008      	b.n	80059fa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6a1b      	ldr	r3, [r3, #32]
 80059ec:	1c59      	adds	r1, r3, #1
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	6211      	str	r1, [r2, #32]
 80059f2:	781a      	ldrb	r2, [r3, #0]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	3b01      	subs	r3, #1
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	4619      	mov	r1, r3
 8005a08:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d10f      	bne.n	8005a2e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	68da      	ldr	r2, [r3, #12]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a1c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	68da      	ldr	r2, [r3, #12]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a2c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	e000      	b.n	8005a34 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005a32:	2302      	movs	r3, #2
  }
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3714      	adds	r7, #20
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr

08005a40 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b082      	sub	sp, #8
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	68da      	ldr	r2, [r3, #12]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a56:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2220      	movs	r2, #32
 8005a5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f7ff fe69 	bl	8005738 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005a66:	2300      	movs	r3, #0
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3708      	adds	r7, #8
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}

08005a70 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b08c      	sub	sp, #48	; 0x30
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	2b22      	cmp	r3, #34	; 0x22
 8005a82:	f040 80ae 	bne.w	8005be2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a8e:	d117      	bne.n	8005ac0 <UART_Receive_IT+0x50>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	691b      	ldr	r3, [r3, #16]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d113      	bne.n	8005ac0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa0:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	b29b      	uxth	r3, r3
 8005aaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005aae:	b29a      	uxth	r2, r3
 8005ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ab8:	1c9a      	adds	r2, r3, #2
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	629a      	str	r2, [r3, #40]	; 0x28
 8005abe:	e026      	b.n	8005b0e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ad2:	d007      	beq.n	8005ae4 <UART_Receive_IT+0x74>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d10a      	bne.n	8005af2 <UART_Receive_IT+0x82>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	691b      	ldr	r3, [r3, #16]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d106      	bne.n	8005af2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	b2da      	uxtb	r2, r3
 8005aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aee:	701a      	strb	r2, [r3, #0]
 8005af0:	e008      	b.n	8005b04 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005afe:	b2da      	uxtb	r2, r3
 8005b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b02:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b08:	1c5a      	adds	r2, r3, #1
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	3b01      	subs	r3, #1
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	4619      	mov	r1, r3
 8005b1c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d15d      	bne.n	8005bde <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	68da      	ldr	r2, [r3, #12]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f022 0220 	bic.w	r2, r2, #32
 8005b30:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	68da      	ldr	r2, [r3, #12]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b40:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	695a      	ldr	r2, [r3, #20]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f022 0201 	bic.w	r2, r2, #1
 8005b50:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2220      	movs	r2, #32
 8005b56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d135      	bne.n	8005bd4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	330c      	adds	r3, #12
 8005b74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	e853 3f00 	ldrex	r3, [r3]
 8005b7c:	613b      	str	r3, [r7, #16]
   return(result);
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	f023 0310 	bic.w	r3, r3, #16
 8005b84:	627b      	str	r3, [r7, #36]	; 0x24
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	330c      	adds	r3, #12
 8005b8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b8e:	623a      	str	r2, [r7, #32]
 8005b90:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b92:	69f9      	ldr	r1, [r7, #28]
 8005b94:	6a3a      	ldr	r2, [r7, #32]
 8005b96:	e841 2300 	strex	r3, r2, [r1]
 8005b9a:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b9c:	69bb      	ldr	r3, [r7, #24]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d1e5      	bne.n	8005b6e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f003 0310 	and.w	r3, r3, #16
 8005bac:	2b10      	cmp	r3, #16
 8005bae:	d10a      	bne.n	8005bc6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	60fb      	str	r3, [r7, #12]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	60fb      	str	r3, [r7, #12]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	60fb      	str	r3, [r7, #12]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005bca:	4619      	mov	r1, r3
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f7ff fdd1 	bl	8005774 <HAL_UARTEx_RxEventCallback>
 8005bd2:	e002      	b.n	8005bda <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f7ff fdb9 	bl	800574c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	e002      	b.n	8005be4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005bde:	2300      	movs	r3, #0
 8005be0:	e000      	b.n	8005be4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005be2:	2302      	movs	r3, #2
  }
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3730      	adds	r7, #48	; 0x30
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}

08005bec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005bec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005bf0:	b0c0      	sub	sp, #256	; 0x100
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	691b      	ldr	r3, [r3, #16]
 8005c00:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c08:	68d9      	ldr	r1, [r3, #12]
 8005c0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	ea40 0301 	orr.w	r3, r0, r1
 8005c14:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005c16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c1a:	689a      	ldr	r2, [r3, #8]
 8005c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c20:	691b      	ldr	r3, [r3, #16]
 8005c22:	431a      	orrs	r2, r3
 8005c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c28:	695b      	ldr	r3, [r3, #20]
 8005c2a:	431a      	orrs	r2, r3
 8005c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c30:	69db      	ldr	r3, [r3, #28]
 8005c32:	4313      	orrs	r3, r2
 8005c34:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005c44:	f021 010c 	bic.w	r1, r1, #12
 8005c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005c52:	430b      	orrs	r3, r1
 8005c54:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	695b      	ldr	r3, [r3, #20]
 8005c5e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005c62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c66:	6999      	ldr	r1, [r3, #24]
 8005c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	ea40 0301 	orr.w	r3, r0, r1
 8005c72:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	4b8f      	ldr	r3, [pc, #572]	; (8005eb8 <UART_SetConfig+0x2cc>)
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d005      	beq.n	8005c8c <UART_SetConfig+0xa0>
 8005c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	4b8d      	ldr	r3, [pc, #564]	; (8005ebc <UART_SetConfig+0x2d0>)
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d104      	bne.n	8005c96 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005c8c:	f7fd fc48 	bl	8003520 <HAL_RCC_GetPCLK2Freq>
 8005c90:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005c94:	e003      	b.n	8005c9e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005c96:	f7fd fc2f 	bl	80034f8 <HAL_RCC_GetPCLK1Freq>
 8005c9a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ca2:	69db      	ldr	r3, [r3, #28]
 8005ca4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ca8:	f040 810c 	bne.w	8005ec4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005cac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005cb6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005cba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005cbe:	4622      	mov	r2, r4
 8005cc0:	462b      	mov	r3, r5
 8005cc2:	1891      	adds	r1, r2, r2
 8005cc4:	65b9      	str	r1, [r7, #88]	; 0x58
 8005cc6:	415b      	adcs	r3, r3
 8005cc8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005cca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005cce:	4621      	mov	r1, r4
 8005cd0:	eb12 0801 	adds.w	r8, r2, r1
 8005cd4:	4629      	mov	r1, r5
 8005cd6:	eb43 0901 	adc.w	r9, r3, r1
 8005cda:	f04f 0200 	mov.w	r2, #0
 8005cde:	f04f 0300 	mov.w	r3, #0
 8005ce2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005ce6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005cea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005cee:	4690      	mov	r8, r2
 8005cf0:	4699      	mov	r9, r3
 8005cf2:	4623      	mov	r3, r4
 8005cf4:	eb18 0303 	adds.w	r3, r8, r3
 8005cf8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005cfc:	462b      	mov	r3, r5
 8005cfe:	eb49 0303 	adc.w	r3, r9, r3
 8005d02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005d06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005d12:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005d16:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005d1a:	460b      	mov	r3, r1
 8005d1c:	18db      	adds	r3, r3, r3
 8005d1e:	653b      	str	r3, [r7, #80]	; 0x50
 8005d20:	4613      	mov	r3, r2
 8005d22:	eb42 0303 	adc.w	r3, r2, r3
 8005d26:	657b      	str	r3, [r7, #84]	; 0x54
 8005d28:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005d2c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005d30:	f7fa feb4 	bl	8000a9c <__aeabi_uldivmod>
 8005d34:	4602      	mov	r2, r0
 8005d36:	460b      	mov	r3, r1
 8005d38:	4b61      	ldr	r3, [pc, #388]	; (8005ec0 <UART_SetConfig+0x2d4>)
 8005d3a:	fba3 2302 	umull	r2, r3, r3, r2
 8005d3e:	095b      	lsrs	r3, r3, #5
 8005d40:	011c      	lsls	r4, r3, #4
 8005d42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d46:	2200      	movs	r2, #0
 8005d48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005d4c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005d50:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005d54:	4642      	mov	r2, r8
 8005d56:	464b      	mov	r3, r9
 8005d58:	1891      	adds	r1, r2, r2
 8005d5a:	64b9      	str	r1, [r7, #72]	; 0x48
 8005d5c:	415b      	adcs	r3, r3
 8005d5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d60:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005d64:	4641      	mov	r1, r8
 8005d66:	eb12 0a01 	adds.w	sl, r2, r1
 8005d6a:	4649      	mov	r1, r9
 8005d6c:	eb43 0b01 	adc.w	fp, r3, r1
 8005d70:	f04f 0200 	mov.w	r2, #0
 8005d74:	f04f 0300 	mov.w	r3, #0
 8005d78:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005d7c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005d80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d84:	4692      	mov	sl, r2
 8005d86:	469b      	mov	fp, r3
 8005d88:	4643      	mov	r3, r8
 8005d8a:	eb1a 0303 	adds.w	r3, sl, r3
 8005d8e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d92:	464b      	mov	r3, r9
 8005d94:	eb4b 0303 	adc.w	r3, fp, r3
 8005d98:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	2200      	movs	r2, #0
 8005da4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005da8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005dac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005db0:	460b      	mov	r3, r1
 8005db2:	18db      	adds	r3, r3, r3
 8005db4:	643b      	str	r3, [r7, #64]	; 0x40
 8005db6:	4613      	mov	r3, r2
 8005db8:	eb42 0303 	adc.w	r3, r2, r3
 8005dbc:	647b      	str	r3, [r7, #68]	; 0x44
 8005dbe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005dc2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005dc6:	f7fa fe69 	bl	8000a9c <__aeabi_uldivmod>
 8005dca:	4602      	mov	r2, r0
 8005dcc:	460b      	mov	r3, r1
 8005dce:	4611      	mov	r1, r2
 8005dd0:	4b3b      	ldr	r3, [pc, #236]	; (8005ec0 <UART_SetConfig+0x2d4>)
 8005dd2:	fba3 2301 	umull	r2, r3, r3, r1
 8005dd6:	095b      	lsrs	r3, r3, #5
 8005dd8:	2264      	movs	r2, #100	; 0x64
 8005dda:	fb02 f303 	mul.w	r3, r2, r3
 8005dde:	1acb      	subs	r3, r1, r3
 8005de0:	00db      	lsls	r3, r3, #3
 8005de2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005de6:	4b36      	ldr	r3, [pc, #216]	; (8005ec0 <UART_SetConfig+0x2d4>)
 8005de8:	fba3 2302 	umull	r2, r3, r3, r2
 8005dec:	095b      	lsrs	r3, r3, #5
 8005dee:	005b      	lsls	r3, r3, #1
 8005df0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005df4:	441c      	add	r4, r3
 8005df6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e00:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005e04:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005e08:	4642      	mov	r2, r8
 8005e0a:	464b      	mov	r3, r9
 8005e0c:	1891      	adds	r1, r2, r2
 8005e0e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005e10:	415b      	adcs	r3, r3
 8005e12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e14:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005e18:	4641      	mov	r1, r8
 8005e1a:	1851      	adds	r1, r2, r1
 8005e1c:	6339      	str	r1, [r7, #48]	; 0x30
 8005e1e:	4649      	mov	r1, r9
 8005e20:	414b      	adcs	r3, r1
 8005e22:	637b      	str	r3, [r7, #52]	; 0x34
 8005e24:	f04f 0200 	mov.w	r2, #0
 8005e28:	f04f 0300 	mov.w	r3, #0
 8005e2c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005e30:	4659      	mov	r1, fp
 8005e32:	00cb      	lsls	r3, r1, #3
 8005e34:	4651      	mov	r1, sl
 8005e36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e3a:	4651      	mov	r1, sl
 8005e3c:	00ca      	lsls	r2, r1, #3
 8005e3e:	4610      	mov	r0, r2
 8005e40:	4619      	mov	r1, r3
 8005e42:	4603      	mov	r3, r0
 8005e44:	4642      	mov	r2, r8
 8005e46:	189b      	adds	r3, r3, r2
 8005e48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005e4c:	464b      	mov	r3, r9
 8005e4e:	460a      	mov	r2, r1
 8005e50:	eb42 0303 	adc.w	r3, r2, r3
 8005e54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005e64:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005e68:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005e6c:	460b      	mov	r3, r1
 8005e6e:	18db      	adds	r3, r3, r3
 8005e70:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e72:	4613      	mov	r3, r2
 8005e74:	eb42 0303 	adc.w	r3, r2, r3
 8005e78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e7a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005e7e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005e82:	f7fa fe0b 	bl	8000a9c <__aeabi_uldivmod>
 8005e86:	4602      	mov	r2, r0
 8005e88:	460b      	mov	r3, r1
 8005e8a:	4b0d      	ldr	r3, [pc, #52]	; (8005ec0 <UART_SetConfig+0x2d4>)
 8005e8c:	fba3 1302 	umull	r1, r3, r3, r2
 8005e90:	095b      	lsrs	r3, r3, #5
 8005e92:	2164      	movs	r1, #100	; 0x64
 8005e94:	fb01 f303 	mul.w	r3, r1, r3
 8005e98:	1ad3      	subs	r3, r2, r3
 8005e9a:	00db      	lsls	r3, r3, #3
 8005e9c:	3332      	adds	r3, #50	; 0x32
 8005e9e:	4a08      	ldr	r2, [pc, #32]	; (8005ec0 <UART_SetConfig+0x2d4>)
 8005ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ea4:	095b      	lsrs	r3, r3, #5
 8005ea6:	f003 0207 	and.w	r2, r3, #7
 8005eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4422      	add	r2, r4
 8005eb2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005eb4:	e106      	b.n	80060c4 <UART_SetConfig+0x4d8>
 8005eb6:	bf00      	nop
 8005eb8:	40011000 	.word	0x40011000
 8005ebc:	40011400 	.word	0x40011400
 8005ec0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ec4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ec8:	2200      	movs	r2, #0
 8005eca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005ece:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005ed2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005ed6:	4642      	mov	r2, r8
 8005ed8:	464b      	mov	r3, r9
 8005eda:	1891      	adds	r1, r2, r2
 8005edc:	6239      	str	r1, [r7, #32]
 8005ede:	415b      	adcs	r3, r3
 8005ee0:	627b      	str	r3, [r7, #36]	; 0x24
 8005ee2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005ee6:	4641      	mov	r1, r8
 8005ee8:	1854      	adds	r4, r2, r1
 8005eea:	4649      	mov	r1, r9
 8005eec:	eb43 0501 	adc.w	r5, r3, r1
 8005ef0:	f04f 0200 	mov.w	r2, #0
 8005ef4:	f04f 0300 	mov.w	r3, #0
 8005ef8:	00eb      	lsls	r3, r5, #3
 8005efa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005efe:	00e2      	lsls	r2, r4, #3
 8005f00:	4614      	mov	r4, r2
 8005f02:	461d      	mov	r5, r3
 8005f04:	4643      	mov	r3, r8
 8005f06:	18e3      	adds	r3, r4, r3
 8005f08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005f0c:	464b      	mov	r3, r9
 8005f0e:	eb45 0303 	adc.w	r3, r5, r3
 8005f12:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005f16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005f22:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005f26:	f04f 0200 	mov.w	r2, #0
 8005f2a:	f04f 0300 	mov.w	r3, #0
 8005f2e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005f32:	4629      	mov	r1, r5
 8005f34:	008b      	lsls	r3, r1, #2
 8005f36:	4621      	mov	r1, r4
 8005f38:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f3c:	4621      	mov	r1, r4
 8005f3e:	008a      	lsls	r2, r1, #2
 8005f40:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005f44:	f7fa fdaa 	bl	8000a9c <__aeabi_uldivmod>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	460b      	mov	r3, r1
 8005f4c:	4b60      	ldr	r3, [pc, #384]	; (80060d0 <UART_SetConfig+0x4e4>)
 8005f4e:	fba3 2302 	umull	r2, r3, r3, r2
 8005f52:	095b      	lsrs	r3, r3, #5
 8005f54:	011c      	lsls	r4, r3, #4
 8005f56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005f60:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005f64:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005f68:	4642      	mov	r2, r8
 8005f6a:	464b      	mov	r3, r9
 8005f6c:	1891      	adds	r1, r2, r2
 8005f6e:	61b9      	str	r1, [r7, #24]
 8005f70:	415b      	adcs	r3, r3
 8005f72:	61fb      	str	r3, [r7, #28]
 8005f74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f78:	4641      	mov	r1, r8
 8005f7a:	1851      	adds	r1, r2, r1
 8005f7c:	6139      	str	r1, [r7, #16]
 8005f7e:	4649      	mov	r1, r9
 8005f80:	414b      	adcs	r3, r1
 8005f82:	617b      	str	r3, [r7, #20]
 8005f84:	f04f 0200 	mov.w	r2, #0
 8005f88:	f04f 0300 	mov.w	r3, #0
 8005f8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005f90:	4659      	mov	r1, fp
 8005f92:	00cb      	lsls	r3, r1, #3
 8005f94:	4651      	mov	r1, sl
 8005f96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f9a:	4651      	mov	r1, sl
 8005f9c:	00ca      	lsls	r2, r1, #3
 8005f9e:	4610      	mov	r0, r2
 8005fa0:	4619      	mov	r1, r3
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	4642      	mov	r2, r8
 8005fa6:	189b      	adds	r3, r3, r2
 8005fa8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005fac:	464b      	mov	r3, r9
 8005fae:	460a      	mov	r2, r1
 8005fb0:	eb42 0303 	adc.w	r3, r2, r3
 8005fb4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	67bb      	str	r3, [r7, #120]	; 0x78
 8005fc2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005fc4:	f04f 0200 	mov.w	r2, #0
 8005fc8:	f04f 0300 	mov.w	r3, #0
 8005fcc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005fd0:	4649      	mov	r1, r9
 8005fd2:	008b      	lsls	r3, r1, #2
 8005fd4:	4641      	mov	r1, r8
 8005fd6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005fda:	4641      	mov	r1, r8
 8005fdc:	008a      	lsls	r2, r1, #2
 8005fde:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005fe2:	f7fa fd5b 	bl	8000a9c <__aeabi_uldivmod>
 8005fe6:	4602      	mov	r2, r0
 8005fe8:	460b      	mov	r3, r1
 8005fea:	4611      	mov	r1, r2
 8005fec:	4b38      	ldr	r3, [pc, #224]	; (80060d0 <UART_SetConfig+0x4e4>)
 8005fee:	fba3 2301 	umull	r2, r3, r3, r1
 8005ff2:	095b      	lsrs	r3, r3, #5
 8005ff4:	2264      	movs	r2, #100	; 0x64
 8005ff6:	fb02 f303 	mul.w	r3, r2, r3
 8005ffa:	1acb      	subs	r3, r1, r3
 8005ffc:	011b      	lsls	r3, r3, #4
 8005ffe:	3332      	adds	r3, #50	; 0x32
 8006000:	4a33      	ldr	r2, [pc, #204]	; (80060d0 <UART_SetConfig+0x4e4>)
 8006002:	fba2 2303 	umull	r2, r3, r2, r3
 8006006:	095b      	lsrs	r3, r3, #5
 8006008:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800600c:	441c      	add	r4, r3
 800600e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006012:	2200      	movs	r2, #0
 8006014:	673b      	str	r3, [r7, #112]	; 0x70
 8006016:	677a      	str	r2, [r7, #116]	; 0x74
 8006018:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800601c:	4642      	mov	r2, r8
 800601e:	464b      	mov	r3, r9
 8006020:	1891      	adds	r1, r2, r2
 8006022:	60b9      	str	r1, [r7, #8]
 8006024:	415b      	adcs	r3, r3
 8006026:	60fb      	str	r3, [r7, #12]
 8006028:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800602c:	4641      	mov	r1, r8
 800602e:	1851      	adds	r1, r2, r1
 8006030:	6039      	str	r1, [r7, #0]
 8006032:	4649      	mov	r1, r9
 8006034:	414b      	adcs	r3, r1
 8006036:	607b      	str	r3, [r7, #4]
 8006038:	f04f 0200 	mov.w	r2, #0
 800603c:	f04f 0300 	mov.w	r3, #0
 8006040:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006044:	4659      	mov	r1, fp
 8006046:	00cb      	lsls	r3, r1, #3
 8006048:	4651      	mov	r1, sl
 800604a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800604e:	4651      	mov	r1, sl
 8006050:	00ca      	lsls	r2, r1, #3
 8006052:	4610      	mov	r0, r2
 8006054:	4619      	mov	r1, r3
 8006056:	4603      	mov	r3, r0
 8006058:	4642      	mov	r2, r8
 800605a:	189b      	adds	r3, r3, r2
 800605c:	66bb      	str	r3, [r7, #104]	; 0x68
 800605e:	464b      	mov	r3, r9
 8006060:	460a      	mov	r2, r1
 8006062:	eb42 0303 	adc.w	r3, r2, r3
 8006066:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	2200      	movs	r2, #0
 8006070:	663b      	str	r3, [r7, #96]	; 0x60
 8006072:	667a      	str	r2, [r7, #100]	; 0x64
 8006074:	f04f 0200 	mov.w	r2, #0
 8006078:	f04f 0300 	mov.w	r3, #0
 800607c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006080:	4649      	mov	r1, r9
 8006082:	008b      	lsls	r3, r1, #2
 8006084:	4641      	mov	r1, r8
 8006086:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800608a:	4641      	mov	r1, r8
 800608c:	008a      	lsls	r2, r1, #2
 800608e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006092:	f7fa fd03 	bl	8000a9c <__aeabi_uldivmod>
 8006096:	4602      	mov	r2, r0
 8006098:	460b      	mov	r3, r1
 800609a:	4b0d      	ldr	r3, [pc, #52]	; (80060d0 <UART_SetConfig+0x4e4>)
 800609c:	fba3 1302 	umull	r1, r3, r3, r2
 80060a0:	095b      	lsrs	r3, r3, #5
 80060a2:	2164      	movs	r1, #100	; 0x64
 80060a4:	fb01 f303 	mul.w	r3, r1, r3
 80060a8:	1ad3      	subs	r3, r2, r3
 80060aa:	011b      	lsls	r3, r3, #4
 80060ac:	3332      	adds	r3, #50	; 0x32
 80060ae:	4a08      	ldr	r2, [pc, #32]	; (80060d0 <UART_SetConfig+0x4e4>)
 80060b0:	fba2 2303 	umull	r2, r3, r2, r3
 80060b4:	095b      	lsrs	r3, r3, #5
 80060b6:	f003 020f 	and.w	r2, r3, #15
 80060ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4422      	add	r2, r4
 80060c2:	609a      	str	r2, [r3, #8]
}
 80060c4:	bf00      	nop
 80060c6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80060ca:	46bd      	mov	sp, r7
 80060cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80060d0:	51eb851f 	.word	0x51eb851f

080060d4 <siprintf>:
 80060d4:	b40e      	push	{r1, r2, r3}
 80060d6:	b500      	push	{lr}
 80060d8:	b09c      	sub	sp, #112	; 0x70
 80060da:	ab1d      	add	r3, sp, #116	; 0x74
 80060dc:	9002      	str	r0, [sp, #8]
 80060de:	9006      	str	r0, [sp, #24]
 80060e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80060e4:	4809      	ldr	r0, [pc, #36]	; (800610c <siprintf+0x38>)
 80060e6:	9107      	str	r1, [sp, #28]
 80060e8:	9104      	str	r1, [sp, #16]
 80060ea:	4909      	ldr	r1, [pc, #36]	; (8006110 <siprintf+0x3c>)
 80060ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80060f0:	9105      	str	r1, [sp, #20]
 80060f2:	6800      	ldr	r0, [r0, #0]
 80060f4:	9301      	str	r3, [sp, #4]
 80060f6:	a902      	add	r1, sp, #8
 80060f8:	f000 f9d6 	bl	80064a8 <_svfiprintf_r>
 80060fc:	9b02      	ldr	r3, [sp, #8]
 80060fe:	2200      	movs	r2, #0
 8006100:	701a      	strb	r2, [r3, #0]
 8006102:	b01c      	add	sp, #112	; 0x70
 8006104:	f85d eb04 	ldr.w	lr, [sp], #4
 8006108:	b003      	add	sp, #12
 800610a:	4770      	bx	lr
 800610c:	20000058 	.word	0x20000058
 8006110:	ffff0208 	.word	0xffff0208

08006114 <siscanf>:
 8006114:	b40e      	push	{r1, r2, r3}
 8006116:	b510      	push	{r4, lr}
 8006118:	b09f      	sub	sp, #124	; 0x7c
 800611a:	ac21      	add	r4, sp, #132	; 0x84
 800611c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8006120:	f854 2b04 	ldr.w	r2, [r4], #4
 8006124:	9201      	str	r2, [sp, #4]
 8006126:	f8ad 101c 	strh.w	r1, [sp, #28]
 800612a:	9004      	str	r0, [sp, #16]
 800612c:	9008      	str	r0, [sp, #32]
 800612e:	f7fa f86f 	bl	8000210 <strlen>
 8006132:	4b0c      	ldr	r3, [pc, #48]	; (8006164 <siscanf+0x50>)
 8006134:	9005      	str	r0, [sp, #20]
 8006136:	9009      	str	r0, [sp, #36]	; 0x24
 8006138:	930d      	str	r3, [sp, #52]	; 0x34
 800613a:	480b      	ldr	r0, [pc, #44]	; (8006168 <siscanf+0x54>)
 800613c:	9a01      	ldr	r2, [sp, #4]
 800613e:	6800      	ldr	r0, [r0, #0]
 8006140:	9403      	str	r4, [sp, #12]
 8006142:	2300      	movs	r3, #0
 8006144:	9311      	str	r3, [sp, #68]	; 0x44
 8006146:	9316      	str	r3, [sp, #88]	; 0x58
 8006148:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800614c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8006150:	a904      	add	r1, sp, #16
 8006152:	4623      	mov	r3, r4
 8006154:	f000 fb00 	bl	8006758 <__ssvfiscanf_r>
 8006158:	b01f      	add	sp, #124	; 0x7c
 800615a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800615e:	b003      	add	sp, #12
 8006160:	4770      	bx	lr
 8006162:	bf00      	nop
 8006164:	0800616d 	.word	0x0800616d
 8006168:	20000058 	.word	0x20000058

0800616c <__seofread>:
 800616c:	2000      	movs	r0, #0
 800616e:	4770      	bx	lr

08006170 <memset>:
 8006170:	4402      	add	r2, r0
 8006172:	4603      	mov	r3, r0
 8006174:	4293      	cmp	r3, r2
 8006176:	d100      	bne.n	800617a <memset+0xa>
 8006178:	4770      	bx	lr
 800617a:	f803 1b01 	strb.w	r1, [r3], #1
 800617e:	e7f9      	b.n	8006174 <memset+0x4>

08006180 <strstr>:
 8006180:	780a      	ldrb	r2, [r1, #0]
 8006182:	b570      	push	{r4, r5, r6, lr}
 8006184:	b96a      	cbnz	r2, 80061a2 <strstr+0x22>
 8006186:	bd70      	pop	{r4, r5, r6, pc}
 8006188:	429a      	cmp	r2, r3
 800618a:	d109      	bne.n	80061a0 <strstr+0x20>
 800618c:	460c      	mov	r4, r1
 800618e:	4605      	mov	r5, r0
 8006190:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8006194:	2b00      	cmp	r3, #0
 8006196:	d0f6      	beq.n	8006186 <strstr+0x6>
 8006198:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800619c:	429e      	cmp	r6, r3
 800619e:	d0f7      	beq.n	8006190 <strstr+0x10>
 80061a0:	3001      	adds	r0, #1
 80061a2:	7803      	ldrb	r3, [r0, #0]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d1ef      	bne.n	8006188 <strstr+0x8>
 80061a8:	4618      	mov	r0, r3
 80061aa:	e7ec      	b.n	8006186 <strstr+0x6>

080061ac <__errno>:
 80061ac:	4b01      	ldr	r3, [pc, #4]	; (80061b4 <__errno+0x8>)
 80061ae:	6818      	ldr	r0, [r3, #0]
 80061b0:	4770      	bx	lr
 80061b2:	bf00      	nop
 80061b4:	20000058 	.word	0x20000058

080061b8 <__libc_init_array>:
 80061b8:	b570      	push	{r4, r5, r6, lr}
 80061ba:	4d0d      	ldr	r5, [pc, #52]	; (80061f0 <__libc_init_array+0x38>)
 80061bc:	4c0d      	ldr	r4, [pc, #52]	; (80061f4 <__libc_init_array+0x3c>)
 80061be:	1b64      	subs	r4, r4, r5
 80061c0:	10a4      	asrs	r4, r4, #2
 80061c2:	2600      	movs	r6, #0
 80061c4:	42a6      	cmp	r6, r4
 80061c6:	d109      	bne.n	80061dc <__libc_init_array+0x24>
 80061c8:	4d0b      	ldr	r5, [pc, #44]	; (80061f8 <__libc_init_array+0x40>)
 80061ca:	4c0c      	ldr	r4, [pc, #48]	; (80061fc <__libc_init_array+0x44>)
 80061cc:	f001 f8f6 	bl	80073bc <_init>
 80061d0:	1b64      	subs	r4, r4, r5
 80061d2:	10a4      	asrs	r4, r4, #2
 80061d4:	2600      	movs	r6, #0
 80061d6:	42a6      	cmp	r6, r4
 80061d8:	d105      	bne.n	80061e6 <__libc_init_array+0x2e>
 80061da:	bd70      	pop	{r4, r5, r6, pc}
 80061dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80061e0:	4798      	blx	r3
 80061e2:	3601      	adds	r6, #1
 80061e4:	e7ee      	b.n	80061c4 <__libc_init_array+0xc>
 80061e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80061ea:	4798      	blx	r3
 80061ec:	3601      	adds	r6, #1
 80061ee:	e7f2      	b.n	80061d6 <__libc_init_array+0x1e>
 80061f0:	080075f8 	.word	0x080075f8
 80061f4:	080075f8 	.word	0x080075f8
 80061f8:	080075f8 	.word	0x080075f8
 80061fc:	080075fc 	.word	0x080075fc

08006200 <__retarget_lock_acquire_recursive>:
 8006200:	4770      	bx	lr

08006202 <__retarget_lock_release_recursive>:
 8006202:	4770      	bx	lr

08006204 <_free_r>:
 8006204:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006206:	2900      	cmp	r1, #0
 8006208:	d044      	beq.n	8006294 <_free_r+0x90>
 800620a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800620e:	9001      	str	r0, [sp, #4]
 8006210:	2b00      	cmp	r3, #0
 8006212:	f1a1 0404 	sub.w	r4, r1, #4
 8006216:	bfb8      	it	lt
 8006218:	18e4      	addlt	r4, r4, r3
 800621a:	f000 f8df 	bl	80063dc <__malloc_lock>
 800621e:	4a1e      	ldr	r2, [pc, #120]	; (8006298 <_free_r+0x94>)
 8006220:	9801      	ldr	r0, [sp, #4]
 8006222:	6813      	ldr	r3, [r2, #0]
 8006224:	b933      	cbnz	r3, 8006234 <_free_r+0x30>
 8006226:	6063      	str	r3, [r4, #4]
 8006228:	6014      	str	r4, [r2, #0]
 800622a:	b003      	add	sp, #12
 800622c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006230:	f000 b8da 	b.w	80063e8 <__malloc_unlock>
 8006234:	42a3      	cmp	r3, r4
 8006236:	d908      	bls.n	800624a <_free_r+0x46>
 8006238:	6825      	ldr	r5, [r4, #0]
 800623a:	1961      	adds	r1, r4, r5
 800623c:	428b      	cmp	r3, r1
 800623e:	bf01      	itttt	eq
 8006240:	6819      	ldreq	r1, [r3, #0]
 8006242:	685b      	ldreq	r3, [r3, #4]
 8006244:	1949      	addeq	r1, r1, r5
 8006246:	6021      	streq	r1, [r4, #0]
 8006248:	e7ed      	b.n	8006226 <_free_r+0x22>
 800624a:	461a      	mov	r2, r3
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	b10b      	cbz	r3, 8006254 <_free_r+0x50>
 8006250:	42a3      	cmp	r3, r4
 8006252:	d9fa      	bls.n	800624a <_free_r+0x46>
 8006254:	6811      	ldr	r1, [r2, #0]
 8006256:	1855      	adds	r5, r2, r1
 8006258:	42a5      	cmp	r5, r4
 800625a:	d10b      	bne.n	8006274 <_free_r+0x70>
 800625c:	6824      	ldr	r4, [r4, #0]
 800625e:	4421      	add	r1, r4
 8006260:	1854      	adds	r4, r2, r1
 8006262:	42a3      	cmp	r3, r4
 8006264:	6011      	str	r1, [r2, #0]
 8006266:	d1e0      	bne.n	800622a <_free_r+0x26>
 8006268:	681c      	ldr	r4, [r3, #0]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	6053      	str	r3, [r2, #4]
 800626e:	440c      	add	r4, r1
 8006270:	6014      	str	r4, [r2, #0]
 8006272:	e7da      	b.n	800622a <_free_r+0x26>
 8006274:	d902      	bls.n	800627c <_free_r+0x78>
 8006276:	230c      	movs	r3, #12
 8006278:	6003      	str	r3, [r0, #0]
 800627a:	e7d6      	b.n	800622a <_free_r+0x26>
 800627c:	6825      	ldr	r5, [r4, #0]
 800627e:	1961      	adds	r1, r4, r5
 8006280:	428b      	cmp	r3, r1
 8006282:	bf04      	itt	eq
 8006284:	6819      	ldreq	r1, [r3, #0]
 8006286:	685b      	ldreq	r3, [r3, #4]
 8006288:	6063      	str	r3, [r4, #4]
 800628a:	bf04      	itt	eq
 800628c:	1949      	addeq	r1, r1, r5
 800628e:	6021      	streq	r1, [r4, #0]
 8006290:	6054      	str	r4, [r2, #4]
 8006292:	e7ca      	b.n	800622a <_free_r+0x26>
 8006294:	b003      	add	sp, #12
 8006296:	bd30      	pop	{r4, r5, pc}
 8006298:	200003ec 	.word	0x200003ec

0800629c <sbrk_aligned>:
 800629c:	b570      	push	{r4, r5, r6, lr}
 800629e:	4e0e      	ldr	r6, [pc, #56]	; (80062d8 <sbrk_aligned+0x3c>)
 80062a0:	460c      	mov	r4, r1
 80062a2:	6831      	ldr	r1, [r6, #0]
 80062a4:	4605      	mov	r5, r0
 80062a6:	b911      	cbnz	r1, 80062ae <sbrk_aligned+0x12>
 80062a8:	f000 ff3a 	bl	8007120 <_sbrk_r>
 80062ac:	6030      	str	r0, [r6, #0]
 80062ae:	4621      	mov	r1, r4
 80062b0:	4628      	mov	r0, r5
 80062b2:	f000 ff35 	bl	8007120 <_sbrk_r>
 80062b6:	1c43      	adds	r3, r0, #1
 80062b8:	d00a      	beq.n	80062d0 <sbrk_aligned+0x34>
 80062ba:	1cc4      	adds	r4, r0, #3
 80062bc:	f024 0403 	bic.w	r4, r4, #3
 80062c0:	42a0      	cmp	r0, r4
 80062c2:	d007      	beq.n	80062d4 <sbrk_aligned+0x38>
 80062c4:	1a21      	subs	r1, r4, r0
 80062c6:	4628      	mov	r0, r5
 80062c8:	f000 ff2a 	bl	8007120 <_sbrk_r>
 80062cc:	3001      	adds	r0, #1
 80062ce:	d101      	bne.n	80062d4 <sbrk_aligned+0x38>
 80062d0:	f04f 34ff 	mov.w	r4, #4294967295
 80062d4:	4620      	mov	r0, r4
 80062d6:	bd70      	pop	{r4, r5, r6, pc}
 80062d8:	200003f0 	.word	0x200003f0

080062dc <_malloc_r>:
 80062dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062e0:	1ccd      	adds	r5, r1, #3
 80062e2:	f025 0503 	bic.w	r5, r5, #3
 80062e6:	3508      	adds	r5, #8
 80062e8:	2d0c      	cmp	r5, #12
 80062ea:	bf38      	it	cc
 80062ec:	250c      	movcc	r5, #12
 80062ee:	2d00      	cmp	r5, #0
 80062f0:	4607      	mov	r7, r0
 80062f2:	db01      	blt.n	80062f8 <_malloc_r+0x1c>
 80062f4:	42a9      	cmp	r1, r5
 80062f6:	d905      	bls.n	8006304 <_malloc_r+0x28>
 80062f8:	230c      	movs	r3, #12
 80062fa:	603b      	str	r3, [r7, #0]
 80062fc:	2600      	movs	r6, #0
 80062fe:	4630      	mov	r0, r6
 8006300:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006304:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80063d8 <_malloc_r+0xfc>
 8006308:	f000 f868 	bl	80063dc <__malloc_lock>
 800630c:	f8d8 3000 	ldr.w	r3, [r8]
 8006310:	461c      	mov	r4, r3
 8006312:	bb5c      	cbnz	r4, 800636c <_malloc_r+0x90>
 8006314:	4629      	mov	r1, r5
 8006316:	4638      	mov	r0, r7
 8006318:	f7ff ffc0 	bl	800629c <sbrk_aligned>
 800631c:	1c43      	adds	r3, r0, #1
 800631e:	4604      	mov	r4, r0
 8006320:	d155      	bne.n	80063ce <_malloc_r+0xf2>
 8006322:	f8d8 4000 	ldr.w	r4, [r8]
 8006326:	4626      	mov	r6, r4
 8006328:	2e00      	cmp	r6, #0
 800632a:	d145      	bne.n	80063b8 <_malloc_r+0xdc>
 800632c:	2c00      	cmp	r4, #0
 800632e:	d048      	beq.n	80063c2 <_malloc_r+0xe6>
 8006330:	6823      	ldr	r3, [r4, #0]
 8006332:	4631      	mov	r1, r6
 8006334:	4638      	mov	r0, r7
 8006336:	eb04 0903 	add.w	r9, r4, r3
 800633a:	f000 fef1 	bl	8007120 <_sbrk_r>
 800633e:	4581      	cmp	r9, r0
 8006340:	d13f      	bne.n	80063c2 <_malloc_r+0xe6>
 8006342:	6821      	ldr	r1, [r4, #0]
 8006344:	1a6d      	subs	r5, r5, r1
 8006346:	4629      	mov	r1, r5
 8006348:	4638      	mov	r0, r7
 800634a:	f7ff ffa7 	bl	800629c <sbrk_aligned>
 800634e:	3001      	adds	r0, #1
 8006350:	d037      	beq.n	80063c2 <_malloc_r+0xe6>
 8006352:	6823      	ldr	r3, [r4, #0]
 8006354:	442b      	add	r3, r5
 8006356:	6023      	str	r3, [r4, #0]
 8006358:	f8d8 3000 	ldr.w	r3, [r8]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d038      	beq.n	80063d2 <_malloc_r+0xf6>
 8006360:	685a      	ldr	r2, [r3, #4]
 8006362:	42a2      	cmp	r2, r4
 8006364:	d12b      	bne.n	80063be <_malloc_r+0xe2>
 8006366:	2200      	movs	r2, #0
 8006368:	605a      	str	r2, [r3, #4]
 800636a:	e00f      	b.n	800638c <_malloc_r+0xb0>
 800636c:	6822      	ldr	r2, [r4, #0]
 800636e:	1b52      	subs	r2, r2, r5
 8006370:	d41f      	bmi.n	80063b2 <_malloc_r+0xd6>
 8006372:	2a0b      	cmp	r2, #11
 8006374:	d917      	bls.n	80063a6 <_malloc_r+0xca>
 8006376:	1961      	adds	r1, r4, r5
 8006378:	42a3      	cmp	r3, r4
 800637a:	6025      	str	r5, [r4, #0]
 800637c:	bf18      	it	ne
 800637e:	6059      	strne	r1, [r3, #4]
 8006380:	6863      	ldr	r3, [r4, #4]
 8006382:	bf08      	it	eq
 8006384:	f8c8 1000 	streq.w	r1, [r8]
 8006388:	5162      	str	r2, [r4, r5]
 800638a:	604b      	str	r3, [r1, #4]
 800638c:	4638      	mov	r0, r7
 800638e:	f104 060b 	add.w	r6, r4, #11
 8006392:	f000 f829 	bl	80063e8 <__malloc_unlock>
 8006396:	f026 0607 	bic.w	r6, r6, #7
 800639a:	1d23      	adds	r3, r4, #4
 800639c:	1af2      	subs	r2, r6, r3
 800639e:	d0ae      	beq.n	80062fe <_malloc_r+0x22>
 80063a0:	1b9b      	subs	r3, r3, r6
 80063a2:	50a3      	str	r3, [r4, r2]
 80063a4:	e7ab      	b.n	80062fe <_malloc_r+0x22>
 80063a6:	42a3      	cmp	r3, r4
 80063a8:	6862      	ldr	r2, [r4, #4]
 80063aa:	d1dd      	bne.n	8006368 <_malloc_r+0x8c>
 80063ac:	f8c8 2000 	str.w	r2, [r8]
 80063b0:	e7ec      	b.n	800638c <_malloc_r+0xb0>
 80063b2:	4623      	mov	r3, r4
 80063b4:	6864      	ldr	r4, [r4, #4]
 80063b6:	e7ac      	b.n	8006312 <_malloc_r+0x36>
 80063b8:	4634      	mov	r4, r6
 80063ba:	6876      	ldr	r6, [r6, #4]
 80063bc:	e7b4      	b.n	8006328 <_malloc_r+0x4c>
 80063be:	4613      	mov	r3, r2
 80063c0:	e7cc      	b.n	800635c <_malloc_r+0x80>
 80063c2:	230c      	movs	r3, #12
 80063c4:	603b      	str	r3, [r7, #0]
 80063c6:	4638      	mov	r0, r7
 80063c8:	f000 f80e 	bl	80063e8 <__malloc_unlock>
 80063cc:	e797      	b.n	80062fe <_malloc_r+0x22>
 80063ce:	6025      	str	r5, [r4, #0]
 80063d0:	e7dc      	b.n	800638c <_malloc_r+0xb0>
 80063d2:	605b      	str	r3, [r3, #4]
 80063d4:	deff      	udf	#255	; 0xff
 80063d6:	bf00      	nop
 80063d8:	200003ec 	.word	0x200003ec

080063dc <__malloc_lock>:
 80063dc:	4801      	ldr	r0, [pc, #4]	; (80063e4 <__malloc_lock+0x8>)
 80063de:	f7ff bf0f 	b.w	8006200 <__retarget_lock_acquire_recursive>
 80063e2:	bf00      	nop
 80063e4:	200003e8 	.word	0x200003e8

080063e8 <__malloc_unlock>:
 80063e8:	4801      	ldr	r0, [pc, #4]	; (80063f0 <__malloc_unlock+0x8>)
 80063ea:	f7ff bf0a 	b.w	8006202 <__retarget_lock_release_recursive>
 80063ee:	bf00      	nop
 80063f0:	200003e8 	.word	0x200003e8

080063f4 <__ssputs_r>:
 80063f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063f8:	688e      	ldr	r6, [r1, #8]
 80063fa:	461f      	mov	r7, r3
 80063fc:	42be      	cmp	r6, r7
 80063fe:	680b      	ldr	r3, [r1, #0]
 8006400:	4682      	mov	sl, r0
 8006402:	460c      	mov	r4, r1
 8006404:	4690      	mov	r8, r2
 8006406:	d82c      	bhi.n	8006462 <__ssputs_r+0x6e>
 8006408:	898a      	ldrh	r2, [r1, #12]
 800640a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800640e:	d026      	beq.n	800645e <__ssputs_r+0x6a>
 8006410:	6965      	ldr	r5, [r4, #20]
 8006412:	6909      	ldr	r1, [r1, #16]
 8006414:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006418:	eba3 0901 	sub.w	r9, r3, r1
 800641c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006420:	1c7b      	adds	r3, r7, #1
 8006422:	444b      	add	r3, r9
 8006424:	106d      	asrs	r5, r5, #1
 8006426:	429d      	cmp	r5, r3
 8006428:	bf38      	it	cc
 800642a:	461d      	movcc	r5, r3
 800642c:	0553      	lsls	r3, r2, #21
 800642e:	d527      	bpl.n	8006480 <__ssputs_r+0x8c>
 8006430:	4629      	mov	r1, r5
 8006432:	f7ff ff53 	bl	80062dc <_malloc_r>
 8006436:	4606      	mov	r6, r0
 8006438:	b360      	cbz	r0, 8006494 <__ssputs_r+0xa0>
 800643a:	6921      	ldr	r1, [r4, #16]
 800643c:	464a      	mov	r2, r9
 800643e:	f000 fe7f 	bl	8007140 <memcpy>
 8006442:	89a3      	ldrh	r3, [r4, #12]
 8006444:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006448:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800644c:	81a3      	strh	r3, [r4, #12]
 800644e:	6126      	str	r6, [r4, #16]
 8006450:	6165      	str	r5, [r4, #20]
 8006452:	444e      	add	r6, r9
 8006454:	eba5 0509 	sub.w	r5, r5, r9
 8006458:	6026      	str	r6, [r4, #0]
 800645a:	60a5      	str	r5, [r4, #8]
 800645c:	463e      	mov	r6, r7
 800645e:	42be      	cmp	r6, r7
 8006460:	d900      	bls.n	8006464 <__ssputs_r+0x70>
 8006462:	463e      	mov	r6, r7
 8006464:	6820      	ldr	r0, [r4, #0]
 8006466:	4632      	mov	r2, r6
 8006468:	4641      	mov	r1, r8
 800646a:	f000 fe3e 	bl	80070ea <memmove>
 800646e:	68a3      	ldr	r3, [r4, #8]
 8006470:	1b9b      	subs	r3, r3, r6
 8006472:	60a3      	str	r3, [r4, #8]
 8006474:	6823      	ldr	r3, [r4, #0]
 8006476:	4433      	add	r3, r6
 8006478:	6023      	str	r3, [r4, #0]
 800647a:	2000      	movs	r0, #0
 800647c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006480:	462a      	mov	r2, r5
 8006482:	f000 fe6b 	bl	800715c <_realloc_r>
 8006486:	4606      	mov	r6, r0
 8006488:	2800      	cmp	r0, #0
 800648a:	d1e0      	bne.n	800644e <__ssputs_r+0x5a>
 800648c:	6921      	ldr	r1, [r4, #16]
 800648e:	4650      	mov	r0, sl
 8006490:	f7ff feb8 	bl	8006204 <_free_r>
 8006494:	230c      	movs	r3, #12
 8006496:	f8ca 3000 	str.w	r3, [sl]
 800649a:	89a3      	ldrh	r3, [r4, #12]
 800649c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064a0:	81a3      	strh	r3, [r4, #12]
 80064a2:	f04f 30ff 	mov.w	r0, #4294967295
 80064a6:	e7e9      	b.n	800647c <__ssputs_r+0x88>

080064a8 <_svfiprintf_r>:
 80064a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064ac:	4698      	mov	r8, r3
 80064ae:	898b      	ldrh	r3, [r1, #12]
 80064b0:	061b      	lsls	r3, r3, #24
 80064b2:	b09d      	sub	sp, #116	; 0x74
 80064b4:	4607      	mov	r7, r0
 80064b6:	460d      	mov	r5, r1
 80064b8:	4614      	mov	r4, r2
 80064ba:	d50e      	bpl.n	80064da <_svfiprintf_r+0x32>
 80064bc:	690b      	ldr	r3, [r1, #16]
 80064be:	b963      	cbnz	r3, 80064da <_svfiprintf_r+0x32>
 80064c0:	2140      	movs	r1, #64	; 0x40
 80064c2:	f7ff ff0b 	bl	80062dc <_malloc_r>
 80064c6:	6028      	str	r0, [r5, #0]
 80064c8:	6128      	str	r0, [r5, #16]
 80064ca:	b920      	cbnz	r0, 80064d6 <_svfiprintf_r+0x2e>
 80064cc:	230c      	movs	r3, #12
 80064ce:	603b      	str	r3, [r7, #0]
 80064d0:	f04f 30ff 	mov.w	r0, #4294967295
 80064d4:	e0d0      	b.n	8006678 <_svfiprintf_r+0x1d0>
 80064d6:	2340      	movs	r3, #64	; 0x40
 80064d8:	616b      	str	r3, [r5, #20]
 80064da:	2300      	movs	r3, #0
 80064dc:	9309      	str	r3, [sp, #36]	; 0x24
 80064de:	2320      	movs	r3, #32
 80064e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80064e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80064e8:	2330      	movs	r3, #48	; 0x30
 80064ea:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006690 <_svfiprintf_r+0x1e8>
 80064ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80064f2:	f04f 0901 	mov.w	r9, #1
 80064f6:	4623      	mov	r3, r4
 80064f8:	469a      	mov	sl, r3
 80064fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80064fe:	b10a      	cbz	r2, 8006504 <_svfiprintf_r+0x5c>
 8006500:	2a25      	cmp	r2, #37	; 0x25
 8006502:	d1f9      	bne.n	80064f8 <_svfiprintf_r+0x50>
 8006504:	ebba 0b04 	subs.w	fp, sl, r4
 8006508:	d00b      	beq.n	8006522 <_svfiprintf_r+0x7a>
 800650a:	465b      	mov	r3, fp
 800650c:	4622      	mov	r2, r4
 800650e:	4629      	mov	r1, r5
 8006510:	4638      	mov	r0, r7
 8006512:	f7ff ff6f 	bl	80063f4 <__ssputs_r>
 8006516:	3001      	adds	r0, #1
 8006518:	f000 80a9 	beq.w	800666e <_svfiprintf_r+0x1c6>
 800651c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800651e:	445a      	add	r2, fp
 8006520:	9209      	str	r2, [sp, #36]	; 0x24
 8006522:	f89a 3000 	ldrb.w	r3, [sl]
 8006526:	2b00      	cmp	r3, #0
 8006528:	f000 80a1 	beq.w	800666e <_svfiprintf_r+0x1c6>
 800652c:	2300      	movs	r3, #0
 800652e:	f04f 32ff 	mov.w	r2, #4294967295
 8006532:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006536:	f10a 0a01 	add.w	sl, sl, #1
 800653a:	9304      	str	r3, [sp, #16]
 800653c:	9307      	str	r3, [sp, #28]
 800653e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006542:	931a      	str	r3, [sp, #104]	; 0x68
 8006544:	4654      	mov	r4, sl
 8006546:	2205      	movs	r2, #5
 8006548:	f814 1b01 	ldrb.w	r1, [r4], #1
 800654c:	4850      	ldr	r0, [pc, #320]	; (8006690 <_svfiprintf_r+0x1e8>)
 800654e:	f7f9 fe67 	bl	8000220 <memchr>
 8006552:	9a04      	ldr	r2, [sp, #16]
 8006554:	b9d8      	cbnz	r0, 800658e <_svfiprintf_r+0xe6>
 8006556:	06d0      	lsls	r0, r2, #27
 8006558:	bf44      	itt	mi
 800655a:	2320      	movmi	r3, #32
 800655c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006560:	0711      	lsls	r1, r2, #28
 8006562:	bf44      	itt	mi
 8006564:	232b      	movmi	r3, #43	; 0x2b
 8006566:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800656a:	f89a 3000 	ldrb.w	r3, [sl]
 800656e:	2b2a      	cmp	r3, #42	; 0x2a
 8006570:	d015      	beq.n	800659e <_svfiprintf_r+0xf6>
 8006572:	9a07      	ldr	r2, [sp, #28]
 8006574:	4654      	mov	r4, sl
 8006576:	2000      	movs	r0, #0
 8006578:	f04f 0c0a 	mov.w	ip, #10
 800657c:	4621      	mov	r1, r4
 800657e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006582:	3b30      	subs	r3, #48	; 0x30
 8006584:	2b09      	cmp	r3, #9
 8006586:	d94d      	bls.n	8006624 <_svfiprintf_r+0x17c>
 8006588:	b1b0      	cbz	r0, 80065b8 <_svfiprintf_r+0x110>
 800658a:	9207      	str	r2, [sp, #28]
 800658c:	e014      	b.n	80065b8 <_svfiprintf_r+0x110>
 800658e:	eba0 0308 	sub.w	r3, r0, r8
 8006592:	fa09 f303 	lsl.w	r3, r9, r3
 8006596:	4313      	orrs	r3, r2
 8006598:	9304      	str	r3, [sp, #16]
 800659a:	46a2      	mov	sl, r4
 800659c:	e7d2      	b.n	8006544 <_svfiprintf_r+0x9c>
 800659e:	9b03      	ldr	r3, [sp, #12]
 80065a0:	1d19      	adds	r1, r3, #4
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	9103      	str	r1, [sp, #12]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	bfbb      	ittet	lt
 80065aa:	425b      	neglt	r3, r3
 80065ac:	f042 0202 	orrlt.w	r2, r2, #2
 80065b0:	9307      	strge	r3, [sp, #28]
 80065b2:	9307      	strlt	r3, [sp, #28]
 80065b4:	bfb8      	it	lt
 80065b6:	9204      	strlt	r2, [sp, #16]
 80065b8:	7823      	ldrb	r3, [r4, #0]
 80065ba:	2b2e      	cmp	r3, #46	; 0x2e
 80065bc:	d10c      	bne.n	80065d8 <_svfiprintf_r+0x130>
 80065be:	7863      	ldrb	r3, [r4, #1]
 80065c0:	2b2a      	cmp	r3, #42	; 0x2a
 80065c2:	d134      	bne.n	800662e <_svfiprintf_r+0x186>
 80065c4:	9b03      	ldr	r3, [sp, #12]
 80065c6:	1d1a      	adds	r2, r3, #4
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	9203      	str	r2, [sp, #12]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	bfb8      	it	lt
 80065d0:	f04f 33ff 	movlt.w	r3, #4294967295
 80065d4:	3402      	adds	r4, #2
 80065d6:	9305      	str	r3, [sp, #20]
 80065d8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80066a0 <_svfiprintf_r+0x1f8>
 80065dc:	7821      	ldrb	r1, [r4, #0]
 80065de:	2203      	movs	r2, #3
 80065e0:	4650      	mov	r0, sl
 80065e2:	f7f9 fe1d 	bl	8000220 <memchr>
 80065e6:	b138      	cbz	r0, 80065f8 <_svfiprintf_r+0x150>
 80065e8:	9b04      	ldr	r3, [sp, #16]
 80065ea:	eba0 000a 	sub.w	r0, r0, sl
 80065ee:	2240      	movs	r2, #64	; 0x40
 80065f0:	4082      	lsls	r2, r0
 80065f2:	4313      	orrs	r3, r2
 80065f4:	3401      	adds	r4, #1
 80065f6:	9304      	str	r3, [sp, #16]
 80065f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065fc:	4825      	ldr	r0, [pc, #148]	; (8006694 <_svfiprintf_r+0x1ec>)
 80065fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006602:	2206      	movs	r2, #6
 8006604:	f7f9 fe0c 	bl	8000220 <memchr>
 8006608:	2800      	cmp	r0, #0
 800660a:	d038      	beq.n	800667e <_svfiprintf_r+0x1d6>
 800660c:	4b22      	ldr	r3, [pc, #136]	; (8006698 <_svfiprintf_r+0x1f0>)
 800660e:	bb1b      	cbnz	r3, 8006658 <_svfiprintf_r+0x1b0>
 8006610:	9b03      	ldr	r3, [sp, #12]
 8006612:	3307      	adds	r3, #7
 8006614:	f023 0307 	bic.w	r3, r3, #7
 8006618:	3308      	adds	r3, #8
 800661a:	9303      	str	r3, [sp, #12]
 800661c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800661e:	4433      	add	r3, r6
 8006620:	9309      	str	r3, [sp, #36]	; 0x24
 8006622:	e768      	b.n	80064f6 <_svfiprintf_r+0x4e>
 8006624:	fb0c 3202 	mla	r2, ip, r2, r3
 8006628:	460c      	mov	r4, r1
 800662a:	2001      	movs	r0, #1
 800662c:	e7a6      	b.n	800657c <_svfiprintf_r+0xd4>
 800662e:	2300      	movs	r3, #0
 8006630:	3401      	adds	r4, #1
 8006632:	9305      	str	r3, [sp, #20]
 8006634:	4619      	mov	r1, r3
 8006636:	f04f 0c0a 	mov.w	ip, #10
 800663a:	4620      	mov	r0, r4
 800663c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006640:	3a30      	subs	r2, #48	; 0x30
 8006642:	2a09      	cmp	r2, #9
 8006644:	d903      	bls.n	800664e <_svfiprintf_r+0x1a6>
 8006646:	2b00      	cmp	r3, #0
 8006648:	d0c6      	beq.n	80065d8 <_svfiprintf_r+0x130>
 800664a:	9105      	str	r1, [sp, #20]
 800664c:	e7c4      	b.n	80065d8 <_svfiprintf_r+0x130>
 800664e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006652:	4604      	mov	r4, r0
 8006654:	2301      	movs	r3, #1
 8006656:	e7f0      	b.n	800663a <_svfiprintf_r+0x192>
 8006658:	ab03      	add	r3, sp, #12
 800665a:	9300      	str	r3, [sp, #0]
 800665c:	462a      	mov	r2, r5
 800665e:	4b0f      	ldr	r3, [pc, #60]	; (800669c <_svfiprintf_r+0x1f4>)
 8006660:	a904      	add	r1, sp, #16
 8006662:	4638      	mov	r0, r7
 8006664:	f3af 8000 	nop.w
 8006668:	1c42      	adds	r2, r0, #1
 800666a:	4606      	mov	r6, r0
 800666c:	d1d6      	bne.n	800661c <_svfiprintf_r+0x174>
 800666e:	89ab      	ldrh	r3, [r5, #12]
 8006670:	065b      	lsls	r3, r3, #25
 8006672:	f53f af2d 	bmi.w	80064d0 <_svfiprintf_r+0x28>
 8006676:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006678:	b01d      	add	sp, #116	; 0x74
 800667a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800667e:	ab03      	add	r3, sp, #12
 8006680:	9300      	str	r3, [sp, #0]
 8006682:	462a      	mov	r2, r5
 8006684:	4b05      	ldr	r3, [pc, #20]	; (800669c <_svfiprintf_r+0x1f4>)
 8006686:	a904      	add	r1, sp, #16
 8006688:	4638      	mov	r0, r7
 800668a:	f000 fa4b 	bl	8006b24 <_printf_i>
 800668e:	e7eb      	b.n	8006668 <_svfiprintf_r+0x1c0>
 8006690:	080074a0 	.word	0x080074a0
 8006694:	080074aa 	.word	0x080074aa
 8006698:	00000000 	.word	0x00000000
 800669c:	080063f5 	.word	0x080063f5
 80066a0:	080074a6 	.word	0x080074a6

080066a4 <_sungetc_r>:
 80066a4:	b538      	push	{r3, r4, r5, lr}
 80066a6:	1c4b      	adds	r3, r1, #1
 80066a8:	4614      	mov	r4, r2
 80066aa:	d103      	bne.n	80066b4 <_sungetc_r+0x10>
 80066ac:	f04f 35ff 	mov.w	r5, #4294967295
 80066b0:	4628      	mov	r0, r5
 80066b2:	bd38      	pop	{r3, r4, r5, pc}
 80066b4:	8993      	ldrh	r3, [r2, #12]
 80066b6:	f023 0320 	bic.w	r3, r3, #32
 80066ba:	8193      	strh	r3, [r2, #12]
 80066bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80066be:	6852      	ldr	r2, [r2, #4]
 80066c0:	b2cd      	uxtb	r5, r1
 80066c2:	b18b      	cbz	r3, 80066e8 <_sungetc_r+0x44>
 80066c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80066c6:	4293      	cmp	r3, r2
 80066c8:	dd08      	ble.n	80066dc <_sungetc_r+0x38>
 80066ca:	6823      	ldr	r3, [r4, #0]
 80066cc:	1e5a      	subs	r2, r3, #1
 80066ce:	6022      	str	r2, [r4, #0]
 80066d0:	f803 5c01 	strb.w	r5, [r3, #-1]
 80066d4:	6863      	ldr	r3, [r4, #4]
 80066d6:	3301      	adds	r3, #1
 80066d8:	6063      	str	r3, [r4, #4]
 80066da:	e7e9      	b.n	80066b0 <_sungetc_r+0xc>
 80066dc:	4621      	mov	r1, r4
 80066de:	f000 fcca 	bl	8007076 <__submore>
 80066e2:	2800      	cmp	r0, #0
 80066e4:	d0f1      	beq.n	80066ca <_sungetc_r+0x26>
 80066e6:	e7e1      	b.n	80066ac <_sungetc_r+0x8>
 80066e8:	6921      	ldr	r1, [r4, #16]
 80066ea:	6823      	ldr	r3, [r4, #0]
 80066ec:	b151      	cbz	r1, 8006704 <_sungetc_r+0x60>
 80066ee:	4299      	cmp	r1, r3
 80066f0:	d208      	bcs.n	8006704 <_sungetc_r+0x60>
 80066f2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80066f6:	42a9      	cmp	r1, r5
 80066f8:	d104      	bne.n	8006704 <_sungetc_r+0x60>
 80066fa:	3b01      	subs	r3, #1
 80066fc:	3201      	adds	r2, #1
 80066fe:	6023      	str	r3, [r4, #0]
 8006700:	6062      	str	r2, [r4, #4]
 8006702:	e7d5      	b.n	80066b0 <_sungetc_r+0xc>
 8006704:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8006708:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800670c:	6363      	str	r3, [r4, #52]	; 0x34
 800670e:	2303      	movs	r3, #3
 8006710:	63a3      	str	r3, [r4, #56]	; 0x38
 8006712:	4623      	mov	r3, r4
 8006714:	f803 5f46 	strb.w	r5, [r3, #70]!
 8006718:	6023      	str	r3, [r4, #0]
 800671a:	2301      	movs	r3, #1
 800671c:	e7dc      	b.n	80066d8 <_sungetc_r+0x34>

0800671e <__ssrefill_r>:
 800671e:	b510      	push	{r4, lr}
 8006720:	460c      	mov	r4, r1
 8006722:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8006724:	b169      	cbz	r1, 8006742 <__ssrefill_r+0x24>
 8006726:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800672a:	4299      	cmp	r1, r3
 800672c:	d001      	beq.n	8006732 <__ssrefill_r+0x14>
 800672e:	f7ff fd69 	bl	8006204 <_free_r>
 8006732:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006734:	6063      	str	r3, [r4, #4]
 8006736:	2000      	movs	r0, #0
 8006738:	6360      	str	r0, [r4, #52]	; 0x34
 800673a:	b113      	cbz	r3, 8006742 <__ssrefill_r+0x24>
 800673c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800673e:	6023      	str	r3, [r4, #0]
 8006740:	bd10      	pop	{r4, pc}
 8006742:	6923      	ldr	r3, [r4, #16]
 8006744:	6023      	str	r3, [r4, #0]
 8006746:	2300      	movs	r3, #0
 8006748:	6063      	str	r3, [r4, #4]
 800674a:	89a3      	ldrh	r3, [r4, #12]
 800674c:	f043 0320 	orr.w	r3, r3, #32
 8006750:	81a3      	strh	r3, [r4, #12]
 8006752:	f04f 30ff 	mov.w	r0, #4294967295
 8006756:	e7f3      	b.n	8006740 <__ssrefill_r+0x22>

08006758 <__ssvfiscanf_r>:
 8006758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800675c:	460c      	mov	r4, r1
 800675e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8006762:	2100      	movs	r1, #0
 8006764:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8006768:	49a6      	ldr	r1, [pc, #664]	; (8006a04 <__ssvfiscanf_r+0x2ac>)
 800676a:	91a0      	str	r1, [sp, #640]	; 0x280
 800676c:	f10d 0804 	add.w	r8, sp, #4
 8006770:	49a5      	ldr	r1, [pc, #660]	; (8006a08 <__ssvfiscanf_r+0x2b0>)
 8006772:	4fa6      	ldr	r7, [pc, #664]	; (8006a0c <__ssvfiscanf_r+0x2b4>)
 8006774:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8006a10 <__ssvfiscanf_r+0x2b8>
 8006778:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800677c:	4606      	mov	r6, r0
 800677e:	91a1      	str	r1, [sp, #644]	; 0x284
 8006780:	9300      	str	r3, [sp, #0]
 8006782:	7813      	ldrb	r3, [r2, #0]
 8006784:	2b00      	cmp	r3, #0
 8006786:	f000 815a 	beq.w	8006a3e <__ssvfiscanf_r+0x2e6>
 800678a:	5cf9      	ldrb	r1, [r7, r3]
 800678c:	f011 0108 	ands.w	r1, r1, #8
 8006790:	f102 0501 	add.w	r5, r2, #1
 8006794:	d019      	beq.n	80067ca <__ssvfiscanf_r+0x72>
 8006796:	6863      	ldr	r3, [r4, #4]
 8006798:	2b00      	cmp	r3, #0
 800679a:	dd0f      	ble.n	80067bc <__ssvfiscanf_r+0x64>
 800679c:	6823      	ldr	r3, [r4, #0]
 800679e:	781a      	ldrb	r2, [r3, #0]
 80067a0:	5cba      	ldrb	r2, [r7, r2]
 80067a2:	0712      	lsls	r2, r2, #28
 80067a4:	d401      	bmi.n	80067aa <__ssvfiscanf_r+0x52>
 80067a6:	462a      	mov	r2, r5
 80067a8:	e7eb      	b.n	8006782 <__ssvfiscanf_r+0x2a>
 80067aa:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80067ac:	3201      	adds	r2, #1
 80067ae:	9245      	str	r2, [sp, #276]	; 0x114
 80067b0:	6862      	ldr	r2, [r4, #4]
 80067b2:	3301      	adds	r3, #1
 80067b4:	3a01      	subs	r2, #1
 80067b6:	6062      	str	r2, [r4, #4]
 80067b8:	6023      	str	r3, [r4, #0]
 80067ba:	e7ec      	b.n	8006796 <__ssvfiscanf_r+0x3e>
 80067bc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80067be:	4621      	mov	r1, r4
 80067c0:	4630      	mov	r0, r6
 80067c2:	4798      	blx	r3
 80067c4:	2800      	cmp	r0, #0
 80067c6:	d0e9      	beq.n	800679c <__ssvfiscanf_r+0x44>
 80067c8:	e7ed      	b.n	80067a6 <__ssvfiscanf_r+0x4e>
 80067ca:	2b25      	cmp	r3, #37	; 0x25
 80067cc:	d012      	beq.n	80067f4 <__ssvfiscanf_r+0x9c>
 80067ce:	469a      	mov	sl, r3
 80067d0:	6863      	ldr	r3, [r4, #4]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	f340 8091 	ble.w	80068fa <__ssvfiscanf_r+0x1a2>
 80067d8:	6822      	ldr	r2, [r4, #0]
 80067da:	7813      	ldrb	r3, [r2, #0]
 80067dc:	4553      	cmp	r3, sl
 80067de:	f040 812e 	bne.w	8006a3e <__ssvfiscanf_r+0x2e6>
 80067e2:	6863      	ldr	r3, [r4, #4]
 80067e4:	3b01      	subs	r3, #1
 80067e6:	6063      	str	r3, [r4, #4]
 80067e8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80067ea:	3201      	adds	r2, #1
 80067ec:	3301      	adds	r3, #1
 80067ee:	6022      	str	r2, [r4, #0]
 80067f0:	9345      	str	r3, [sp, #276]	; 0x114
 80067f2:	e7d8      	b.n	80067a6 <__ssvfiscanf_r+0x4e>
 80067f4:	9141      	str	r1, [sp, #260]	; 0x104
 80067f6:	9143      	str	r1, [sp, #268]	; 0x10c
 80067f8:	7853      	ldrb	r3, [r2, #1]
 80067fa:	2b2a      	cmp	r3, #42	; 0x2a
 80067fc:	bf02      	ittt	eq
 80067fe:	2310      	moveq	r3, #16
 8006800:	1c95      	addeq	r5, r2, #2
 8006802:	9341      	streq	r3, [sp, #260]	; 0x104
 8006804:	220a      	movs	r2, #10
 8006806:	46aa      	mov	sl, r5
 8006808:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800680c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8006810:	2b09      	cmp	r3, #9
 8006812:	d91c      	bls.n	800684e <__ssvfiscanf_r+0xf6>
 8006814:	487e      	ldr	r0, [pc, #504]	; (8006a10 <__ssvfiscanf_r+0x2b8>)
 8006816:	2203      	movs	r2, #3
 8006818:	f7f9 fd02 	bl	8000220 <memchr>
 800681c:	b138      	cbz	r0, 800682e <__ssvfiscanf_r+0xd6>
 800681e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8006820:	eba0 0009 	sub.w	r0, r0, r9
 8006824:	2301      	movs	r3, #1
 8006826:	4083      	lsls	r3, r0
 8006828:	4313      	orrs	r3, r2
 800682a:	9341      	str	r3, [sp, #260]	; 0x104
 800682c:	4655      	mov	r5, sl
 800682e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006832:	2b78      	cmp	r3, #120	; 0x78
 8006834:	d806      	bhi.n	8006844 <__ssvfiscanf_r+0xec>
 8006836:	2b57      	cmp	r3, #87	; 0x57
 8006838:	d810      	bhi.n	800685c <__ssvfiscanf_r+0x104>
 800683a:	2b25      	cmp	r3, #37	; 0x25
 800683c:	d0c7      	beq.n	80067ce <__ssvfiscanf_r+0x76>
 800683e:	d857      	bhi.n	80068f0 <__ssvfiscanf_r+0x198>
 8006840:	2b00      	cmp	r3, #0
 8006842:	d065      	beq.n	8006910 <__ssvfiscanf_r+0x1b8>
 8006844:	2303      	movs	r3, #3
 8006846:	9347      	str	r3, [sp, #284]	; 0x11c
 8006848:	230a      	movs	r3, #10
 800684a:	9342      	str	r3, [sp, #264]	; 0x108
 800684c:	e076      	b.n	800693c <__ssvfiscanf_r+0x1e4>
 800684e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8006850:	fb02 1103 	mla	r1, r2, r3, r1
 8006854:	3930      	subs	r1, #48	; 0x30
 8006856:	9143      	str	r1, [sp, #268]	; 0x10c
 8006858:	4655      	mov	r5, sl
 800685a:	e7d4      	b.n	8006806 <__ssvfiscanf_r+0xae>
 800685c:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8006860:	2a20      	cmp	r2, #32
 8006862:	d8ef      	bhi.n	8006844 <__ssvfiscanf_r+0xec>
 8006864:	a101      	add	r1, pc, #4	; (adr r1, 800686c <__ssvfiscanf_r+0x114>)
 8006866:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800686a:	bf00      	nop
 800686c:	0800691f 	.word	0x0800691f
 8006870:	08006845 	.word	0x08006845
 8006874:	08006845 	.word	0x08006845
 8006878:	0800697d 	.word	0x0800697d
 800687c:	08006845 	.word	0x08006845
 8006880:	08006845 	.word	0x08006845
 8006884:	08006845 	.word	0x08006845
 8006888:	08006845 	.word	0x08006845
 800688c:	08006845 	.word	0x08006845
 8006890:	08006845 	.word	0x08006845
 8006894:	08006845 	.word	0x08006845
 8006898:	08006993 	.word	0x08006993
 800689c:	08006979 	.word	0x08006979
 80068a0:	080068f7 	.word	0x080068f7
 80068a4:	080068f7 	.word	0x080068f7
 80068a8:	080068f7 	.word	0x080068f7
 80068ac:	08006845 	.word	0x08006845
 80068b0:	08006935 	.word	0x08006935
 80068b4:	08006845 	.word	0x08006845
 80068b8:	08006845 	.word	0x08006845
 80068bc:	08006845 	.word	0x08006845
 80068c0:	08006845 	.word	0x08006845
 80068c4:	080069a3 	.word	0x080069a3
 80068c8:	08006971 	.word	0x08006971
 80068cc:	08006917 	.word	0x08006917
 80068d0:	08006845 	.word	0x08006845
 80068d4:	08006845 	.word	0x08006845
 80068d8:	0800699f 	.word	0x0800699f
 80068dc:	08006845 	.word	0x08006845
 80068e0:	08006979 	.word	0x08006979
 80068e4:	08006845 	.word	0x08006845
 80068e8:	08006845 	.word	0x08006845
 80068ec:	0800691f 	.word	0x0800691f
 80068f0:	3b45      	subs	r3, #69	; 0x45
 80068f2:	2b02      	cmp	r3, #2
 80068f4:	d8a6      	bhi.n	8006844 <__ssvfiscanf_r+0xec>
 80068f6:	2305      	movs	r3, #5
 80068f8:	e01f      	b.n	800693a <__ssvfiscanf_r+0x1e2>
 80068fa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80068fc:	4621      	mov	r1, r4
 80068fe:	4630      	mov	r0, r6
 8006900:	4798      	blx	r3
 8006902:	2800      	cmp	r0, #0
 8006904:	f43f af68 	beq.w	80067d8 <__ssvfiscanf_r+0x80>
 8006908:	9844      	ldr	r0, [sp, #272]	; 0x110
 800690a:	2800      	cmp	r0, #0
 800690c:	f040 808d 	bne.w	8006a2a <__ssvfiscanf_r+0x2d2>
 8006910:	f04f 30ff 	mov.w	r0, #4294967295
 8006914:	e08f      	b.n	8006a36 <__ssvfiscanf_r+0x2de>
 8006916:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8006918:	f042 0220 	orr.w	r2, r2, #32
 800691c:	9241      	str	r2, [sp, #260]	; 0x104
 800691e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8006920:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006924:	9241      	str	r2, [sp, #260]	; 0x104
 8006926:	2210      	movs	r2, #16
 8006928:	2b6f      	cmp	r3, #111	; 0x6f
 800692a:	9242      	str	r2, [sp, #264]	; 0x108
 800692c:	bf34      	ite	cc
 800692e:	2303      	movcc	r3, #3
 8006930:	2304      	movcs	r3, #4
 8006932:	e002      	b.n	800693a <__ssvfiscanf_r+0x1e2>
 8006934:	2300      	movs	r3, #0
 8006936:	9342      	str	r3, [sp, #264]	; 0x108
 8006938:	2303      	movs	r3, #3
 800693a:	9347      	str	r3, [sp, #284]	; 0x11c
 800693c:	6863      	ldr	r3, [r4, #4]
 800693e:	2b00      	cmp	r3, #0
 8006940:	dd3d      	ble.n	80069be <__ssvfiscanf_r+0x266>
 8006942:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006944:	0659      	lsls	r1, r3, #25
 8006946:	d404      	bmi.n	8006952 <__ssvfiscanf_r+0x1fa>
 8006948:	6823      	ldr	r3, [r4, #0]
 800694a:	781a      	ldrb	r2, [r3, #0]
 800694c:	5cba      	ldrb	r2, [r7, r2]
 800694e:	0712      	lsls	r2, r2, #28
 8006950:	d43c      	bmi.n	80069cc <__ssvfiscanf_r+0x274>
 8006952:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8006954:	2b02      	cmp	r3, #2
 8006956:	dc4b      	bgt.n	80069f0 <__ssvfiscanf_r+0x298>
 8006958:	466b      	mov	r3, sp
 800695a:	4622      	mov	r2, r4
 800695c:	a941      	add	r1, sp, #260	; 0x104
 800695e:	4630      	mov	r0, r6
 8006960:	f000 fa02 	bl	8006d68 <_scanf_chars>
 8006964:	2801      	cmp	r0, #1
 8006966:	d06a      	beq.n	8006a3e <__ssvfiscanf_r+0x2e6>
 8006968:	2802      	cmp	r0, #2
 800696a:	f47f af1c 	bne.w	80067a6 <__ssvfiscanf_r+0x4e>
 800696e:	e7cb      	b.n	8006908 <__ssvfiscanf_r+0x1b0>
 8006970:	2308      	movs	r3, #8
 8006972:	9342      	str	r3, [sp, #264]	; 0x108
 8006974:	2304      	movs	r3, #4
 8006976:	e7e0      	b.n	800693a <__ssvfiscanf_r+0x1e2>
 8006978:	220a      	movs	r2, #10
 800697a:	e7d5      	b.n	8006928 <__ssvfiscanf_r+0x1d0>
 800697c:	4629      	mov	r1, r5
 800697e:	4640      	mov	r0, r8
 8006980:	f000 fb40 	bl	8007004 <__sccl>
 8006984:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006986:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800698a:	9341      	str	r3, [sp, #260]	; 0x104
 800698c:	4605      	mov	r5, r0
 800698e:	2301      	movs	r3, #1
 8006990:	e7d3      	b.n	800693a <__ssvfiscanf_r+0x1e2>
 8006992:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006994:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006998:	9341      	str	r3, [sp, #260]	; 0x104
 800699a:	2300      	movs	r3, #0
 800699c:	e7cd      	b.n	800693a <__ssvfiscanf_r+0x1e2>
 800699e:	2302      	movs	r3, #2
 80069a0:	e7cb      	b.n	800693a <__ssvfiscanf_r+0x1e2>
 80069a2:	9841      	ldr	r0, [sp, #260]	; 0x104
 80069a4:	06c3      	lsls	r3, r0, #27
 80069a6:	f53f aefe 	bmi.w	80067a6 <__ssvfiscanf_r+0x4e>
 80069aa:	9b00      	ldr	r3, [sp, #0]
 80069ac:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80069ae:	1d19      	adds	r1, r3, #4
 80069b0:	9100      	str	r1, [sp, #0]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	07c0      	lsls	r0, r0, #31
 80069b6:	bf4c      	ite	mi
 80069b8:	801a      	strhmi	r2, [r3, #0]
 80069ba:	601a      	strpl	r2, [r3, #0]
 80069bc:	e6f3      	b.n	80067a6 <__ssvfiscanf_r+0x4e>
 80069be:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80069c0:	4621      	mov	r1, r4
 80069c2:	4630      	mov	r0, r6
 80069c4:	4798      	blx	r3
 80069c6:	2800      	cmp	r0, #0
 80069c8:	d0bb      	beq.n	8006942 <__ssvfiscanf_r+0x1ea>
 80069ca:	e79d      	b.n	8006908 <__ssvfiscanf_r+0x1b0>
 80069cc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80069ce:	3201      	adds	r2, #1
 80069d0:	9245      	str	r2, [sp, #276]	; 0x114
 80069d2:	6862      	ldr	r2, [r4, #4]
 80069d4:	3a01      	subs	r2, #1
 80069d6:	2a00      	cmp	r2, #0
 80069d8:	6062      	str	r2, [r4, #4]
 80069da:	dd02      	ble.n	80069e2 <__ssvfiscanf_r+0x28a>
 80069dc:	3301      	adds	r3, #1
 80069de:	6023      	str	r3, [r4, #0]
 80069e0:	e7b2      	b.n	8006948 <__ssvfiscanf_r+0x1f0>
 80069e2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80069e4:	4621      	mov	r1, r4
 80069e6:	4630      	mov	r0, r6
 80069e8:	4798      	blx	r3
 80069ea:	2800      	cmp	r0, #0
 80069ec:	d0ac      	beq.n	8006948 <__ssvfiscanf_r+0x1f0>
 80069ee:	e78b      	b.n	8006908 <__ssvfiscanf_r+0x1b0>
 80069f0:	2b04      	cmp	r3, #4
 80069f2:	dc0f      	bgt.n	8006a14 <__ssvfiscanf_r+0x2bc>
 80069f4:	466b      	mov	r3, sp
 80069f6:	4622      	mov	r2, r4
 80069f8:	a941      	add	r1, sp, #260	; 0x104
 80069fa:	4630      	mov	r0, r6
 80069fc:	f000 fa0e 	bl	8006e1c <_scanf_i>
 8006a00:	e7b0      	b.n	8006964 <__ssvfiscanf_r+0x20c>
 8006a02:	bf00      	nop
 8006a04:	080066a5 	.word	0x080066a5
 8006a08:	0800671f 	.word	0x0800671f
 8006a0c:	080074ef 	.word	0x080074ef
 8006a10:	080074a6 	.word	0x080074a6
 8006a14:	4b0b      	ldr	r3, [pc, #44]	; (8006a44 <__ssvfiscanf_r+0x2ec>)
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	f43f aec5 	beq.w	80067a6 <__ssvfiscanf_r+0x4e>
 8006a1c:	466b      	mov	r3, sp
 8006a1e:	4622      	mov	r2, r4
 8006a20:	a941      	add	r1, sp, #260	; 0x104
 8006a22:	4630      	mov	r0, r6
 8006a24:	f3af 8000 	nop.w
 8006a28:	e79c      	b.n	8006964 <__ssvfiscanf_r+0x20c>
 8006a2a:	89a3      	ldrh	r3, [r4, #12]
 8006a2c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006a30:	bf18      	it	ne
 8006a32:	f04f 30ff 	movne.w	r0, #4294967295
 8006a36:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8006a3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a3e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8006a40:	e7f9      	b.n	8006a36 <__ssvfiscanf_r+0x2de>
 8006a42:	bf00      	nop
 8006a44:	00000000 	.word	0x00000000

08006a48 <_printf_common>:
 8006a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a4c:	4616      	mov	r6, r2
 8006a4e:	4699      	mov	r9, r3
 8006a50:	688a      	ldr	r2, [r1, #8]
 8006a52:	690b      	ldr	r3, [r1, #16]
 8006a54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	bfb8      	it	lt
 8006a5c:	4613      	movlt	r3, r2
 8006a5e:	6033      	str	r3, [r6, #0]
 8006a60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006a64:	4607      	mov	r7, r0
 8006a66:	460c      	mov	r4, r1
 8006a68:	b10a      	cbz	r2, 8006a6e <_printf_common+0x26>
 8006a6a:	3301      	adds	r3, #1
 8006a6c:	6033      	str	r3, [r6, #0]
 8006a6e:	6823      	ldr	r3, [r4, #0]
 8006a70:	0699      	lsls	r1, r3, #26
 8006a72:	bf42      	ittt	mi
 8006a74:	6833      	ldrmi	r3, [r6, #0]
 8006a76:	3302      	addmi	r3, #2
 8006a78:	6033      	strmi	r3, [r6, #0]
 8006a7a:	6825      	ldr	r5, [r4, #0]
 8006a7c:	f015 0506 	ands.w	r5, r5, #6
 8006a80:	d106      	bne.n	8006a90 <_printf_common+0x48>
 8006a82:	f104 0a19 	add.w	sl, r4, #25
 8006a86:	68e3      	ldr	r3, [r4, #12]
 8006a88:	6832      	ldr	r2, [r6, #0]
 8006a8a:	1a9b      	subs	r3, r3, r2
 8006a8c:	42ab      	cmp	r3, r5
 8006a8e:	dc26      	bgt.n	8006ade <_printf_common+0x96>
 8006a90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006a94:	1e13      	subs	r3, r2, #0
 8006a96:	6822      	ldr	r2, [r4, #0]
 8006a98:	bf18      	it	ne
 8006a9a:	2301      	movne	r3, #1
 8006a9c:	0692      	lsls	r2, r2, #26
 8006a9e:	d42b      	bmi.n	8006af8 <_printf_common+0xb0>
 8006aa0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006aa4:	4649      	mov	r1, r9
 8006aa6:	4638      	mov	r0, r7
 8006aa8:	47c0      	blx	r8
 8006aaa:	3001      	adds	r0, #1
 8006aac:	d01e      	beq.n	8006aec <_printf_common+0xa4>
 8006aae:	6823      	ldr	r3, [r4, #0]
 8006ab0:	6922      	ldr	r2, [r4, #16]
 8006ab2:	f003 0306 	and.w	r3, r3, #6
 8006ab6:	2b04      	cmp	r3, #4
 8006ab8:	bf02      	ittt	eq
 8006aba:	68e5      	ldreq	r5, [r4, #12]
 8006abc:	6833      	ldreq	r3, [r6, #0]
 8006abe:	1aed      	subeq	r5, r5, r3
 8006ac0:	68a3      	ldr	r3, [r4, #8]
 8006ac2:	bf0c      	ite	eq
 8006ac4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ac8:	2500      	movne	r5, #0
 8006aca:	4293      	cmp	r3, r2
 8006acc:	bfc4      	itt	gt
 8006ace:	1a9b      	subgt	r3, r3, r2
 8006ad0:	18ed      	addgt	r5, r5, r3
 8006ad2:	2600      	movs	r6, #0
 8006ad4:	341a      	adds	r4, #26
 8006ad6:	42b5      	cmp	r5, r6
 8006ad8:	d11a      	bne.n	8006b10 <_printf_common+0xc8>
 8006ada:	2000      	movs	r0, #0
 8006adc:	e008      	b.n	8006af0 <_printf_common+0xa8>
 8006ade:	2301      	movs	r3, #1
 8006ae0:	4652      	mov	r2, sl
 8006ae2:	4649      	mov	r1, r9
 8006ae4:	4638      	mov	r0, r7
 8006ae6:	47c0      	blx	r8
 8006ae8:	3001      	adds	r0, #1
 8006aea:	d103      	bne.n	8006af4 <_printf_common+0xac>
 8006aec:	f04f 30ff 	mov.w	r0, #4294967295
 8006af0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006af4:	3501      	adds	r5, #1
 8006af6:	e7c6      	b.n	8006a86 <_printf_common+0x3e>
 8006af8:	18e1      	adds	r1, r4, r3
 8006afa:	1c5a      	adds	r2, r3, #1
 8006afc:	2030      	movs	r0, #48	; 0x30
 8006afe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b02:	4422      	add	r2, r4
 8006b04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b08:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b0c:	3302      	adds	r3, #2
 8006b0e:	e7c7      	b.n	8006aa0 <_printf_common+0x58>
 8006b10:	2301      	movs	r3, #1
 8006b12:	4622      	mov	r2, r4
 8006b14:	4649      	mov	r1, r9
 8006b16:	4638      	mov	r0, r7
 8006b18:	47c0      	blx	r8
 8006b1a:	3001      	adds	r0, #1
 8006b1c:	d0e6      	beq.n	8006aec <_printf_common+0xa4>
 8006b1e:	3601      	adds	r6, #1
 8006b20:	e7d9      	b.n	8006ad6 <_printf_common+0x8e>
	...

08006b24 <_printf_i>:
 8006b24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b28:	7e0f      	ldrb	r7, [r1, #24]
 8006b2a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006b2c:	2f78      	cmp	r7, #120	; 0x78
 8006b2e:	4691      	mov	r9, r2
 8006b30:	4680      	mov	r8, r0
 8006b32:	460c      	mov	r4, r1
 8006b34:	469a      	mov	sl, r3
 8006b36:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006b3a:	d807      	bhi.n	8006b4c <_printf_i+0x28>
 8006b3c:	2f62      	cmp	r7, #98	; 0x62
 8006b3e:	d80a      	bhi.n	8006b56 <_printf_i+0x32>
 8006b40:	2f00      	cmp	r7, #0
 8006b42:	f000 80d4 	beq.w	8006cee <_printf_i+0x1ca>
 8006b46:	2f58      	cmp	r7, #88	; 0x58
 8006b48:	f000 80c0 	beq.w	8006ccc <_printf_i+0x1a8>
 8006b4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006b54:	e03a      	b.n	8006bcc <_printf_i+0xa8>
 8006b56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006b5a:	2b15      	cmp	r3, #21
 8006b5c:	d8f6      	bhi.n	8006b4c <_printf_i+0x28>
 8006b5e:	a101      	add	r1, pc, #4	; (adr r1, 8006b64 <_printf_i+0x40>)
 8006b60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006b64:	08006bbd 	.word	0x08006bbd
 8006b68:	08006bd1 	.word	0x08006bd1
 8006b6c:	08006b4d 	.word	0x08006b4d
 8006b70:	08006b4d 	.word	0x08006b4d
 8006b74:	08006b4d 	.word	0x08006b4d
 8006b78:	08006b4d 	.word	0x08006b4d
 8006b7c:	08006bd1 	.word	0x08006bd1
 8006b80:	08006b4d 	.word	0x08006b4d
 8006b84:	08006b4d 	.word	0x08006b4d
 8006b88:	08006b4d 	.word	0x08006b4d
 8006b8c:	08006b4d 	.word	0x08006b4d
 8006b90:	08006cd5 	.word	0x08006cd5
 8006b94:	08006bfd 	.word	0x08006bfd
 8006b98:	08006c8f 	.word	0x08006c8f
 8006b9c:	08006b4d 	.word	0x08006b4d
 8006ba0:	08006b4d 	.word	0x08006b4d
 8006ba4:	08006cf7 	.word	0x08006cf7
 8006ba8:	08006b4d 	.word	0x08006b4d
 8006bac:	08006bfd 	.word	0x08006bfd
 8006bb0:	08006b4d 	.word	0x08006b4d
 8006bb4:	08006b4d 	.word	0x08006b4d
 8006bb8:	08006c97 	.word	0x08006c97
 8006bbc:	682b      	ldr	r3, [r5, #0]
 8006bbe:	1d1a      	adds	r2, r3, #4
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	602a      	str	r2, [r5, #0]
 8006bc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006bc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006bcc:	2301      	movs	r3, #1
 8006bce:	e09f      	b.n	8006d10 <_printf_i+0x1ec>
 8006bd0:	6820      	ldr	r0, [r4, #0]
 8006bd2:	682b      	ldr	r3, [r5, #0]
 8006bd4:	0607      	lsls	r7, r0, #24
 8006bd6:	f103 0104 	add.w	r1, r3, #4
 8006bda:	6029      	str	r1, [r5, #0]
 8006bdc:	d501      	bpl.n	8006be2 <_printf_i+0xbe>
 8006bde:	681e      	ldr	r6, [r3, #0]
 8006be0:	e003      	b.n	8006bea <_printf_i+0xc6>
 8006be2:	0646      	lsls	r6, r0, #25
 8006be4:	d5fb      	bpl.n	8006bde <_printf_i+0xba>
 8006be6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006bea:	2e00      	cmp	r6, #0
 8006bec:	da03      	bge.n	8006bf6 <_printf_i+0xd2>
 8006bee:	232d      	movs	r3, #45	; 0x2d
 8006bf0:	4276      	negs	r6, r6
 8006bf2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bf6:	485a      	ldr	r0, [pc, #360]	; (8006d60 <_printf_i+0x23c>)
 8006bf8:	230a      	movs	r3, #10
 8006bfa:	e012      	b.n	8006c22 <_printf_i+0xfe>
 8006bfc:	682b      	ldr	r3, [r5, #0]
 8006bfe:	6820      	ldr	r0, [r4, #0]
 8006c00:	1d19      	adds	r1, r3, #4
 8006c02:	6029      	str	r1, [r5, #0]
 8006c04:	0605      	lsls	r5, r0, #24
 8006c06:	d501      	bpl.n	8006c0c <_printf_i+0xe8>
 8006c08:	681e      	ldr	r6, [r3, #0]
 8006c0a:	e002      	b.n	8006c12 <_printf_i+0xee>
 8006c0c:	0641      	lsls	r1, r0, #25
 8006c0e:	d5fb      	bpl.n	8006c08 <_printf_i+0xe4>
 8006c10:	881e      	ldrh	r6, [r3, #0]
 8006c12:	4853      	ldr	r0, [pc, #332]	; (8006d60 <_printf_i+0x23c>)
 8006c14:	2f6f      	cmp	r7, #111	; 0x6f
 8006c16:	bf0c      	ite	eq
 8006c18:	2308      	moveq	r3, #8
 8006c1a:	230a      	movne	r3, #10
 8006c1c:	2100      	movs	r1, #0
 8006c1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c22:	6865      	ldr	r5, [r4, #4]
 8006c24:	60a5      	str	r5, [r4, #8]
 8006c26:	2d00      	cmp	r5, #0
 8006c28:	bfa2      	ittt	ge
 8006c2a:	6821      	ldrge	r1, [r4, #0]
 8006c2c:	f021 0104 	bicge.w	r1, r1, #4
 8006c30:	6021      	strge	r1, [r4, #0]
 8006c32:	b90e      	cbnz	r6, 8006c38 <_printf_i+0x114>
 8006c34:	2d00      	cmp	r5, #0
 8006c36:	d04b      	beq.n	8006cd0 <_printf_i+0x1ac>
 8006c38:	4615      	mov	r5, r2
 8006c3a:	fbb6 f1f3 	udiv	r1, r6, r3
 8006c3e:	fb03 6711 	mls	r7, r3, r1, r6
 8006c42:	5dc7      	ldrb	r7, [r0, r7]
 8006c44:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006c48:	4637      	mov	r7, r6
 8006c4a:	42bb      	cmp	r3, r7
 8006c4c:	460e      	mov	r6, r1
 8006c4e:	d9f4      	bls.n	8006c3a <_printf_i+0x116>
 8006c50:	2b08      	cmp	r3, #8
 8006c52:	d10b      	bne.n	8006c6c <_printf_i+0x148>
 8006c54:	6823      	ldr	r3, [r4, #0]
 8006c56:	07de      	lsls	r6, r3, #31
 8006c58:	d508      	bpl.n	8006c6c <_printf_i+0x148>
 8006c5a:	6923      	ldr	r3, [r4, #16]
 8006c5c:	6861      	ldr	r1, [r4, #4]
 8006c5e:	4299      	cmp	r1, r3
 8006c60:	bfde      	ittt	le
 8006c62:	2330      	movle	r3, #48	; 0x30
 8006c64:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006c68:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006c6c:	1b52      	subs	r2, r2, r5
 8006c6e:	6122      	str	r2, [r4, #16]
 8006c70:	f8cd a000 	str.w	sl, [sp]
 8006c74:	464b      	mov	r3, r9
 8006c76:	aa03      	add	r2, sp, #12
 8006c78:	4621      	mov	r1, r4
 8006c7a:	4640      	mov	r0, r8
 8006c7c:	f7ff fee4 	bl	8006a48 <_printf_common>
 8006c80:	3001      	adds	r0, #1
 8006c82:	d14a      	bne.n	8006d1a <_printf_i+0x1f6>
 8006c84:	f04f 30ff 	mov.w	r0, #4294967295
 8006c88:	b004      	add	sp, #16
 8006c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c8e:	6823      	ldr	r3, [r4, #0]
 8006c90:	f043 0320 	orr.w	r3, r3, #32
 8006c94:	6023      	str	r3, [r4, #0]
 8006c96:	4833      	ldr	r0, [pc, #204]	; (8006d64 <_printf_i+0x240>)
 8006c98:	2778      	movs	r7, #120	; 0x78
 8006c9a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006c9e:	6823      	ldr	r3, [r4, #0]
 8006ca0:	6829      	ldr	r1, [r5, #0]
 8006ca2:	061f      	lsls	r7, r3, #24
 8006ca4:	f851 6b04 	ldr.w	r6, [r1], #4
 8006ca8:	d402      	bmi.n	8006cb0 <_printf_i+0x18c>
 8006caa:	065f      	lsls	r7, r3, #25
 8006cac:	bf48      	it	mi
 8006cae:	b2b6      	uxthmi	r6, r6
 8006cb0:	07df      	lsls	r7, r3, #31
 8006cb2:	bf48      	it	mi
 8006cb4:	f043 0320 	orrmi.w	r3, r3, #32
 8006cb8:	6029      	str	r1, [r5, #0]
 8006cba:	bf48      	it	mi
 8006cbc:	6023      	strmi	r3, [r4, #0]
 8006cbe:	b91e      	cbnz	r6, 8006cc8 <_printf_i+0x1a4>
 8006cc0:	6823      	ldr	r3, [r4, #0]
 8006cc2:	f023 0320 	bic.w	r3, r3, #32
 8006cc6:	6023      	str	r3, [r4, #0]
 8006cc8:	2310      	movs	r3, #16
 8006cca:	e7a7      	b.n	8006c1c <_printf_i+0xf8>
 8006ccc:	4824      	ldr	r0, [pc, #144]	; (8006d60 <_printf_i+0x23c>)
 8006cce:	e7e4      	b.n	8006c9a <_printf_i+0x176>
 8006cd0:	4615      	mov	r5, r2
 8006cd2:	e7bd      	b.n	8006c50 <_printf_i+0x12c>
 8006cd4:	682b      	ldr	r3, [r5, #0]
 8006cd6:	6826      	ldr	r6, [r4, #0]
 8006cd8:	6961      	ldr	r1, [r4, #20]
 8006cda:	1d18      	adds	r0, r3, #4
 8006cdc:	6028      	str	r0, [r5, #0]
 8006cde:	0635      	lsls	r5, r6, #24
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	d501      	bpl.n	8006ce8 <_printf_i+0x1c4>
 8006ce4:	6019      	str	r1, [r3, #0]
 8006ce6:	e002      	b.n	8006cee <_printf_i+0x1ca>
 8006ce8:	0670      	lsls	r0, r6, #25
 8006cea:	d5fb      	bpl.n	8006ce4 <_printf_i+0x1c0>
 8006cec:	8019      	strh	r1, [r3, #0]
 8006cee:	2300      	movs	r3, #0
 8006cf0:	6123      	str	r3, [r4, #16]
 8006cf2:	4615      	mov	r5, r2
 8006cf4:	e7bc      	b.n	8006c70 <_printf_i+0x14c>
 8006cf6:	682b      	ldr	r3, [r5, #0]
 8006cf8:	1d1a      	adds	r2, r3, #4
 8006cfa:	602a      	str	r2, [r5, #0]
 8006cfc:	681d      	ldr	r5, [r3, #0]
 8006cfe:	6862      	ldr	r2, [r4, #4]
 8006d00:	2100      	movs	r1, #0
 8006d02:	4628      	mov	r0, r5
 8006d04:	f7f9 fa8c 	bl	8000220 <memchr>
 8006d08:	b108      	cbz	r0, 8006d0e <_printf_i+0x1ea>
 8006d0a:	1b40      	subs	r0, r0, r5
 8006d0c:	6060      	str	r0, [r4, #4]
 8006d0e:	6863      	ldr	r3, [r4, #4]
 8006d10:	6123      	str	r3, [r4, #16]
 8006d12:	2300      	movs	r3, #0
 8006d14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d18:	e7aa      	b.n	8006c70 <_printf_i+0x14c>
 8006d1a:	6923      	ldr	r3, [r4, #16]
 8006d1c:	462a      	mov	r2, r5
 8006d1e:	4649      	mov	r1, r9
 8006d20:	4640      	mov	r0, r8
 8006d22:	47d0      	blx	sl
 8006d24:	3001      	adds	r0, #1
 8006d26:	d0ad      	beq.n	8006c84 <_printf_i+0x160>
 8006d28:	6823      	ldr	r3, [r4, #0]
 8006d2a:	079b      	lsls	r3, r3, #30
 8006d2c:	d413      	bmi.n	8006d56 <_printf_i+0x232>
 8006d2e:	68e0      	ldr	r0, [r4, #12]
 8006d30:	9b03      	ldr	r3, [sp, #12]
 8006d32:	4298      	cmp	r0, r3
 8006d34:	bfb8      	it	lt
 8006d36:	4618      	movlt	r0, r3
 8006d38:	e7a6      	b.n	8006c88 <_printf_i+0x164>
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	4632      	mov	r2, r6
 8006d3e:	4649      	mov	r1, r9
 8006d40:	4640      	mov	r0, r8
 8006d42:	47d0      	blx	sl
 8006d44:	3001      	adds	r0, #1
 8006d46:	d09d      	beq.n	8006c84 <_printf_i+0x160>
 8006d48:	3501      	adds	r5, #1
 8006d4a:	68e3      	ldr	r3, [r4, #12]
 8006d4c:	9903      	ldr	r1, [sp, #12]
 8006d4e:	1a5b      	subs	r3, r3, r1
 8006d50:	42ab      	cmp	r3, r5
 8006d52:	dcf2      	bgt.n	8006d3a <_printf_i+0x216>
 8006d54:	e7eb      	b.n	8006d2e <_printf_i+0x20a>
 8006d56:	2500      	movs	r5, #0
 8006d58:	f104 0619 	add.w	r6, r4, #25
 8006d5c:	e7f5      	b.n	8006d4a <_printf_i+0x226>
 8006d5e:	bf00      	nop
 8006d60:	080074b1 	.word	0x080074b1
 8006d64:	080074c2 	.word	0x080074c2

08006d68 <_scanf_chars>:
 8006d68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d6c:	4615      	mov	r5, r2
 8006d6e:	688a      	ldr	r2, [r1, #8]
 8006d70:	4680      	mov	r8, r0
 8006d72:	460c      	mov	r4, r1
 8006d74:	b932      	cbnz	r2, 8006d84 <_scanf_chars+0x1c>
 8006d76:	698a      	ldr	r2, [r1, #24]
 8006d78:	2a00      	cmp	r2, #0
 8006d7a:	bf0c      	ite	eq
 8006d7c:	2201      	moveq	r2, #1
 8006d7e:	f04f 32ff 	movne.w	r2, #4294967295
 8006d82:	608a      	str	r2, [r1, #8]
 8006d84:	6822      	ldr	r2, [r4, #0]
 8006d86:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8006e18 <_scanf_chars+0xb0>
 8006d8a:	06d1      	lsls	r1, r2, #27
 8006d8c:	bf5f      	itttt	pl
 8006d8e:	681a      	ldrpl	r2, [r3, #0]
 8006d90:	1d11      	addpl	r1, r2, #4
 8006d92:	6019      	strpl	r1, [r3, #0]
 8006d94:	6816      	ldrpl	r6, [r2, #0]
 8006d96:	2700      	movs	r7, #0
 8006d98:	69a0      	ldr	r0, [r4, #24]
 8006d9a:	b188      	cbz	r0, 8006dc0 <_scanf_chars+0x58>
 8006d9c:	2801      	cmp	r0, #1
 8006d9e:	d107      	bne.n	8006db0 <_scanf_chars+0x48>
 8006da0:	682a      	ldr	r2, [r5, #0]
 8006da2:	7811      	ldrb	r1, [r2, #0]
 8006da4:	6962      	ldr	r2, [r4, #20]
 8006da6:	5c52      	ldrb	r2, [r2, r1]
 8006da8:	b952      	cbnz	r2, 8006dc0 <_scanf_chars+0x58>
 8006daa:	2f00      	cmp	r7, #0
 8006dac:	d031      	beq.n	8006e12 <_scanf_chars+0xaa>
 8006dae:	e022      	b.n	8006df6 <_scanf_chars+0x8e>
 8006db0:	2802      	cmp	r0, #2
 8006db2:	d120      	bne.n	8006df6 <_scanf_chars+0x8e>
 8006db4:	682b      	ldr	r3, [r5, #0]
 8006db6:	781b      	ldrb	r3, [r3, #0]
 8006db8:	f819 3003 	ldrb.w	r3, [r9, r3]
 8006dbc:	071b      	lsls	r3, r3, #28
 8006dbe:	d41a      	bmi.n	8006df6 <_scanf_chars+0x8e>
 8006dc0:	6823      	ldr	r3, [r4, #0]
 8006dc2:	06da      	lsls	r2, r3, #27
 8006dc4:	bf5e      	ittt	pl
 8006dc6:	682b      	ldrpl	r3, [r5, #0]
 8006dc8:	781b      	ldrbpl	r3, [r3, #0]
 8006dca:	f806 3b01 	strbpl.w	r3, [r6], #1
 8006dce:	682a      	ldr	r2, [r5, #0]
 8006dd0:	686b      	ldr	r3, [r5, #4]
 8006dd2:	3201      	adds	r2, #1
 8006dd4:	602a      	str	r2, [r5, #0]
 8006dd6:	68a2      	ldr	r2, [r4, #8]
 8006dd8:	3b01      	subs	r3, #1
 8006dda:	3a01      	subs	r2, #1
 8006ddc:	606b      	str	r3, [r5, #4]
 8006dde:	3701      	adds	r7, #1
 8006de0:	60a2      	str	r2, [r4, #8]
 8006de2:	b142      	cbz	r2, 8006df6 <_scanf_chars+0x8e>
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	dcd7      	bgt.n	8006d98 <_scanf_chars+0x30>
 8006de8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006dec:	4629      	mov	r1, r5
 8006dee:	4640      	mov	r0, r8
 8006df0:	4798      	blx	r3
 8006df2:	2800      	cmp	r0, #0
 8006df4:	d0d0      	beq.n	8006d98 <_scanf_chars+0x30>
 8006df6:	6823      	ldr	r3, [r4, #0]
 8006df8:	f013 0310 	ands.w	r3, r3, #16
 8006dfc:	d105      	bne.n	8006e0a <_scanf_chars+0xa2>
 8006dfe:	68e2      	ldr	r2, [r4, #12]
 8006e00:	3201      	adds	r2, #1
 8006e02:	60e2      	str	r2, [r4, #12]
 8006e04:	69a2      	ldr	r2, [r4, #24]
 8006e06:	b102      	cbz	r2, 8006e0a <_scanf_chars+0xa2>
 8006e08:	7033      	strb	r3, [r6, #0]
 8006e0a:	6923      	ldr	r3, [r4, #16]
 8006e0c:	443b      	add	r3, r7
 8006e0e:	6123      	str	r3, [r4, #16]
 8006e10:	2000      	movs	r0, #0
 8006e12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e16:	bf00      	nop
 8006e18:	080074ef 	.word	0x080074ef

08006e1c <_scanf_i>:
 8006e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e20:	4698      	mov	r8, r3
 8006e22:	4b74      	ldr	r3, [pc, #464]	; (8006ff4 <_scanf_i+0x1d8>)
 8006e24:	460c      	mov	r4, r1
 8006e26:	4682      	mov	sl, r0
 8006e28:	4616      	mov	r6, r2
 8006e2a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006e2e:	b087      	sub	sp, #28
 8006e30:	ab03      	add	r3, sp, #12
 8006e32:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8006e36:	4b70      	ldr	r3, [pc, #448]	; (8006ff8 <_scanf_i+0x1dc>)
 8006e38:	69a1      	ldr	r1, [r4, #24]
 8006e3a:	4a70      	ldr	r2, [pc, #448]	; (8006ffc <_scanf_i+0x1e0>)
 8006e3c:	2903      	cmp	r1, #3
 8006e3e:	bf18      	it	ne
 8006e40:	461a      	movne	r2, r3
 8006e42:	68a3      	ldr	r3, [r4, #8]
 8006e44:	9201      	str	r2, [sp, #4]
 8006e46:	1e5a      	subs	r2, r3, #1
 8006e48:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006e4c:	bf88      	it	hi
 8006e4e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006e52:	4627      	mov	r7, r4
 8006e54:	bf82      	ittt	hi
 8006e56:	eb03 0905 	addhi.w	r9, r3, r5
 8006e5a:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006e5e:	60a3      	strhi	r3, [r4, #8]
 8006e60:	f857 3b1c 	ldr.w	r3, [r7], #28
 8006e64:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8006e68:	bf98      	it	ls
 8006e6a:	f04f 0900 	movls.w	r9, #0
 8006e6e:	6023      	str	r3, [r4, #0]
 8006e70:	463d      	mov	r5, r7
 8006e72:	f04f 0b00 	mov.w	fp, #0
 8006e76:	6831      	ldr	r1, [r6, #0]
 8006e78:	ab03      	add	r3, sp, #12
 8006e7a:	7809      	ldrb	r1, [r1, #0]
 8006e7c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8006e80:	2202      	movs	r2, #2
 8006e82:	f7f9 f9cd 	bl	8000220 <memchr>
 8006e86:	b328      	cbz	r0, 8006ed4 <_scanf_i+0xb8>
 8006e88:	f1bb 0f01 	cmp.w	fp, #1
 8006e8c:	d159      	bne.n	8006f42 <_scanf_i+0x126>
 8006e8e:	6862      	ldr	r2, [r4, #4]
 8006e90:	b92a      	cbnz	r2, 8006e9e <_scanf_i+0x82>
 8006e92:	6822      	ldr	r2, [r4, #0]
 8006e94:	2308      	movs	r3, #8
 8006e96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e9a:	6063      	str	r3, [r4, #4]
 8006e9c:	6022      	str	r2, [r4, #0]
 8006e9e:	6822      	ldr	r2, [r4, #0]
 8006ea0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8006ea4:	6022      	str	r2, [r4, #0]
 8006ea6:	68a2      	ldr	r2, [r4, #8]
 8006ea8:	1e51      	subs	r1, r2, #1
 8006eaa:	60a1      	str	r1, [r4, #8]
 8006eac:	b192      	cbz	r2, 8006ed4 <_scanf_i+0xb8>
 8006eae:	6832      	ldr	r2, [r6, #0]
 8006eb0:	1c51      	adds	r1, r2, #1
 8006eb2:	6031      	str	r1, [r6, #0]
 8006eb4:	7812      	ldrb	r2, [r2, #0]
 8006eb6:	f805 2b01 	strb.w	r2, [r5], #1
 8006eba:	6872      	ldr	r2, [r6, #4]
 8006ebc:	3a01      	subs	r2, #1
 8006ebe:	2a00      	cmp	r2, #0
 8006ec0:	6072      	str	r2, [r6, #4]
 8006ec2:	dc07      	bgt.n	8006ed4 <_scanf_i+0xb8>
 8006ec4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8006ec8:	4631      	mov	r1, r6
 8006eca:	4650      	mov	r0, sl
 8006ecc:	4790      	blx	r2
 8006ece:	2800      	cmp	r0, #0
 8006ed0:	f040 8085 	bne.w	8006fde <_scanf_i+0x1c2>
 8006ed4:	f10b 0b01 	add.w	fp, fp, #1
 8006ed8:	f1bb 0f03 	cmp.w	fp, #3
 8006edc:	d1cb      	bne.n	8006e76 <_scanf_i+0x5a>
 8006ede:	6863      	ldr	r3, [r4, #4]
 8006ee0:	b90b      	cbnz	r3, 8006ee6 <_scanf_i+0xca>
 8006ee2:	230a      	movs	r3, #10
 8006ee4:	6063      	str	r3, [r4, #4]
 8006ee6:	6863      	ldr	r3, [r4, #4]
 8006ee8:	4945      	ldr	r1, [pc, #276]	; (8007000 <_scanf_i+0x1e4>)
 8006eea:	6960      	ldr	r0, [r4, #20]
 8006eec:	1ac9      	subs	r1, r1, r3
 8006eee:	f000 f889 	bl	8007004 <__sccl>
 8006ef2:	f04f 0b00 	mov.w	fp, #0
 8006ef6:	68a3      	ldr	r3, [r4, #8]
 8006ef8:	6822      	ldr	r2, [r4, #0]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d03d      	beq.n	8006f7a <_scanf_i+0x15e>
 8006efe:	6831      	ldr	r1, [r6, #0]
 8006f00:	6960      	ldr	r0, [r4, #20]
 8006f02:	f891 c000 	ldrb.w	ip, [r1]
 8006f06:	f810 000c 	ldrb.w	r0, [r0, ip]
 8006f0a:	2800      	cmp	r0, #0
 8006f0c:	d035      	beq.n	8006f7a <_scanf_i+0x15e>
 8006f0e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8006f12:	d124      	bne.n	8006f5e <_scanf_i+0x142>
 8006f14:	0510      	lsls	r0, r2, #20
 8006f16:	d522      	bpl.n	8006f5e <_scanf_i+0x142>
 8006f18:	f10b 0b01 	add.w	fp, fp, #1
 8006f1c:	f1b9 0f00 	cmp.w	r9, #0
 8006f20:	d003      	beq.n	8006f2a <_scanf_i+0x10e>
 8006f22:	3301      	adds	r3, #1
 8006f24:	f109 39ff 	add.w	r9, r9, #4294967295
 8006f28:	60a3      	str	r3, [r4, #8]
 8006f2a:	6873      	ldr	r3, [r6, #4]
 8006f2c:	3b01      	subs	r3, #1
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	6073      	str	r3, [r6, #4]
 8006f32:	dd1b      	ble.n	8006f6c <_scanf_i+0x150>
 8006f34:	6833      	ldr	r3, [r6, #0]
 8006f36:	3301      	adds	r3, #1
 8006f38:	6033      	str	r3, [r6, #0]
 8006f3a:	68a3      	ldr	r3, [r4, #8]
 8006f3c:	3b01      	subs	r3, #1
 8006f3e:	60a3      	str	r3, [r4, #8]
 8006f40:	e7d9      	b.n	8006ef6 <_scanf_i+0xda>
 8006f42:	f1bb 0f02 	cmp.w	fp, #2
 8006f46:	d1ae      	bne.n	8006ea6 <_scanf_i+0x8a>
 8006f48:	6822      	ldr	r2, [r4, #0]
 8006f4a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8006f4e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8006f52:	d1bf      	bne.n	8006ed4 <_scanf_i+0xb8>
 8006f54:	2310      	movs	r3, #16
 8006f56:	6063      	str	r3, [r4, #4]
 8006f58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f5c:	e7a2      	b.n	8006ea4 <_scanf_i+0x88>
 8006f5e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8006f62:	6022      	str	r2, [r4, #0]
 8006f64:	780b      	ldrb	r3, [r1, #0]
 8006f66:	f805 3b01 	strb.w	r3, [r5], #1
 8006f6a:	e7de      	b.n	8006f2a <_scanf_i+0x10e>
 8006f6c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006f70:	4631      	mov	r1, r6
 8006f72:	4650      	mov	r0, sl
 8006f74:	4798      	blx	r3
 8006f76:	2800      	cmp	r0, #0
 8006f78:	d0df      	beq.n	8006f3a <_scanf_i+0x11e>
 8006f7a:	6823      	ldr	r3, [r4, #0]
 8006f7c:	05d9      	lsls	r1, r3, #23
 8006f7e:	d50d      	bpl.n	8006f9c <_scanf_i+0x180>
 8006f80:	42bd      	cmp	r5, r7
 8006f82:	d909      	bls.n	8006f98 <_scanf_i+0x17c>
 8006f84:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8006f88:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006f8c:	4632      	mov	r2, r6
 8006f8e:	4650      	mov	r0, sl
 8006f90:	4798      	blx	r3
 8006f92:	f105 39ff 	add.w	r9, r5, #4294967295
 8006f96:	464d      	mov	r5, r9
 8006f98:	42bd      	cmp	r5, r7
 8006f9a:	d028      	beq.n	8006fee <_scanf_i+0x1d2>
 8006f9c:	6822      	ldr	r2, [r4, #0]
 8006f9e:	f012 0210 	ands.w	r2, r2, #16
 8006fa2:	d113      	bne.n	8006fcc <_scanf_i+0x1b0>
 8006fa4:	702a      	strb	r2, [r5, #0]
 8006fa6:	6863      	ldr	r3, [r4, #4]
 8006fa8:	9e01      	ldr	r6, [sp, #4]
 8006faa:	4639      	mov	r1, r7
 8006fac:	4650      	mov	r0, sl
 8006fae:	47b0      	blx	r6
 8006fb0:	f8d8 3000 	ldr.w	r3, [r8]
 8006fb4:	6821      	ldr	r1, [r4, #0]
 8006fb6:	1d1a      	adds	r2, r3, #4
 8006fb8:	f8c8 2000 	str.w	r2, [r8]
 8006fbc:	f011 0f20 	tst.w	r1, #32
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	d00f      	beq.n	8006fe4 <_scanf_i+0x1c8>
 8006fc4:	6018      	str	r0, [r3, #0]
 8006fc6:	68e3      	ldr	r3, [r4, #12]
 8006fc8:	3301      	adds	r3, #1
 8006fca:	60e3      	str	r3, [r4, #12]
 8006fcc:	6923      	ldr	r3, [r4, #16]
 8006fce:	1bed      	subs	r5, r5, r7
 8006fd0:	445d      	add	r5, fp
 8006fd2:	442b      	add	r3, r5
 8006fd4:	6123      	str	r3, [r4, #16]
 8006fd6:	2000      	movs	r0, #0
 8006fd8:	b007      	add	sp, #28
 8006fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fde:	f04f 0b00 	mov.w	fp, #0
 8006fe2:	e7ca      	b.n	8006f7a <_scanf_i+0x15e>
 8006fe4:	07ca      	lsls	r2, r1, #31
 8006fe6:	bf4c      	ite	mi
 8006fe8:	8018      	strhmi	r0, [r3, #0]
 8006fea:	6018      	strpl	r0, [r3, #0]
 8006fec:	e7eb      	b.n	8006fc6 <_scanf_i+0x1aa>
 8006fee:	2001      	movs	r0, #1
 8006ff0:	e7f2      	b.n	8006fd8 <_scanf_i+0x1bc>
 8006ff2:	bf00      	nop
 8006ff4:	0800747c 	.word	0x0800747c
 8006ff8:	080073a9 	.word	0x080073a9
 8006ffc:	080072c1 	.word	0x080072c1
 8007000:	080074e3 	.word	0x080074e3

08007004 <__sccl>:
 8007004:	b570      	push	{r4, r5, r6, lr}
 8007006:	780b      	ldrb	r3, [r1, #0]
 8007008:	4604      	mov	r4, r0
 800700a:	2b5e      	cmp	r3, #94	; 0x5e
 800700c:	bf0b      	itete	eq
 800700e:	784b      	ldrbeq	r3, [r1, #1]
 8007010:	1c4a      	addne	r2, r1, #1
 8007012:	1c8a      	addeq	r2, r1, #2
 8007014:	2100      	movne	r1, #0
 8007016:	bf08      	it	eq
 8007018:	2101      	moveq	r1, #1
 800701a:	3801      	subs	r0, #1
 800701c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8007020:	f800 1f01 	strb.w	r1, [r0, #1]!
 8007024:	42a8      	cmp	r0, r5
 8007026:	d1fb      	bne.n	8007020 <__sccl+0x1c>
 8007028:	b90b      	cbnz	r3, 800702e <__sccl+0x2a>
 800702a:	1e50      	subs	r0, r2, #1
 800702c:	bd70      	pop	{r4, r5, r6, pc}
 800702e:	f081 0101 	eor.w	r1, r1, #1
 8007032:	54e1      	strb	r1, [r4, r3]
 8007034:	4610      	mov	r0, r2
 8007036:	4602      	mov	r2, r0
 8007038:	f812 5b01 	ldrb.w	r5, [r2], #1
 800703c:	2d2d      	cmp	r5, #45	; 0x2d
 800703e:	d005      	beq.n	800704c <__sccl+0x48>
 8007040:	2d5d      	cmp	r5, #93	; 0x5d
 8007042:	d016      	beq.n	8007072 <__sccl+0x6e>
 8007044:	2d00      	cmp	r5, #0
 8007046:	d0f1      	beq.n	800702c <__sccl+0x28>
 8007048:	462b      	mov	r3, r5
 800704a:	e7f2      	b.n	8007032 <__sccl+0x2e>
 800704c:	7846      	ldrb	r6, [r0, #1]
 800704e:	2e5d      	cmp	r6, #93	; 0x5d
 8007050:	d0fa      	beq.n	8007048 <__sccl+0x44>
 8007052:	42b3      	cmp	r3, r6
 8007054:	dcf8      	bgt.n	8007048 <__sccl+0x44>
 8007056:	3002      	adds	r0, #2
 8007058:	461a      	mov	r2, r3
 800705a:	3201      	adds	r2, #1
 800705c:	4296      	cmp	r6, r2
 800705e:	54a1      	strb	r1, [r4, r2]
 8007060:	dcfb      	bgt.n	800705a <__sccl+0x56>
 8007062:	1af2      	subs	r2, r6, r3
 8007064:	3a01      	subs	r2, #1
 8007066:	1c5d      	adds	r5, r3, #1
 8007068:	42b3      	cmp	r3, r6
 800706a:	bfa8      	it	ge
 800706c:	2200      	movge	r2, #0
 800706e:	18ab      	adds	r3, r5, r2
 8007070:	e7e1      	b.n	8007036 <__sccl+0x32>
 8007072:	4610      	mov	r0, r2
 8007074:	e7da      	b.n	800702c <__sccl+0x28>

08007076 <__submore>:
 8007076:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800707a:	460c      	mov	r4, r1
 800707c:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800707e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007082:	4299      	cmp	r1, r3
 8007084:	d11d      	bne.n	80070c2 <__submore+0x4c>
 8007086:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800708a:	f7ff f927 	bl	80062dc <_malloc_r>
 800708e:	b918      	cbnz	r0, 8007098 <__submore+0x22>
 8007090:	f04f 30ff 	mov.w	r0, #4294967295
 8007094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007098:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800709c:	63a3      	str	r3, [r4, #56]	; 0x38
 800709e:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80070a2:	6360      	str	r0, [r4, #52]	; 0x34
 80070a4:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80070a8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80070ac:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80070b0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80070b4:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80070b8:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80070bc:	6020      	str	r0, [r4, #0]
 80070be:	2000      	movs	r0, #0
 80070c0:	e7e8      	b.n	8007094 <__submore+0x1e>
 80070c2:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80070c4:	0077      	lsls	r7, r6, #1
 80070c6:	463a      	mov	r2, r7
 80070c8:	f000 f848 	bl	800715c <_realloc_r>
 80070cc:	4605      	mov	r5, r0
 80070ce:	2800      	cmp	r0, #0
 80070d0:	d0de      	beq.n	8007090 <__submore+0x1a>
 80070d2:	eb00 0806 	add.w	r8, r0, r6
 80070d6:	4601      	mov	r1, r0
 80070d8:	4632      	mov	r2, r6
 80070da:	4640      	mov	r0, r8
 80070dc:	f000 f830 	bl	8007140 <memcpy>
 80070e0:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80070e4:	f8c4 8000 	str.w	r8, [r4]
 80070e8:	e7e9      	b.n	80070be <__submore+0x48>

080070ea <memmove>:
 80070ea:	4288      	cmp	r0, r1
 80070ec:	b510      	push	{r4, lr}
 80070ee:	eb01 0402 	add.w	r4, r1, r2
 80070f2:	d902      	bls.n	80070fa <memmove+0x10>
 80070f4:	4284      	cmp	r4, r0
 80070f6:	4623      	mov	r3, r4
 80070f8:	d807      	bhi.n	800710a <memmove+0x20>
 80070fa:	1e43      	subs	r3, r0, #1
 80070fc:	42a1      	cmp	r1, r4
 80070fe:	d008      	beq.n	8007112 <memmove+0x28>
 8007100:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007104:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007108:	e7f8      	b.n	80070fc <memmove+0x12>
 800710a:	4402      	add	r2, r0
 800710c:	4601      	mov	r1, r0
 800710e:	428a      	cmp	r2, r1
 8007110:	d100      	bne.n	8007114 <memmove+0x2a>
 8007112:	bd10      	pop	{r4, pc}
 8007114:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007118:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800711c:	e7f7      	b.n	800710e <memmove+0x24>
	...

08007120 <_sbrk_r>:
 8007120:	b538      	push	{r3, r4, r5, lr}
 8007122:	4d06      	ldr	r5, [pc, #24]	; (800713c <_sbrk_r+0x1c>)
 8007124:	2300      	movs	r3, #0
 8007126:	4604      	mov	r4, r0
 8007128:	4608      	mov	r0, r1
 800712a:	602b      	str	r3, [r5, #0]
 800712c:	f7fa fe3c 	bl	8001da8 <_sbrk>
 8007130:	1c43      	adds	r3, r0, #1
 8007132:	d102      	bne.n	800713a <_sbrk_r+0x1a>
 8007134:	682b      	ldr	r3, [r5, #0]
 8007136:	b103      	cbz	r3, 800713a <_sbrk_r+0x1a>
 8007138:	6023      	str	r3, [r4, #0]
 800713a:	bd38      	pop	{r3, r4, r5, pc}
 800713c:	200003e4 	.word	0x200003e4

08007140 <memcpy>:
 8007140:	440a      	add	r2, r1
 8007142:	4291      	cmp	r1, r2
 8007144:	f100 33ff 	add.w	r3, r0, #4294967295
 8007148:	d100      	bne.n	800714c <memcpy+0xc>
 800714a:	4770      	bx	lr
 800714c:	b510      	push	{r4, lr}
 800714e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007152:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007156:	4291      	cmp	r1, r2
 8007158:	d1f9      	bne.n	800714e <memcpy+0xe>
 800715a:	bd10      	pop	{r4, pc}

0800715c <_realloc_r>:
 800715c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007160:	4680      	mov	r8, r0
 8007162:	4614      	mov	r4, r2
 8007164:	460e      	mov	r6, r1
 8007166:	b921      	cbnz	r1, 8007172 <_realloc_r+0x16>
 8007168:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800716c:	4611      	mov	r1, r2
 800716e:	f7ff b8b5 	b.w	80062dc <_malloc_r>
 8007172:	b92a      	cbnz	r2, 8007180 <_realloc_r+0x24>
 8007174:	f7ff f846 	bl	8006204 <_free_r>
 8007178:	4625      	mov	r5, r4
 800717a:	4628      	mov	r0, r5
 800717c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007180:	f000 f914 	bl	80073ac <_malloc_usable_size_r>
 8007184:	4284      	cmp	r4, r0
 8007186:	4607      	mov	r7, r0
 8007188:	d802      	bhi.n	8007190 <_realloc_r+0x34>
 800718a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800718e:	d812      	bhi.n	80071b6 <_realloc_r+0x5a>
 8007190:	4621      	mov	r1, r4
 8007192:	4640      	mov	r0, r8
 8007194:	f7ff f8a2 	bl	80062dc <_malloc_r>
 8007198:	4605      	mov	r5, r0
 800719a:	2800      	cmp	r0, #0
 800719c:	d0ed      	beq.n	800717a <_realloc_r+0x1e>
 800719e:	42bc      	cmp	r4, r7
 80071a0:	4622      	mov	r2, r4
 80071a2:	4631      	mov	r1, r6
 80071a4:	bf28      	it	cs
 80071a6:	463a      	movcs	r2, r7
 80071a8:	f7ff ffca 	bl	8007140 <memcpy>
 80071ac:	4631      	mov	r1, r6
 80071ae:	4640      	mov	r0, r8
 80071b0:	f7ff f828 	bl	8006204 <_free_r>
 80071b4:	e7e1      	b.n	800717a <_realloc_r+0x1e>
 80071b6:	4635      	mov	r5, r6
 80071b8:	e7df      	b.n	800717a <_realloc_r+0x1e>
	...

080071bc <_strtol_l.constprop.0>:
 80071bc:	2b01      	cmp	r3, #1
 80071be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071c2:	d001      	beq.n	80071c8 <_strtol_l.constprop.0+0xc>
 80071c4:	2b24      	cmp	r3, #36	; 0x24
 80071c6:	d906      	bls.n	80071d6 <_strtol_l.constprop.0+0x1a>
 80071c8:	f7fe fff0 	bl	80061ac <__errno>
 80071cc:	2316      	movs	r3, #22
 80071ce:	6003      	str	r3, [r0, #0]
 80071d0:	2000      	movs	r0, #0
 80071d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071d6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80072bc <_strtol_l.constprop.0+0x100>
 80071da:	460d      	mov	r5, r1
 80071dc:	462e      	mov	r6, r5
 80071de:	f815 4b01 	ldrb.w	r4, [r5], #1
 80071e2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80071e6:	f017 0708 	ands.w	r7, r7, #8
 80071ea:	d1f7      	bne.n	80071dc <_strtol_l.constprop.0+0x20>
 80071ec:	2c2d      	cmp	r4, #45	; 0x2d
 80071ee:	d132      	bne.n	8007256 <_strtol_l.constprop.0+0x9a>
 80071f0:	782c      	ldrb	r4, [r5, #0]
 80071f2:	2701      	movs	r7, #1
 80071f4:	1cb5      	adds	r5, r6, #2
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d05b      	beq.n	80072b2 <_strtol_l.constprop.0+0xf6>
 80071fa:	2b10      	cmp	r3, #16
 80071fc:	d109      	bne.n	8007212 <_strtol_l.constprop.0+0x56>
 80071fe:	2c30      	cmp	r4, #48	; 0x30
 8007200:	d107      	bne.n	8007212 <_strtol_l.constprop.0+0x56>
 8007202:	782c      	ldrb	r4, [r5, #0]
 8007204:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007208:	2c58      	cmp	r4, #88	; 0x58
 800720a:	d14d      	bne.n	80072a8 <_strtol_l.constprop.0+0xec>
 800720c:	786c      	ldrb	r4, [r5, #1]
 800720e:	2310      	movs	r3, #16
 8007210:	3502      	adds	r5, #2
 8007212:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007216:	f108 38ff 	add.w	r8, r8, #4294967295
 800721a:	f04f 0e00 	mov.w	lr, #0
 800721e:	fbb8 f9f3 	udiv	r9, r8, r3
 8007222:	4676      	mov	r6, lr
 8007224:	fb03 8a19 	mls	sl, r3, r9, r8
 8007228:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800722c:	f1bc 0f09 	cmp.w	ip, #9
 8007230:	d816      	bhi.n	8007260 <_strtol_l.constprop.0+0xa4>
 8007232:	4664      	mov	r4, ip
 8007234:	42a3      	cmp	r3, r4
 8007236:	dd24      	ble.n	8007282 <_strtol_l.constprop.0+0xc6>
 8007238:	f1be 3fff 	cmp.w	lr, #4294967295
 800723c:	d008      	beq.n	8007250 <_strtol_l.constprop.0+0x94>
 800723e:	45b1      	cmp	r9, r6
 8007240:	d31c      	bcc.n	800727c <_strtol_l.constprop.0+0xc0>
 8007242:	d101      	bne.n	8007248 <_strtol_l.constprop.0+0x8c>
 8007244:	45a2      	cmp	sl, r4
 8007246:	db19      	blt.n	800727c <_strtol_l.constprop.0+0xc0>
 8007248:	fb06 4603 	mla	r6, r6, r3, r4
 800724c:	f04f 0e01 	mov.w	lr, #1
 8007250:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007254:	e7e8      	b.n	8007228 <_strtol_l.constprop.0+0x6c>
 8007256:	2c2b      	cmp	r4, #43	; 0x2b
 8007258:	bf04      	itt	eq
 800725a:	782c      	ldrbeq	r4, [r5, #0]
 800725c:	1cb5      	addeq	r5, r6, #2
 800725e:	e7ca      	b.n	80071f6 <_strtol_l.constprop.0+0x3a>
 8007260:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007264:	f1bc 0f19 	cmp.w	ip, #25
 8007268:	d801      	bhi.n	800726e <_strtol_l.constprop.0+0xb2>
 800726a:	3c37      	subs	r4, #55	; 0x37
 800726c:	e7e2      	b.n	8007234 <_strtol_l.constprop.0+0x78>
 800726e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8007272:	f1bc 0f19 	cmp.w	ip, #25
 8007276:	d804      	bhi.n	8007282 <_strtol_l.constprop.0+0xc6>
 8007278:	3c57      	subs	r4, #87	; 0x57
 800727a:	e7db      	b.n	8007234 <_strtol_l.constprop.0+0x78>
 800727c:	f04f 3eff 	mov.w	lr, #4294967295
 8007280:	e7e6      	b.n	8007250 <_strtol_l.constprop.0+0x94>
 8007282:	f1be 3fff 	cmp.w	lr, #4294967295
 8007286:	d105      	bne.n	8007294 <_strtol_l.constprop.0+0xd8>
 8007288:	2322      	movs	r3, #34	; 0x22
 800728a:	6003      	str	r3, [r0, #0]
 800728c:	4646      	mov	r6, r8
 800728e:	b942      	cbnz	r2, 80072a2 <_strtol_l.constprop.0+0xe6>
 8007290:	4630      	mov	r0, r6
 8007292:	e79e      	b.n	80071d2 <_strtol_l.constprop.0+0x16>
 8007294:	b107      	cbz	r7, 8007298 <_strtol_l.constprop.0+0xdc>
 8007296:	4276      	negs	r6, r6
 8007298:	2a00      	cmp	r2, #0
 800729a:	d0f9      	beq.n	8007290 <_strtol_l.constprop.0+0xd4>
 800729c:	f1be 0f00 	cmp.w	lr, #0
 80072a0:	d000      	beq.n	80072a4 <_strtol_l.constprop.0+0xe8>
 80072a2:	1e69      	subs	r1, r5, #1
 80072a4:	6011      	str	r1, [r2, #0]
 80072a6:	e7f3      	b.n	8007290 <_strtol_l.constprop.0+0xd4>
 80072a8:	2430      	movs	r4, #48	; 0x30
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d1b1      	bne.n	8007212 <_strtol_l.constprop.0+0x56>
 80072ae:	2308      	movs	r3, #8
 80072b0:	e7af      	b.n	8007212 <_strtol_l.constprop.0+0x56>
 80072b2:	2c30      	cmp	r4, #48	; 0x30
 80072b4:	d0a5      	beq.n	8007202 <_strtol_l.constprop.0+0x46>
 80072b6:	230a      	movs	r3, #10
 80072b8:	e7ab      	b.n	8007212 <_strtol_l.constprop.0+0x56>
 80072ba:	bf00      	nop
 80072bc:	080074ef 	.word	0x080074ef

080072c0 <_strtol_r>:
 80072c0:	f7ff bf7c 	b.w	80071bc <_strtol_l.constprop.0>

080072c4 <_strtoul_l.constprop.0>:
 80072c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80072c8:	4f36      	ldr	r7, [pc, #216]	; (80073a4 <_strtoul_l.constprop.0+0xe0>)
 80072ca:	4686      	mov	lr, r0
 80072cc:	460d      	mov	r5, r1
 80072ce:	4628      	mov	r0, r5
 80072d0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80072d4:	5d3e      	ldrb	r6, [r7, r4]
 80072d6:	f016 0608 	ands.w	r6, r6, #8
 80072da:	d1f8      	bne.n	80072ce <_strtoul_l.constprop.0+0xa>
 80072dc:	2c2d      	cmp	r4, #45	; 0x2d
 80072de:	d130      	bne.n	8007342 <_strtoul_l.constprop.0+0x7e>
 80072e0:	782c      	ldrb	r4, [r5, #0]
 80072e2:	2601      	movs	r6, #1
 80072e4:	1c85      	adds	r5, r0, #2
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d057      	beq.n	800739a <_strtoul_l.constprop.0+0xd6>
 80072ea:	2b10      	cmp	r3, #16
 80072ec:	d109      	bne.n	8007302 <_strtoul_l.constprop.0+0x3e>
 80072ee:	2c30      	cmp	r4, #48	; 0x30
 80072f0:	d107      	bne.n	8007302 <_strtoul_l.constprop.0+0x3e>
 80072f2:	7828      	ldrb	r0, [r5, #0]
 80072f4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80072f8:	2858      	cmp	r0, #88	; 0x58
 80072fa:	d149      	bne.n	8007390 <_strtoul_l.constprop.0+0xcc>
 80072fc:	786c      	ldrb	r4, [r5, #1]
 80072fe:	2310      	movs	r3, #16
 8007300:	3502      	adds	r5, #2
 8007302:	f04f 38ff 	mov.w	r8, #4294967295
 8007306:	2700      	movs	r7, #0
 8007308:	fbb8 f8f3 	udiv	r8, r8, r3
 800730c:	fb03 f908 	mul.w	r9, r3, r8
 8007310:	ea6f 0909 	mvn.w	r9, r9
 8007314:	4638      	mov	r0, r7
 8007316:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800731a:	f1bc 0f09 	cmp.w	ip, #9
 800731e:	d815      	bhi.n	800734c <_strtoul_l.constprop.0+0x88>
 8007320:	4664      	mov	r4, ip
 8007322:	42a3      	cmp	r3, r4
 8007324:	dd23      	ble.n	800736e <_strtoul_l.constprop.0+0xaa>
 8007326:	f1b7 3fff 	cmp.w	r7, #4294967295
 800732a:	d007      	beq.n	800733c <_strtoul_l.constprop.0+0x78>
 800732c:	4580      	cmp	r8, r0
 800732e:	d31b      	bcc.n	8007368 <_strtoul_l.constprop.0+0xa4>
 8007330:	d101      	bne.n	8007336 <_strtoul_l.constprop.0+0x72>
 8007332:	45a1      	cmp	r9, r4
 8007334:	db18      	blt.n	8007368 <_strtoul_l.constprop.0+0xa4>
 8007336:	fb00 4003 	mla	r0, r0, r3, r4
 800733a:	2701      	movs	r7, #1
 800733c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007340:	e7e9      	b.n	8007316 <_strtoul_l.constprop.0+0x52>
 8007342:	2c2b      	cmp	r4, #43	; 0x2b
 8007344:	bf04      	itt	eq
 8007346:	782c      	ldrbeq	r4, [r5, #0]
 8007348:	1c85      	addeq	r5, r0, #2
 800734a:	e7cc      	b.n	80072e6 <_strtoul_l.constprop.0+0x22>
 800734c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007350:	f1bc 0f19 	cmp.w	ip, #25
 8007354:	d801      	bhi.n	800735a <_strtoul_l.constprop.0+0x96>
 8007356:	3c37      	subs	r4, #55	; 0x37
 8007358:	e7e3      	b.n	8007322 <_strtoul_l.constprop.0+0x5e>
 800735a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800735e:	f1bc 0f19 	cmp.w	ip, #25
 8007362:	d804      	bhi.n	800736e <_strtoul_l.constprop.0+0xaa>
 8007364:	3c57      	subs	r4, #87	; 0x57
 8007366:	e7dc      	b.n	8007322 <_strtoul_l.constprop.0+0x5e>
 8007368:	f04f 37ff 	mov.w	r7, #4294967295
 800736c:	e7e6      	b.n	800733c <_strtoul_l.constprop.0+0x78>
 800736e:	1c7b      	adds	r3, r7, #1
 8007370:	d106      	bne.n	8007380 <_strtoul_l.constprop.0+0xbc>
 8007372:	2322      	movs	r3, #34	; 0x22
 8007374:	f8ce 3000 	str.w	r3, [lr]
 8007378:	4638      	mov	r0, r7
 800737a:	b932      	cbnz	r2, 800738a <_strtoul_l.constprop.0+0xc6>
 800737c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007380:	b106      	cbz	r6, 8007384 <_strtoul_l.constprop.0+0xc0>
 8007382:	4240      	negs	r0, r0
 8007384:	2a00      	cmp	r2, #0
 8007386:	d0f9      	beq.n	800737c <_strtoul_l.constprop.0+0xb8>
 8007388:	b107      	cbz	r7, 800738c <_strtoul_l.constprop.0+0xc8>
 800738a:	1e69      	subs	r1, r5, #1
 800738c:	6011      	str	r1, [r2, #0]
 800738e:	e7f5      	b.n	800737c <_strtoul_l.constprop.0+0xb8>
 8007390:	2430      	movs	r4, #48	; 0x30
 8007392:	2b00      	cmp	r3, #0
 8007394:	d1b5      	bne.n	8007302 <_strtoul_l.constprop.0+0x3e>
 8007396:	2308      	movs	r3, #8
 8007398:	e7b3      	b.n	8007302 <_strtoul_l.constprop.0+0x3e>
 800739a:	2c30      	cmp	r4, #48	; 0x30
 800739c:	d0a9      	beq.n	80072f2 <_strtoul_l.constprop.0+0x2e>
 800739e:	230a      	movs	r3, #10
 80073a0:	e7af      	b.n	8007302 <_strtoul_l.constprop.0+0x3e>
 80073a2:	bf00      	nop
 80073a4:	080074ef 	.word	0x080074ef

080073a8 <_strtoul_r>:
 80073a8:	f7ff bf8c 	b.w	80072c4 <_strtoul_l.constprop.0>

080073ac <_malloc_usable_size_r>:
 80073ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073b0:	1f18      	subs	r0, r3, #4
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	bfbc      	itt	lt
 80073b6:	580b      	ldrlt	r3, [r1, r0]
 80073b8:	18c0      	addlt	r0, r0, r3
 80073ba:	4770      	bx	lr

080073bc <_init>:
 80073bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073be:	bf00      	nop
 80073c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073c2:	bc08      	pop	{r3}
 80073c4:	469e      	mov	lr, r3
 80073c6:	4770      	bx	lr

080073c8 <_fini>:
 80073c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ca:	bf00      	nop
 80073cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073ce:	bc08      	pop	{r3}
 80073d0:	469e      	mov	lr, r3
 80073d2:	4770      	bx	lr
